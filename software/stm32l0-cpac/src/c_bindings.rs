/* automatically generated by rust-bindgen 0.71.1 */

#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __CM0PLUS_REV: u32 = 0;
pub const __MPU_PRESENT: u32 = 1;
pub const __VTOR_PRESENT: u32 = 1;
pub const __NVIC_PRIO_BITS: u32 = 2;
pub const __Vendor_SysTickConfig: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const __WCHAR_MAX: u32 = 2147483647;
pub const __WCHAR_MIN: i32 = -2147483648;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WCHAR_MIN: i32 = -2147483648;
pub const WCHAR_MAX: u32 = 2147483647;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __CM_CMSIS_VERSION_MAIN: u32 = 5;
pub const __CM_CMSIS_VERSION_SUB: u32 = 1;
pub const __CM_CMSIS_VERSION: u32 = 327681;
pub const __CM0PLUS_CMSIS_VERSION_MAIN: u32 = 5;
pub const __CM0PLUS_CMSIS_VERSION_SUB: u32 = 1;
pub const __CM0PLUS_CMSIS_VERSION: u32 = 327681;
pub const __CORTEX_M: u32 = 0;
pub const __FPU_USED: u32 = 0;
pub const APSR_N_Pos: u32 = 31;
pub const APSR_N_Msk: u32 = 2147483648;
pub const APSR_Z_Pos: u32 = 30;
pub const APSR_Z_Msk: u32 = 1073741824;
pub const APSR_C_Pos: u32 = 29;
pub const APSR_C_Msk: u32 = 536870912;
pub const APSR_V_Pos: u32 = 28;
pub const APSR_V_Msk: u32 = 268435456;
pub const IPSR_ISR_Pos: u32 = 0;
pub const IPSR_ISR_Msk: u32 = 511;
pub const xPSR_N_Pos: u32 = 31;
pub const xPSR_N_Msk: u32 = 2147483648;
pub const xPSR_Z_Pos: u32 = 30;
pub const xPSR_Z_Msk: u32 = 1073741824;
pub const xPSR_C_Pos: u32 = 29;
pub const xPSR_C_Msk: u32 = 536870912;
pub const xPSR_V_Pos: u32 = 28;
pub const xPSR_V_Msk: u32 = 268435456;
pub const xPSR_T_Pos: u32 = 24;
pub const xPSR_T_Msk: u32 = 16777216;
pub const xPSR_ISR_Pos: u32 = 0;
pub const xPSR_ISR_Msk: u32 = 511;
pub const CONTROL_SPSEL_Pos: u32 = 1;
pub const CONTROL_SPSEL_Msk: u32 = 2;
pub const CONTROL_nPRIV_Pos: u32 = 0;
pub const CONTROL_nPRIV_Msk: u32 = 1;
pub const SCB_CPUID_IMPLEMENTER_Pos: u32 = 24;
pub const SCB_CPUID_IMPLEMENTER_Msk: u32 = 4278190080;
pub const SCB_CPUID_VARIANT_Pos: u32 = 20;
pub const SCB_CPUID_VARIANT_Msk: u32 = 15728640;
pub const SCB_CPUID_ARCHITECTURE_Pos: u32 = 16;
pub const SCB_CPUID_ARCHITECTURE_Msk: u32 = 983040;
pub const SCB_CPUID_PARTNO_Pos: u32 = 4;
pub const SCB_CPUID_PARTNO_Msk: u32 = 65520;
pub const SCB_CPUID_REVISION_Pos: u32 = 0;
pub const SCB_CPUID_REVISION_Msk: u32 = 15;
pub const SCB_ICSR_NMIPENDSET_Pos: u32 = 31;
pub const SCB_ICSR_NMIPENDSET_Msk: u32 = 2147483648;
pub const SCB_ICSR_PENDSVSET_Pos: u32 = 28;
pub const SCB_ICSR_PENDSVSET_Msk: u32 = 268435456;
pub const SCB_ICSR_PENDSVCLR_Pos: u32 = 27;
pub const SCB_ICSR_PENDSVCLR_Msk: u32 = 134217728;
pub const SCB_ICSR_PENDSTSET_Pos: u32 = 26;
pub const SCB_ICSR_PENDSTSET_Msk: u32 = 67108864;
pub const SCB_ICSR_PENDSTCLR_Pos: u32 = 25;
pub const SCB_ICSR_PENDSTCLR_Msk: u32 = 33554432;
pub const SCB_ICSR_ISRPREEMPT_Pos: u32 = 23;
pub const SCB_ICSR_ISRPREEMPT_Msk: u32 = 8388608;
pub const SCB_ICSR_ISRPENDING_Pos: u32 = 22;
pub const SCB_ICSR_ISRPENDING_Msk: u32 = 4194304;
pub const SCB_ICSR_VECTPENDING_Pos: u32 = 12;
pub const SCB_ICSR_VECTPENDING_Msk: u32 = 2093056;
pub const SCB_ICSR_VECTACTIVE_Pos: u32 = 0;
pub const SCB_ICSR_VECTACTIVE_Msk: u32 = 511;
pub const SCB_VTOR_TBLOFF_Pos: u32 = 8;
pub const SCB_VTOR_TBLOFF_Msk: u32 = 4294967040;
pub const SCB_AIRCR_VECTKEY_Pos: u32 = 16;
pub const SCB_AIRCR_VECTKEY_Msk: u32 = 4294901760;
pub const SCB_AIRCR_VECTKEYSTAT_Pos: u32 = 16;
pub const SCB_AIRCR_VECTKEYSTAT_Msk: u32 = 4294901760;
pub const SCB_AIRCR_ENDIANESS_Pos: u32 = 15;
pub const SCB_AIRCR_ENDIANESS_Msk: u32 = 32768;
pub const SCB_AIRCR_SYSRESETREQ_Pos: u32 = 2;
pub const SCB_AIRCR_SYSRESETREQ_Msk: u32 = 4;
pub const SCB_AIRCR_VECTCLRACTIVE_Pos: u32 = 1;
pub const SCB_AIRCR_VECTCLRACTIVE_Msk: u32 = 2;
pub const SCB_SCR_SEVONPEND_Pos: u32 = 4;
pub const SCB_SCR_SEVONPEND_Msk: u32 = 16;
pub const SCB_SCR_SLEEPDEEP_Pos: u32 = 2;
pub const SCB_SCR_SLEEPDEEP_Msk: u32 = 4;
pub const SCB_SCR_SLEEPONEXIT_Pos: u32 = 1;
pub const SCB_SCR_SLEEPONEXIT_Msk: u32 = 2;
pub const SCB_CCR_STKALIGN_Pos: u32 = 9;
pub const SCB_CCR_STKALIGN_Msk: u32 = 512;
pub const SCB_CCR_UNALIGN_TRP_Pos: u32 = 3;
pub const SCB_CCR_UNALIGN_TRP_Msk: u32 = 8;
pub const SCB_SHCSR_SVCALLPENDED_Pos: u32 = 15;
pub const SCB_SHCSR_SVCALLPENDED_Msk: u32 = 32768;
pub const SysTick_CTRL_COUNTFLAG_Pos: u32 = 16;
pub const SysTick_CTRL_COUNTFLAG_Msk: u32 = 65536;
pub const SysTick_CTRL_CLKSOURCE_Pos: u32 = 2;
pub const SysTick_CTRL_CLKSOURCE_Msk: u32 = 4;
pub const SysTick_CTRL_TICKINT_Pos: u32 = 1;
pub const SysTick_CTRL_TICKINT_Msk: u32 = 2;
pub const SysTick_CTRL_ENABLE_Pos: u32 = 0;
pub const SysTick_CTRL_ENABLE_Msk: u32 = 1;
pub const SysTick_LOAD_RELOAD_Pos: u32 = 0;
pub const SysTick_LOAD_RELOAD_Msk: u32 = 16777215;
pub const SysTick_VAL_CURRENT_Pos: u32 = 0;
pub const SysTick_VAL_CURRENT_Msk: u32 = 16777215;
pub const SysTick_CALIB_NOREF_Pos: u32 = 31;
pub const SysTick_CALIB_NOREF_Msk: u32 = 2147483648;
pub const SysTick_CALIB_SKEW_Pos: u32 = 30;
pub const SysTick_CALIB_SKEW_Msk: u32 = 1073741824;
pub const SysTick_CALIB_TENMS_Pos: u32 = 0;
pub const SysTick_CALIB_TENMS_Msk: u32 = 16777215;
pub const MPU_TYPE_RALIASES: u32 = 1;
pub const MPU_TYPE_IREGION_Pos: u32 = 16;
pub const MPU_TYPE_IREGION_Msk: u32 = 16711680;
pub const MPU_TYPE_DREGION_Pos: u32 = 8;
pub const MPU_TYPE_DREGION_Msk: u32 = 65280;
pub const MPU_TYPE_SEPARATE_Pos: u32 = 0;
pub const MPU_TYPE_SEPARATE_Msk: u32 = 1;
pub const MPU_CTRL_PRIVDEFENA_Pos: u32 = 2;
pub const MPU_CTRL_PRIVDEFENA_Msk: u32 = 4;
pub const MPU_CTRL_HFNMIENA_Pos: u32 = 1;
pub const MPU_CTRL_HFNMIENA_Msk: u32 = 2;
pub const MPU_CTRL_ENABLE_Pos: u32 = 0;
pub const MPU_CTRL_ENABLE_Msk: u32 = 1;
pub const MPU_RNR_REGION_Pos: u32 = 0;
pub const MPU_RNR_REGION_Msk: u32 = 255;
pub const MPU_RBAR_ADDR_Pos: u32 = 8;
pub const MPU_RBAR_ADDR_Msk: u32 = 4294967040;
pub const MPU_RBAR_VALID_Pos: u32 = 4;
pub const MPU_RBAR_VALID_Msk: u32 = 16;
pub const MPU_RBAR_REGION_Pos: u32 = 0;
pub const MPU_RBAR_REGION_Msk: u32 = 15;
pub const MPU_RASR_ATTRS_Pos: u32 = 16;
pub const MPU_RASR_ATTRS_Msk: u32 = 4294901760;
pub const MPU_RASR_XN_Pos: u32 = 28;
pub const MPU_RASR_XN_Msk: u32 = 268435456;
pub const MPU_RASR_AP_Pos: u32 = 24;
pub const MPU_RASR_AP_Msk: u32 = 117440512;
pub const MPU_RASR_TEX_Pos: u32 = 19;
pub const MPU_RASR_TEX_Msk: u32 = 3670016;
pub const MPU_RASR_S_Pos: u32 = 18;
pub const MPU_RASR_S_Msk: u32 = 262144;
pub const MPU_RASR_C_Pos: u32 = 17;
pub const MPU_RASR_C_Msk: u32 = 131072;
pub const MPU_RASR_B_Pos: u32 = 16;
pub const MPU_RASR_B_Msk: u32 = 65536;
pub const MPU_RASR_SRD_Pos: u32 = 8;
pub const MPU_RASR_SRD_Msk: u32 = 65280;
pub const MPU_RASR_SIZE_Pos: u32 = 1;
pub const MPU_RASR_SIZE_Msk: u32 = 62;
pub const MPU_RASR_ENABLE_Pos: u32 = 0;
pub const MPU_RASR_ENABLE_Msk: u32 = 1;
pub const SCS_BASE: u32 = 3758153728;
pub const SysTick_BASE: u32 = 3758153744;
pub const NVIC_BASE: u32 = 3758153984;
pub const SCB_BASE: u32 = 3758157056;
pub const MPU_BASE: u32 = 3758157200;
pub const NVIC_USER_IRQ_OFFSET: u32 = 16;
pub const EXC_RETURN_HANDLER: u32 = 4294967281;
pub const EXC_RETURN_THREAD_MSP: u32 = 4294967289;
pub const EXC_RETURN_THREAD_PSP: u32 = 4294967293;
pub const ARM_MPU_REGION_SIZE_32B: u32 = 4;
pub const ARM_MPU_REGION_SIZE_64B: u32 = 5;
pub const ARM_MPU_REGION_SIZE_128B: u32 = 6;
pub const ARM_MPU_REGION_SIZE_256B: u32 = 7;
pub const ARM_MPU_REGION_SIZE_512B: u32 = 8;
pub const ARM_MPU_REGION_SIZE_1KB: u32 = 9;
pub const ARM_MPU_REGION_SIZE_2KB: u32 = 10;
pub const ARM_MPU_REGION_SIZE_4KB: u32 = 11;
pub const ARM_MPU_REGION_SIZE_8KB: u32 = 12;
pub const ARM_MPU_REGION_SIZE_16KB: u32 = 13;
pub const ARM_MPU_REGION_SIZE_32KB: u32 = 14;
pub const ARM_MPU_REGION_SIZE_64KB: u32 = 15;
pub const ARM_MPU_REGION_SIZE_128KB: u32 = 16;
pub const ARM_MPU_REGION_SIZE_256KB: u32 = 17;
pub const ARM_MPU_REGION_SIZE_512KB: u32 = 18;
pub const ARM_MPU_REGION_SIZE_1MB: u32 = 19;
pub const ARM_MPU_REGION_SIZE_2MB: u32 = 20;
pub const ARM_MPU_REGION_SIZE_4MB: u32 = 21;
pub const ARM_MPU_REGION_SIZE_8MB: u32 = 22;
pub const ARM_MPU_REGION_SIZE_16MB: u32 = 23;
pub const ARM_MPU_REGION_SIZE_32MB: u32 = 24;
pub const ARM_MPU_REGION_SIZE_64MB: u32 = 25;
pub const ARM_MPU_REGION_SIZE_128MB: u32 = 26;
pub const ARM_MPU_REGION_SIZE_256MB: u32 = 27;
pub const ARM_MPU_REGION_SIZE_512MB: u32 = 28;
pub const ARM_MPU_REGION_SIZE_1GB: u32 = 29;
pub const ARM_MPU_REGION_SIZE_2GB: u32 = 30;
pub const ARM_MPU_REGION_SIZE_4GB: u32 = 31;
pub const ARM_MPU_AP_NONE: u32 = 0;
pub const ARM_MPU_AP_PRIV: u32 = 1;
pub const ARM_MPU_AP_URO: u32 = 2;
pub const ARM_MPU_AP_FULL: u32 = 3;
pub const ARM_MPU_AP_PRO: u32 = 5;
pub const ARM_MPU_AP_RO: u32 = 6;
pub const ARM_MPU_ACCESS_ORDERED: u32 = 262144;
pub const ARM_MPU_CACHEP_NOCACHE: u32 = 0;
pub const ARM_MPU_CACHEP_WB_WRA: u32 = 1;
pub const ARM_MPU_CACHEP_WT_NWA: u32 = 2;
pub const ARM_MPU_CACHEP_WB_NWA: u32 = 3;
pub const FLASH_BASE: u32 = 134217728;
pub const DATA_EEPROM_BASE: u32 = 134742016;
pub const DATA_EEPROM_BANK2_BASE: u32 = 134745088;
pub const DATA_EEPROM_BANK1_END: u32 = 134745087;
pub const DATA_EEPROM_BANK2_END: u32 = 134748159;
pub const SRAM_BASE: u32 = 536870912;
pub const SRAM_SIZE_MAX: u32 = 20480;
pub const PERIPH_BASE: u32 = 1073741824;
pub const APBPERIPH_BASE: u32 = 1073741824;
pub const AHBPERIPH_BASE: u32 = 1073872896;
pub const IOPPERIPH_BASE: u32 = 1342177280;
pub const TIM2_BASE: u32 = 1073741824;
pub const TIM3_BASE: u32 = 1073742848;
pub const TIM6_BASE: u32 = 1073745920;
pub const TIM7_BASE: u32 = 1073746944;
pub const RTC_BASE: u32 = 1073752064;
pub const WWDG_BASE: u32 = 1073753088;
pub const IWDG_BASE: u32 = 1073754112;
pub const SPI2_BASE: u32 = 1073756160;
pub const USART2_BASE: u32 = 1073759232;
pub const LPUART1_BASE: u32 = 1073760256;
pub const USART4_BASE: u32 = 1073761280;
pub const USART5_BASE: u32 = 1073762304;
pub const I2C1_BASE: u32 = 1073763328;
pub const I2C2_BASE: u32 = 1073764352;
pub const CRS_BASE: u32 = 1073769472;
pub const PWR_BASE: u32 = 1073770496;
pub const DAC_BASE: u32 = 1073771520;
pub const LPTIM1_BASE: u32 = 1073773568;
pub const I2C3_BASE: u32 = 1073772544;
pub const SYSCFG_BASE: u32 = 1073807360;
pub const COMP1_BASE: u32 = 1073807384;
pub const COMP2_BASE: u32 = 1073807388;
pub const EXTI_BASE: u32 = 1073808384;
pub const TIM21_BASE: u32 = 1073809408;
pub const TIM22_BASE: u32 = 1073812480;
pub const FIREWALL_BASE: u32 = 1073814528;
pub const ADC1_BASE: u32 = 1073816576;
pub const ADC_BASE: u32 = 1073817352;
pub const SPI1_BASE: u32 = 1073819648;
pub const USART1_BASE: u32 = 1073821696;
pub const DBGMCU_BASE: u32 = 1073829888;
pub const DMA1_BASE: u32 = 1073872896;
pub const DMA1_Channel1_BASE: u32 = 1073872904;
pub const DMA1_Channel2_BASE: u32 = 1073872924;
pub const DMA1_Channel3_BASE: u32 = 1073872944;
pub const DMA1_Channel4_BASE: u32 = 1073872964;
pub const DMA1_Channel5_BASE: u32 = 1073872984;
pub const DMA1_Channel6_BASE: u32 = 1073873004;
pub const DMA1_Channel7_BASE: u32 = 1073873024;
pub const DMA1_CSELR_BASE: u32 = 1073873064;
pub const RCC_BASE: u32 = 1073876992;
pub const FLASH_R_BASE: u32 = 1073881088;
pub const OB_BASE: u32 = 536346624;
pub const FLASHSIZE_BASE: u32 = 536346748;
pub const UID_BASE: u32 = 536346704;
pub const CRC_BASE: u32 = 1073885184;
pub const TSC_BASE: u32 = 1073889280;
pub const RNG_BASE: u32 = 1073893376;
pub const GPIOA_BASE: u32 = 1342177280;
pub const GPIOB_BASE: u32 = 1342178304;
pub const GPIOC_BASE: u32 = 1342179328;
pub const GPIOD_BASE: u32 = 1342180352;
pub const GPIOE_BASE: u32 = 1342181376;
pub const GPIOH_BASE: u32 = 1342184448;
pub const LSI_STARTUP_TIME: u32 = 200;
pub const ADC_ISR_EOCAL_Pos: u32 = 11;
pub const ADC_ISR_EOCAL_Msk: u32 = 2048;
pub const ADC_ISR_EOCAL: u32 = 2048;
pub const ADC_ISR_AWD_Pos: u32 = 7;
pub const ADC_ISR_AWD_Msk: u32 = 128;
pub const ADC_ISR_AWD: u32 = 128;
pub const ADC_ISR_OVR_Pos: u32 = 4;
pub const ADC_ISR_OVR_Msk: u32 = 16;
pub const ADC_ISR_OVR: u32 = 16;
pub const ADC_ISR_EOSEQ_Pos: u32 = 3;
pub const ADC_ISR_EOSEQ_Msk: u32 = 8;
pub const ADC_ISR_EOSEQ: u32 = 8;
pub const ADC_ISR_EOC_Pos: u32 = 2;
pub const ADC_ISR_EOC_Msk: u32 = 4;
pub const ADC_ISR_EOC: u32 = 4;
pub const ADC_ISR_EOSMP_Pos: u32 = 1;
pub const ADC_ISR_EOSMP_Msk: u32 = 2;
pub const ADC_ISR_EOSMP: u32 = 2;
pub const ADC_ISR_ADRDY_Pos: u32 = 0;
pub const ADC_ISR_ADRDY_Msk: u32 = 1;
pub const ADC_ISR_ADRDY: u32 = 1;
pub const ADC_ISR_EOS: u32 = 8;
pub const ADC_IER_EOCALIE_Pos: u32 = 11;
pub const ADC_IER_EOCALIE_Msk: u32 = 2048;
pub const ADC_IER_EOCALIE: u32 = 2048;
pub const ADC_IER_AWDIE_Pos: u32 = 7;
pub const ADC_IER_AWDIE_Msk: u32 = 128;
pub const ADC_IER_AWDIE: u32 = 128;
pub const ADC_IER_OVRIE_Pos: u32 = 4;
pub const ADC_IER_OVRIE_Msk: u32 = 16;
pub const ADC_IER_OVRIE: u32 = 16;
pub const ADC_IER_EOSEQIE_Pos: u32 = 3;
pub const ADC_IER_EOSEQIE_Msk: u32 = 8;
pub const ADC_IER_EOSEQIE: u32 = 8;
pub const ADC_IER_EOCIE_Pos: u32 = 2;
pub const ADC_IER_EOCIE_Msk: u32 = 4;
pub const ADC_IER_EOCIE: u32 = 4;
pub const ADC_IER_EOSMPIE_Pos: u32 = 1;
pub const ADC_IER_EOSMPIE_Msk: u32 = 2;
pub const ADC_IER_EOSMPIE: u32 = 2;
pub const ADC_IER_ADRDYIE_Pos: u32 = 0;
pub const ADC_IER_ADRDYIE_Msk: u32 = 1;
pub const ADC_IER_ADRDYIE: u32 = 1;
pub const ADC_IER_EOSIE: u32 = 8;
pub const ADC_CR_ADCAL_Pos: u32 = 31;
pub const ADC_CR_ADCAL_Msk: u32 = 2147483648;
pub const ADC_CR_ADCAL: u32 = 2147483648;
pub const ADC_CR_ADVREGEN_Pos: u32 = 28;
pub const ADC_CR_ADVREGEN_Msk: u32 = 268435456;
pub const ADC_CR_ADVREGEN: u32 = 268435456;
pub const ADC_CR_ADSTP_Pos: u32 = 4;
pub const ADC_CR_ADSTP_Msk: u32 = 16;
pub const ADC_CR_ADSTP: u32 = 16;
pub const ADC_CR_ADSTART_Pos: u32 = 2;
pub const ADC_CR_ADSTART_Msk: u32 = 4;
pub const ADC_CR_ADSTART: u32 = 4;
pub const ADC_CR_ADDIS_Pos: u32 = 1;
pub const ADC_CR_ADDIS_Msk: u32 = 2;
pub const ADC_CR_ADDIS: u32 = 2;
pub const ADC_CR_ADEN_Pos: u32 = 0;
pub const ADC_CR_ADEN_Msk: u32 = 1;
pub const ADC_CR_ADEN: u32 = 1;
pub const ADC_CFGR1_AWDCH_Pos: u32 = 26;
pub const ADC_CFGR1_AWDCH_Msk: u32 = 2080374784;
pub const ADC_CFGR1_AWDCH: u32 = 2080374784;
pub const ADC_CFGR1_AWDCH_0: u32 = 67108864;
pub const ADC_CFGR1_AWDCH_1: u32 = 134217728;
pub const ADC_CFGR1_AWDCH_2: u32 = 268435456;
pub const ADC_CFGR1_AWDCH_3: u32 = 536870912;
pub const ADC_CFGR1_AWDCH_4: u32 = 1073741824;
pub const ADC_CFGR1_AWDEN_Pos: u32 = 23;
pub const ADC_CFGR1_AWDEN_Msk: u32 = 8388608;
pub const ADC_CFGR1_AWDEN: u32 = 8388608;
pub const ADC_CFGR1_AWDSGL_Pos: u32 = 22;
pub const ADC_CFGR1_AWDSGL_Msk: u32 = 4194304;
pub const ADC_CFGR1_AWDSGL: u32 = 4194304;
pub const ADC_CFGR1_DISCEN_Pos: u32 = 16;
pub const ADC_CFGR1_DISCEN_Msk: u32 = 65536;
pub const ADC_CFGR1_DISCEN: u32 = 65536;
pub const ADC_CFGR1_AUTOFF_Pos: u32 = 15;
pub const ADC_CFGR1_AUTOFF_Msk: u32 = 32768;
pub const ADC_CFGR1_AUTOFF: u32 = 32768;
pub const ADC_CFGR1_WAIT_Pos: u32 = 14;
pub const ADC_CFGR1_WAIT_Msk: u32 = 16384;
pub const ADC_CFGR1_WAIT: u32 = 16384;
pub const ADC_CFGR1_CONT_Pos: u32 = 13;
pub const ADC_CFGR1_CONT_Msk: u32 = 8192;
pub const ADC_CFGR1_CONT: u32 = 8192;
pub const ADC_CFGR1_OVRMOD_Pos: u32 = 12;
pub const ADC_CFGR1_OVRMOD_Msk: u32 = 4096;
pub const ADC_CFGR1_OVRMOD: u32 = 4096;
pub const ADC_CFGR1_EXTEN_Pos: u32 = 10;
pub const ADC_CFGR1_EXTEN_Msk: u32 = 3072;
pub const ADC_CFGR1_EXTEN: u32 = 3072;
pub const ADC_CFGR1_EXTEN_0: u32 = 1024;
pub const ADC_CFGR1_EXTEN_1: u32 = 2048;
pub const ADC_CFGR1_EXTSEL_Pos: u32 = 6;
pub const ADC_CFGR1_EXTSEL_Msk: u32 = 448;
pub const ADC_CFGR1_EXTSEL: u32 = 448;
pub const ADC_CFGR1_EXTSEL_0: u32 = 64;
pub const ADC_CFGR1_EXTSEL_1: u32 = 128;
pub const ADC_CFGR1_EXTSEL_2: u32 = 256;
pub const ADC_CFGR1_ALIGN_Pos: u32 = 5;
pub const ADC_CFGR1_ALIGN_Msk: u32 = 32;
pub const ADC_CFGR1_ALIGN: u32 = 32;
pub const ADC_CFGR1_RES_Pos: u32 = 3;
pub const ADC_CFGR1_RES_Msk: u32 = 24;
pub const ADC_CFGR1_RES: u32 = 24;
pub const ADC_CFGR1_RES_0: u32 = 8;
pub const ADC_CFGR1_RES_1: u32 = 16;
pub const ADC_CFGR1_SCANDIR_Pos: u32 = 2;
pub const ADC_CFGR1_SCANDIR_Msk: u32 = 4;
pub const ADC_CFGR1_SCANDIR: u32 = 4;
pub const ADC_CFGR1_DMACFG_Pos: u32 = 1;
pub const ADC_CFGR1_DMACFG_Msk: u32 = 2;
pub const ADC_CFGR1_DMACFG: u32 = 2;
pub const ADC_CFGR1_DMAEN_Pos: u32 = 0;
pub const ADC_CFGR1_DMAEN_Msk: u32 = 1;
pub const ADC_CFGR1_DMAEN: u32 = 1;
pub const ADC_CFGR1_AUTDLY: u32 = 16384;
pub const ADC_CFGR2_TOVS_Pos: u32 = 9;
pub const ADC_CFGR2_TOVS_Msk: u32 = 512;
pub const ADC_CFGR2_TOVS: u32 = 512;
pub const ADC_CFGR2_OVSS_Pos: u32 = 5;
pub const ADC_CFGR2_OVSS_Msk: u32 = 480;
pub const ADC_CFGR2_OVSS: u32 = 480;
pub const ADC_CFGR2_OVSS_0: u32 = 32;
pub const ADC_CFGR2_OVSS_1: u32 = 64;
pub const ADC_CFGR2_OVSS_2: u32 = 128;
pub const ADC_CFGR2_OVSS_3: u32 = 256;
pub const ADC_CFGR2_OVSR_Pos: u32 = 2;
pub const ADC_CFGR2_OVSR_Msk: u32 = 28;
pub const ADC_CFGR2_OVSR: u32 = 28;
pub const ADC_CFGR2_OVSR_0: u32 = 4;
pub const ADC_CFGR2_OVSR_1: u32 = 8;
pub const ADC_CFGR2_OVSR_2: u32 = 16;
pub const ADC_CFGR2_OVSE_Pos: u32 = 0;
pub const ADC_CFGR2_OVSE_Msk: u32 = 1;
pub const ADC_CFGR2_OVSE: u32 = 1;
pub const ADC_CFGR2_CKMODE_Pos: u32 = 30;
pub const ADC_CFGR2_CKMODE_Msk: u32 = 3221225472;
pub const ADC_CFGR2_CKMODE: u32 = 3221225472;
pub const ADC_CFGR2_CKMODE_0: u32 = 1073741824;
pub const ADC_CFGR2_CKMODE_1: u32 = 2147483648;
pub const ADC_SMPR_SMP_Pos: u32 = 0;
pub const ADC_SMPR_SMP_Msk: u32 = 7;
pub const ADC_SMPR_SMP: u32 = 7;
pub const ADC_SMPR_SMP_0: u32 = 1;
pub const ADC_SMPR_SMP_1: u32 = 2;
pub const ADC_SMPR_SMP_2: u32 = 4;
pub const ADC_SMPR_SMPR: u32 = 7;
pub const ADC_SMPR_SMPR_0: u32 = 1;
pub const ADC_SMPR_SMPR_1: u32 = 2;
pub const ADC_SMPR_SMPR_2: u32 = 4;
pub const ADC_TR_HT_Pos: u32 = 16;
pub const ADC_TR_HT_Msk: u32 = 268369920;
pub const ADC_TR_HT: u32 = 268369920;
pub const ADC_TR_LT_Pos: u32 = 0;
pub const ADC_TR_LT_Msk: u32 = 4095;
pub const ADC_TR_LT: u32 = 4095;
pub const ADC_CHSELR_CHSEL_Pos: u32 = 0;
pub const ADC_CHSELR_CHSEL_Msk: u32 = 524287;
pub const ADC_CHSELR_CHSEL: u32 = 524287;
pub const ADC_CHSELR_CHSEL18_Pos: u32 = 18;
pub const ADC_CHSELR_CHSEL18_Msk: u32 = 262144;
pub const ADC_CHSELR_CHSEL18: u32 = 262144;
pub const ADC_CHSELR_CHSEL17_Pos: u32 = 17;
pub const ADC_CHSELR_CHSEL17_Msk: u32 = 131072;
pub const ADC_CHSELR_CHSEL17: u32 = 131072;
pub const ADC_CHSELR_CHSEL15_Pos: u32 = 15;
pub const ADC_CHSELR_CHSEL15_Msk: u32 = 32768;
pub const ADC_CHSELR_CHSEL15: u32 = 32768;
pub const ADC_CHSELR_CHSEL14_Pos: u32 = 14;
pub const ADC_CHSELR_CHSEL14_Msk: u32 = 16384;
pub const ADC_CHSELR_CHSEL14: u32 = 16384;
pub const ADC_CHSELR_CHSEL13_Pos: u32 = 13;
pub const ADC_CHSELR_CHSEL13_Msk: u32 = 8192;
pub const ADC_CHSELR_CHSEL13: u32 = 8192;
pub const ADC_CHSELR_CHSEL12_Pos: u32 = 12;
pub const ADC_CHSELR_CHSEL12_Msk: u32 = 4096;
pub const ADC_CHSELR_CHSEL12: u32 = 4096;
pub const ADC_CHSELR_CHSEL11_Pos: u32 = 11;
pub const ADC_CHSELR_CHSEL11_Msk: u32 = 2048;
pub const ADC_CHSELR_CHSEL11: u32 = 2048;
pub const ADC_CHSELR_CHSEL10_Pos: u32 = 10;
pub const ADC_CHSELR_CHSEL10_Msk: u32 = 1024;
pub const ADC_CHSELR_CHSEL10: u32 = 1024;
pub const ADC_CHSELR_CHSEL9_Pos: u32 = 9;
pub const ADC_CHSELR_CHSEL9_Msk: u32 = 512;
pub const ADC_CHSELR_CHSEL9: u32 = 512;
pub const ADC_CHSELR_CHSEL8_Pos: u32 = 8;
pub const ADC_CHSELR_CHSEL8_Msk: u32 = 256;
pub const ADC_CHSELR_CHSEL8: u32 = 256;
pub const ADC_CHSELR_CHSEL7_Pos: u32 = 7;
pub const ADC_CHSELR_CHSEL7_Msk: u32 = 128;
pub const ADC_CHSELR_CHSEL7: u32 = 128;
pub const ADC_CHSELR_CHSEL6_Pos: u32 = 6;
pub const ADC_CHSELR_CHSEL6_Msk: u32 = 64;
pub const ADC_CHSELR_CHSEL6: u32 = 64;
pub const ADC_CHSELR_CHSEL5_Pos: u32 = 5;
pub const ADC_CHSELR_CHSEL5_Msk: u32 = 32;
pub const ADC_CHSELR_CHSEL5: u32 = 32;
pub const ADC_CHSELR_CHSEL4_Pos: u32 = 4;
pub const ADC_CHSELR_CHSEL4_Msk: u32 = 16;
pub const ADC_CHSELR_CHSEL4: u32 = 16;
pub const ADC_CHSELR_CHSEL3_Pos: u32 = 3;
pub const ADC_CHSELR_CHSEL3_Msk: u32 = 8;
pub const ADC_CHSELR_CHSEL3: u32 = 8;
pub const ADC_CHSELR_CHSEL2_Pos: u32 = 2;
pub const ADC_CHSELR_CHSEL2_Msk: u32 = 4;
pub const ADC_CHSELR_CHSEL2: u32 = 4;
pub const ADC_CHSELR_CHSEL1_Pos: u32 = 1;
pub const ADC_CHSELR_CHSEL1_Msk: u32 = 2;
pub const ADC_CHSELR_CHSEL1: u32 = 2;
pub const ADC_CHSELR_CHSEL0_Pos: u32 = 0;
pub const ADC_CHSELR_CHSEL0_Msk: u32 = 1;
pub const ADC_CHSELR_CHSEL0: u32 = 1;
pub const ADC_DR_DATA_Pos: u32 = 0;
pub const ADC_DR_DATA_Msk: u32 = 65535;
pub const ADC_DR_DATA: u32 = 65535;
pub const ADC_CALFACT_CALFACT_Pos: u32 = 0;
pub const ADC_CALFACT_CALFACT_Msk: u32 = 127;
pub const ADC_CALFACT_CALFACT: u32 = 127;
pub const ADC_CCR_LFMEN_Pos: u32 = 25;
pub const ADC_CCR_LFMEN_Msk: u32 = 33554432;
pub const ADC_CCR_LFMEN: u32 = 33554432;
pub const ADC_CCR_TSEN_Pos: u32 = 23;
pub const ADC_CCR_TSEN_Msk: u32 = 8388608;
pub const ADC_CCR_TSEN: u32 = 8388608;
pub const ADC_CCR_VREFEN_Pos: u32 = 22;
pub const ADC_CCR_VREFEN_Msk: u32 = 4194304;
pub const ADC_CCR_VREFEN: u32 = 4194304;
pub const ADC_CCR_PRESC_Pos: u32 = 18;
pub const ADC_CCR_PRESC_Msk: u32 = 3932160;
pub const ADC_CCR_PRESC: u32 = 3932160;
pub const ADC_CCR_PRESC_0: u32 = 262144;
pub const ADC_CCR_PRESC_1: u32 = 524288;
pub const ADC_CCR_PRESC_2: u32 = 1048576;
pub const ADC_CCR_PRESC_3: u32 = 2097152;
pub const COMP_CSR_COMP1EN_Pos: u32 = 0;
pub const COMP_CSR_COMP1EN_Msk: u32 = 1;
pub const COMP_CSR_COMP1EN: u32 = 1;
pub const COMP_CSR_COMP1INNSEL_Pos: u32 = 4;
pub const COMP_CSR_COMP1INNSEL_Msk: u32 = 48;
pub const COMP_CSR_COMP1INNSEL: u32 = 48;
pub const COMP_CSR_COMP1INNSEL_0: u32 = 16;
pub const COMP_CSR_COMP1INNSEL_1: u32 = 32;
pub const COMP_CSR_COMP1WM_Pos: u32 = 8;
pub const COMP_CSR_COMP1WM_Msk: u32 = 256;
pub const COMP_CSR_COMP1WM: u32 = 256;
pub const COMP_CSR_COMP1LPTIM1IN1_Pos: u32 = 12;
pub const COMP_CSR_COMP1LPTIM1IN1_Msk: u32 = 4096;
pub const COMP_CSR_COMP1LPTIM1IN1: u32 = 4096;
pub const COMP_CSR_COMP1POLARITY_Pos: u32 = 15;
pub const COMP_CSR_COMP1POLARITY_Msk: u32 = 32768;
pub const COMP_CSR_COMP1POLARITY: u32 = 32768;
pub const COMP_CSR_COMP1VALUE_Pos: u32 = 30;
pub const COMP_CSR_COMP1VALUE_Msk: u32 = 1073741824;
pub const COMP_CSR_COMP1VALUE: u32 = 1073741824;
pub const COMP_CSR_COMP1LOCK_Pos: u32 = 31;
pub const COMP_CSR_COMP1LOCK_Msk: u32 = 2147483648;
pub const COMP_CSR_COMP1LOCK: u32 = 2147483648;
pub const COMP_CSR_COMP2EN_Pos: u32 = 0;
pub const COMP_CSR_COMP2EN_Msk: u32 = 1;
pub const COMP_CSR_COMP2EN: u32 = 1;
pub const COMP_CSR_COMP2SPEED_Pos: u32 = 3;
pub const COMP_CSR_COMP2SPEED_Msk: u32 = 8;
pub const COMP_CSR_COMP2SPEED: u32 = 8;
pub const COMP_CSR_COMP2INNSEL_Pos: u32 = 4;
pub const COMP_CSR_COMP2INNSEL_Msk: u32 = 112;
pub const COMP_CSR_COMP2INNSEL: u32 = 112;
pub const COMP_CSR_COMP2INNSEL_0: u32 = 16;
pub const COMP_CSR_COMP2INNSEL_1: u32 = 32;
pub const COMP_CSR_COMP2INNSEL_2: u32 = 64;
pub const COMP_CSR_COMP2INPSEL_Pos: u32 = 8;
pub const COMP_CSR_COMP2INPSEL_Msk: u32 = 1792;
pub const COMP_CSR_COMP2INPSEL: u32 = 1792;
pub const COMP_CSR_COMP2INPSEL_0: u32 = 256;
pub const COMP_CSR_COMP2INPSEL_1: u32 = 512;
pub const COMP_CSR_COMP2INPSEL_2: u32 = 1024;
pub const COMP_CSR_COMP2LPTIM1IN2_Pos: u32 = 12;
pub const COMP_CSR_COMP2LPTIM1IN2_Msk: u32 = 4096;
pub const COMP_CSR_COMP2LPTIM1IN2: u32 = 4096;
pub const COMP_CSR_COMP2LPTIM1IN1_Pos: u32 = 13;
pub const COMP_CSR_COMP2LPTIM1IN1_Msk: u32 = 8192;
pub const COMP_CSR_COMP2LPTIM1IN1: u32 = 8192;
pub const COMP_CSR_COMP2POLARITY_Pos: u32 = 15;
pub const COMP_CSR_COMP2POLARITY_Msk: u32 = 32768;
pub const COMP_CSR_COMP2POLARITY: u32 = 32768;
pub const COMP_CSR_COMP2VALUE_Pos: u32 = 30;
pub const COMP_CSR_COMP2VALUE_Msk: u32 = 1073741824;
pub const COMP_CSR_COMP2VALUE: u32 = 1073741824;
pub const COMP_CSR_COMP2LOCK_Pos: u32 = 31;
pub const COMP_CSR_COMP2LOCK_Msk: u32 = 2147483648;
pub const COMP_CSR_COMP2LOCK: u32 = 2147483648;
pub const COMP_CSR_COMPxEN_Pos: u32 = 0;
pub const COMP_CSR_COMPxEN_Msk: u32 = 1;
pub const COMP_CSR_COMPxEN: u32 = 1;
pub const COMP_CSR_COMPxPOLARITY_Pos: u32 = 15;
pub const COMP_CSR_COMPxPOLARITY_Msk: u32 = 32768;
pub const COMP_CSR_COMPxPOLARITY: u32 = 32768;
pub const COMP_CSR_COMPxOUTVALUE_Pos: u32 = 30;
pub const COMP_CSR_COMPxOUTVALUE_Msk: u32 = 1073741824;
pub const COMP_CSR_COMPxOUTVALUE: u32 = 1073741824;
pub const COMP_CSR_COMPxLOCK_Pos: u32 = 31;
pub const COMP_CSR_COMPxLOCK_Msk: u32 = 2147483648;
pub const COMP_CSR_COMPxLOCK: u32 = 2147483648;
pub const COMP_CSR_WINMODE: u32 = 256;
pub const CRC_DR_DR_Pos: u32 = 0;
pub const CRC_DR_DR_Msk: u32 = 4294967295;
pub const CRC_DR_DR: u32 = 4294967295;
pub const CRC_IDR_IDR: u32 = 255;
pub const CRC_CR_RESET_Pos: u32 = 0;
pub const CRC_CR_RESET_Msk: u32 = 1;
pub const CRC_CR_RESET: u32 = 1;
pub const CRC_CR_POLYSIZE_Pos: u32 = 3;
pub const CRC_CR_POLYSIZE_Msk: u32 = 24;
pub const CRC_CR_POLYSIZE: u32 = 24;
pub const CRC_CR_POLYSIZE_0: u32 = 8;
pub const CRC_CR_POLYSIZE_1: u32 = 16;
pub const CRC_CR_REV_IN_Pos: u32 = 5;
pub const CRC_CR_REV_IN_Msk: u32 = 96;
pub const CRC_CR_REV_IN: u32 = 96;
pub const CRC_CR_REV_IN_0: u32 = 32;
pub const CRC_CR_REV_IN_1: u32 = 64;
pub const CRC_CR_REV_OUT_Pos: u32 = 7;
pub const CRC_CR_REV_OUT_Msk: u32 = 128;
pub const CRC_CR_REV_OUT: u32 = 128;
pub const CRC_INIT_INIT_Pos: u32 = 0;
pub const CRC_INIT_INIT_Msk: u32 = 4294967295;
pub const CRC_INIT_INIT: u32 = 4294967295;
pub const CRC_POL_POL_Pos: u32 = 0;
pub const CRC_POL_POL_Msk: u32 = 4294967295;
pub const CRC_POL_POL: u32 = 4294967295;
pub const CRS_CR_SYNCOKIE_Pos: u32 = 0;
pub const CRS_CR_SYNCOKIE_Msk: u32 = 1;
pub const CRS_CR_SYNCOKIE: u32 = 1;
pub const CRS_CR_SYNCWARNIE_Pos: u32 = 1;
pub const CRS_CR_SYNCWARNIE_Msk: u32 = 2;
pub const CRS_CR_SYNCWARNIE: u32 = 2;
pub const CRS_CR_ERRIE_Pos: u32 = 2;
pub const CRS_CR_ERRIE_Msk: u32 = 4;
pub const CRS_CR_ERRIE: u32 = 4;
pub const CRS_CR_ESYNCIE_Pos: u32 = 3;
pub const CRS_CR_ESYNCIE_Msk: u32 = 8;
pub const CRS_CR_ESYNCIE: u32 = 8;
pub const CRS_CR_CEN_Pos: u32 = 5;
pub const CRS_CR_CEN_Msk: u32 = 32;
pub const CRS_CR_CEN: u32 = 32;
pub const CRS_CR_AUTOTRIMEN_Pos: u32 = 6;
pub const CRS_CR_AUTOTRIMEN_Msk: u32 = 64;
pub const CRS_CR_AUTOTRIMEN: u32 = 64;
pub const CRS_CR_SWSYNC_Pos: u32 = 7;
pub const CRS_CR_SWSYNC_Msk: u32 = 128;
pub const CRS_CR_SWSYNC: u32 = 128;
pub const CRS_CR_TRIM_Pos: u32 = 8;
pub const CRS_CR_TRIM_Msk: u32 = 16128;
pub const CRS_CR_TRIM: u32 = 16128;
pub const CRS_CFGR_RELOAD_Pos: u32 = 0;
pub const CRS_CFGR_RELOAD_Msk: u32 = 65535;
pub const CRS_CFGR_RELOAD: u32 = 65535;
pub const CRS_CFGR_FELIM_Pos: u32 = 16;
pub const CRS_CFGR_FELIM_Msk: u32 = 16711680;
pub const CRS_CFGR_FELIM: u32 = 16711680;
pub const CRS_CFGR_SYNCDIV_Pos: u32 = 24;
pub const CRS_CFGR_SYNCDIV_Msk: u32 = 117440512;
pub const CRS_CFGR_SYNCDIV: u32 = 117440512;
pub const CRS_CFGR_SYNCDIV_0: u32 = 16777216;
pub const CRS_CFGR_SYNCDIV_1: u32 = 33554432;
pub const CRS_CFGR_SYNCDIV_2: u32 = 67108864;
pub const CRS_CFGR_SYNCSRC_Pos: u32 = 28;
pub const CRS_CFGR_SYNCSRC_Msk: u32 = 805306368;
pub const CRS_CFGR_SYNCSRC: u32 = 805306368;
pub const CRS_CFGR_SYNCSRC_0: u32 = 268435456;
pub const CRS_CFGR_SYNCSRC_1: u32 = 536870912;
pub const CRS_CFGR_SYNCPOL_Pos: u32 = 31;
pub const CRS_CFGR_SYNCPOL_Msk: u32 = 2147483648;
pub const CRS_CFGR_SYNCPOL: u32 = 2147483648;
pub const CRS_ISR_SYNCOKF_Pos: u32 = 0;
pub const CRS_ISR_SYNCOKF_Msk: u32 = 1;
pub const CRS_ISR_SYNCOKF: u32 = 1;
pub const CRS_ISR_SYNCWARNF_Pos: u32 = 1;
pub const CRS_ISR_SYNCWARNF_Msk: u32 = 2;
pub const CRS_ISR_SYNCWARNF: u32 = 2;
pub const CRS_ISR_ERRF_Pos: u32 = 2;
pub const CRS_ISR_ERRF_Msk: u32 = 4;
pub const CRS_ISR_ERRF: u32 = 4;
pub const CRS_ISR_ESYNCF_Pos: u32 = 3;
pub const CRS_ISR_ESYNCF_Msk: u32 = 8;
pub const CRS_ISR_ESYNCF: u32 = 8;
pub const CRS_ISR_SYNCERR_Pos: u32 = 8;
pub const CRS_ISR_SYNCERR_Msk: u32 = 256;
pub const CRS_ISR_SYNCERR: u32 = 256;
pub const CRS_ISR_SYNCMISS_Pos: u32 = 9;
pub const CRS_ISR_SYNCMISS_Msk: u32 = 512;
pub const CRS_ISR_SYNCMISS: u32 = 512;
pub const CRS_ISR_TRIMOVF_Pos: u32 = 10;
pub const CRS_ISR_TRIMOVF_Msk: u32 = 1024;
pub const CRS_ISR_TRIMOVF: u32 = 1024;
pub const CRS_ISR_FEDIR_Pos: u32 = 15;
pub const CRS_ISR_FEDIR_Msk: u32 = 32768;
pub const CRS_ISR_FEDIR: u32 = 32768;
pub const CRS_ISR_FECAP_Pos: u32 = 16;
pub const CRS_ISR_FECAP_Msk: u32 = 4294901760;
pub const CRS_ISR_FECAP: u32 = 4294901760;
pub const CRS_ICR_SYNCOKC_Pos: u32 = 0;
pub const CRS_ICR_SYNCOKC_Msk: u32 = 1;
pub const CRS_ICR_SYNCOKC: u32 = 1;
pub const CRS_ICR_SYNCWARNC_Pos: u32 = 1;
pub const CRS_ICR_SYNCWARNC_Msk: u32 = 2;
pub const CRS_ICR_SYNCWARNC: u32 = 2;
pub const CRS_ICR_ERRC_Pos: u32 = 2;
pub const CRS_ICR_ERRC_Msk: u32 = 4;
pub const CRS_ICR_ERRC: u32 = 4;
pub const CRS_ICR_ESYNCC_Pos: u32 = 3;
pub const CRS_ICR_ESYNCC_Msk: u32 = 8;
pub const CRS_ICR_ESYNCC: u32 = 8;
pub const DAC_CR_EN1_Pos: u32 = 0;
pub const DAC_CR_EN1_Msk: u32 = 1;
pub const DAC_CR_EN1: u32 = 1;
pub const DAC_CR_BOFF1_Pos: u32 = 1;
pub const DAC_CR_BOFF1_Msk: u32 = 2;
pub const DAC_CR_BOFF1: u32 = 2;
pub const DAC_CR_TEN1_Pos: u32 = 2;
pub const DAC_CR_TEN1_Msk: u32 = 4;
pub const DAC_CR_TEN1: u32 = 4;
pub const DAC_CR_TSEL1_Pos: u32 = 3;
pub const DAC_CR_TSEL1_Msk: u32 = 56;
pub const DAC_CR_TSEL1: u32 = 56;
pub const DAC_CR_TSEL1_0: u32 = 8;
pub const DAC_CR_TSEL1_1: u32 = 16;
pub const DAC_CR_TSEL1_2: u32 = 32;
pub const DAC_CR_WAVE1_Pos: u32 = 6;
pub const DAC_CR_WAVE1_Msk: u32 = 192;
pub const DAC_CR_WAVE1: u32 = 192;
pub const DAC_CR_WAVE1_0: u32 = 64;
pub const DAC_CR_WAVE1_1: u32 = 128;
pub const DAC_CR_MAMP1_Pos: u32 = 8;
pub const DAC_CR_MAMP1_Msk: u32 = 3840;
pub const DAC_CR_MAMP1: u32 = 3840;
pub const DAC_CR_MAMP1_0: u32 = 256;
pub const DAC_CR_MAMP1_1: u32 = 512;
pub const DAC_CR_MAMP1_2: u32 = 1024;
pub const DAC_CR_MAMP1_3: u32 = 2048;
pub const DAC_CR_DMAEN1_Pos: u32 = 12;
pub const DAC_CR_DMAEN1_Msk: u32 = 4096;
pub const DAC_CR_DMAEN1: u32 = 4096;
pub const DAC_CR_DMAUDRIE1_Pos: u32 = 13;
pub const DAC_CR_DMAUDRIE1_Msk: u32 = 8192;
pub const DAC_CR_DMAUDRIE1: u32 = 8192;
pub const DAC_CR_EN2_Pos: u32 = 16;
pub const DAC_CR_EN2_Msk: u32 = 65536;
pub const DAC_CR_EN2: u32 = 65536;
pub const DAC_CR_BOFF2_Pos: u32 = 17;
pub const DAC_CR_BOFF2_Msk: u32 = 131072;
pub const DAC_CR_BOFF2: u32 = 131072;
pub const DAC_CR_TEN2_Pos: u32 = 18;
pub const DAC_CR_TEN2_Msk: u32 = 262144;
pub const DAC_CR_TEN2: u32 = 262144;
pub const DAC_CR_TSEL2_Pos: u32 = 19;
pub const DAC_CR_TSEL2_Msk: u32 = 3670016;
pub const DAC_CR_TSEL2: u32 = 3670016;
pub const DAC_CR_TSEL2_0: u32 = 524288;
pub const DAC_CR_TSEL2_1: u32 = 1048576;
pub const DAC_CR_TSEL2_2: u32 = 2097152;
pub const DAC_CR_WAVE2_Pos: u32 = 22;
pub const DAC_CR_WAVE2_Msk: u32 = 12582912;
pub const DAC_CR_WAVE2: u32 = 12582912;
pub const DAC_CR_WAVE2_0: u32 = 4194304;
pub const DAC_CR_WAVE2_1: u32 = 8388608;
pub const DAC_CR_MAMP2_Pos: u32 = 24;
pub const DAC_CR_MAMP2_Msk: u32 = 251658240;
pub const DAC_CR_MAMP2: u32 = 251658240;
pub const DAC_CR_MAMP2_0: u32 = 16777216;
pub const DAC_CR_MAMP2_1: u32 = 33554432;
pub const DAC_CR_MAMP2_2: u32 = 67108864;
pub const DAC_CR_MAMP2_3: u32 = 134217728;
pub const DAC_CR_DMAEN2_Pos: u32 = 28;
pub const DAC_CR_DMAEN2_Msk: u32 = 268435456;
pub const DAC_CR_DMAEN2: u32 = 268435456;
pub const DAC_CR_DMAUDRIE2_Pos: u32 = 29;
pub const DAC_CR_DMAUDRIE2_Msk: u32 = 536870912;
pub const DAC_CR_DMAUDRIE2: u32 = 536870912;
pub const DAC_SWTRIGR_SWTRIG1_Pos: u32 = 0;
pub const DAC_SWTRIGR_SWTRIG1_Msk: u32 = 1;
pub const DAC_SWTRIGR_SWTRIG1: u32 = 1;
pub const DAC_SWTRIGR_SWTRIG2_Pos: u32 = 1;
pub const DAC_SWTRIGR_SWTRIG2_Msk: u32 = 2;
pub const DAC_SWTRIGR_SWTRIG2: u32 = 2;
pub const DAC_DHR12R1_DACC1DHR_Pos: u32 = 0;
pub const DAC_DHR12R1_DACC1DHR_Msk: u32 = 4095;
pub const DAC_DHR12R1_DACC1DHR: u32 = 4095;
pub const DAC_DHR12L1_DACC1DHR_Pos: u32 = 4;
pub const DAC_DHR12L1_DACC1DHR_Msk: u32 = 65520;
pub const DAC_DHR12L1_DACC1DHR: u32 = 65520;
pub const DAC_DHR8R1_DACC1DHR_Pos: u32 = 0;
pub const DAC_DHR8R1_DACC1DHR_Msk: u32 = 255;
pub const DAC_DHR8R1_DACC1DHR: u32 = 255;
pub const DAC_DHR12R2_DACC2DHR_Pos: u32 = 0;
pub const DAC_DHR12R2_DACC2DHR_Msk: u32 = 4095;
pub const DAC_DHR12R2_DACC2DHR: u32 = 4095;
pub const DAC_DHR12L2_DACC2DHR_Pos: u32 = 4;
pub const DAC_DHR12L2_DACC2DHR_Msk: u32 = 65520;
pub const DAC_DHR12L2_DACC2DHR: u32 = 65520;
pub const DAC_DHR8R2_DACC2DHR_Pos: u32 = 0;
pub const DAC_DHR8R2_DACC2DHR_Msk: u32 = 255;
pub const DAC_DHR8R2_DACC2DHR: u32 = 255;
pub const DAC_DHR12RD_DACC1DHR_Pos: u32 = 0;
pub const DAC_DHR12RD_DACC1DHR_Msk: u32 = 4095;
pub const DAC_DHR12RD_DACC1DHR: u32 = 4095;
pub const DAC_DHR12RD_DACC2DHR_Pos: u32 = 16;
pub const DAC_DHR12RD_DACC2DHR_Msk: u32 = 268369920;
pub const DAC_DHR12RD_DACC2DHR: u32 = 268369920;
pub const DAC_DHR12LD_DACC1DHR_Pos: u32 = 4;
pub const DAC_DHR12LD_DACC1DHR_Msk: u32 = 65520;
pub const DAC_DHR12LD_DACC1DHR: u32 = 65520;
pub const DAC_DHR12LD_DACC2DHR_Pos: u32 = 20;
pub const DAC_DHR12LD_DACC2DHR_Msk: u32 = 4293918720;
pub const DAC_DHR12LD_DACC2DHR: u32 = 4293918720;
pub const DAC_DHR8RD_DACC1DHR_Pos: u32 = 0;
pub const DAC_DHR8RD_DACC1DHR_Msk: u32 = 255;
pub const DAC_DHR8RD_DACC1DHR: u32 = 255;
pub const DAC_DHR8RD_DACC2DHR_Pos: u32 = 8;
pub const DAC_DHR8RD_DACC2DHR_Msk: u32 = 65280;
pub const DAC_DHR8RD_DACC2DHR: u32 = 65280;
pub const DAC_DOR1_DACC1DOR_Pos: u32 = 0;
pub const DAC_DOR1_DACC1DOR_Msk: u32 = 4095;
pub const DAC_DOR1_DACC1DOR: u32 = 4095;
pub const DAC_DOR2_DACC2DOR_Pos: u32 = 0;
pub const DAC_DOR2_DACC2DOR_Msk: u32 = 4095;
pub const DAC_DOR2_DACC2DOR: u32 = 4095;
pub const DAC_SR_DMAUDR1_Pos: u32 = 13;
pub const DAC_SR_DMAUDR1_Msk: u32 = 8192;
pub const DAC_SR_DMAUDR1: u32 = 8192;
pub const DAC_SR_DMAUDR2_Pos: u32 = 29;
pub const DAC_SR_DMAUDR2_Msk: u32 = 536870912;
pub const DAC_SR_DMAUDR2: u32 = 536870912;
pub const DBGMCU_IDCODE_DEV_ID_Pos: u32 = 0;
pub const DBGMCU_IDCODE_DEV_ID_Msk: u32 = 4095;
pub const DBGMCU_IDCODE_DEV_ID: u32 = 4095;
pub const DBGMCU_IDCODE_DIV_ID_Pos: u32 = 12;
pub const DBGMCU_IDCODE_DIV_ID_Msk: u32 = 61440;
pub const DBGMCU_IDCODE_DIV_ID: u32 = 61440;
pub const DBGMCU_IDCODE_MCD_DIV_ID_Pos: u32 = 13;
pub const DBGMCU_IDCODE_MCD_DIV_ID_Msk: u32 = 24576;
pub const DBGMCU_IDCODE_MCD_DIV_ID: u32 = 24576;
pub const DBGMCU_IDCODE_REV_ID_Pos: u32 = 16;
pub const DBGMCU_IDCODE_REV_ID_Msk: u32 = 4294901760;
pub const DBGMCU_IDCODE_REV_ID: u32 = 4294901760;
pub const DBGMCU_IDCODE_REV_ID_0: u32 = 65536;
pub const DBGMCU_IDCODE_REV_ID_1: u32 = 131072;
pub const DBGMCU_IDCODE_REV_ID_2: u32 = 262144;
pub const DBGMCU_IDCODE_REV_ID_3: u32 = 524288;
pub const DBGMCU_IDCODE_REV_ID_4: u32 = 1048576;
pub const DBGMCU_IDCODE_REV_ID_5: u32 = 2097152;
pub const DBGMCU_IDCODE_REV_ID_6: u32 = 4194304;
pub const DBGMCU_IDCODE_REV_ID_7: u32 = 8388608;
pub const DBGMCU_IDCODE_REV_ID_8: u32 = 16777216;
pub const DBGMCU_IDCODE_REV_ID_9: u32 = 33554432;
pub const DBGMCU_IDCODE_REV_ID_10: u32 = 67108864;
pub const DBGMCU_IDCODE_REV_ID_11: u32 = 134217728;
pub const DBGMCU_IDCODE_REV_ID_12: u32 = 268435456;
pub const DBGMCU_IDCODE_REV_ID_13: u32 = 536870912;
pub const DBGMCU_IDCODE_REV_ID_14: u32 = 1073741824;
pub const DBGMCU_IDCODE_REV_ID_15: u32 = 2147483648;
pub const DBGMCU_CR_DBG_Pos: u32 = 0;
pub const DBGMCU_CR_DBG_Msk: u32 = 7;
pub const DBGMCU_CR_DBG: u32 = 7;
pub const DBGMCU_CR_DBG_SLEEP_Pos: u32 = 0;
pub const DBGMCU_CR_DBG_SLEEP_Msk: u32 = 1;
pub const DBGMCU_CR_DBG_SLEEP: u32 = 1;
pub const DBGMCU_CR_DBG_STOP_Pos: u32 = 1;
pub const DBGMCU_CR_DBG_STOP_Msk: u32 = 2;
pub const DBGMCU_CR_DBG_STOP: u32 = 2;
pub const DBGMCU_CR_DBG_STANDBY_Pos: u32 = 2;
pub const DBGMCU_CR_DBG_STANDBY_Msk: u32 = 4;
pub const DBGMCU_CR_DBG_STANDBY: u32 = 4;
pub const DBGMCU_APB1_FZ_DBG_TIM2_STOP_Pos: u32 = 0;
pub const DBGMCU_APB1_FZ_DBG_TIM2_STOP_Msk: u32 = 1;
pub const DBGMCU_APB1_FZ_DBG_TIM2_STOP: u32 = 1;
pub const DBGMCU_APB1_FZ_DBG_TIM3_STOP_Pos: u32 = 1;
pub const DBGMCU_APB1_FZ_DBG_TIM3_STOP_Msk: u32 = 2;
pub const DBGMCU_APB1_FZ_DBG_TIM3_STOP: u32 = 2;
pub const DBGMCU_APB1_FZ_DBG_TIM6_STOP_Pos: u32 = 4;
pub const DBGMCU_APB1_FZ_DBG_TIM6_STOP_Msk: u32 = 16;
pub const DBGMCU_APB1_FZ_DBG_TIM6_STOP: u32 = 16;
pub const DBGMCU_APB1_FZ_DBG_TIM7_STOP_Pos: u32 = 5;
pub const DBGMCU_APB1_FZ_DBG_TIM7_STOP_Msk: u32 = 32;
pub const DBGMCU_APB1_FZ_DBG_TIM7_STOP: u32 = 32;
pub const DBGMCU_APB1_FZ_DBG_RTC_STOP_Pos: u32 = 10;
pub const DBGMCU_APB1_FZ_DBG_RTC_STOP_Msk: u32 = 1024;
pub const DBGMCU_APB1_FZ_DBG_RTC_STOP: u32 = 1024;
pub const DBGMCU_APB1_FZ_DBG_WWDG_STOP_Pos: u32 = 11;
pub const DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk: u32 = 2048;
pub const DBGMCU_APB1_FZ_DBG_WWDG_STOP: u32 = 2048;
pub const DBGMCU_APB1_FZ_DBG_IWDG_STOP_Pos: u32 = 12;
pub const DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk: u32 = 4096;
pub const DBGMCU_APB1_FZ_DBG_IWDG_STOP: u32 = 4096;
pub const DBGMCU_APB1_FZ_DBG_I2C1_STOP_Pos: u32 = 21;
pub const DBGMCU_APB1_FZ_DBG_I2C1_STOP_Msk: u32 = 2097152;
pub const DBGMCU_APB1_FZ_DBG_I2C1_STOP: u32 = 2097152;
pub const DBGMCU_APB1_FZ_DBG_I2C2_STOP_Pos: u32 = 22;
pub const DBGMCU_APB1_FZ_DBG_I2C2_STOP_Msk: u32 = 4194304;
pub const DBGMCU_APB1_FZ_DBG_I2C2_STOP: u32 = 4194304;
pub const DBGMCU_APB1_FZ_DBG_I2C3_STOP_Pos: u32 = 23;
pub const DBGMCU_APB1_FZ_DBG_I2C3_STOP_Msk: u32 = 8388608;
pub const DBGMCU_APB1_FZ_DBG_I2C3_STOP: u32 = 8388608;
pub const DBGMCU_APB1_FZ_DBG_LPTIMER_STOP_Pos: u32 = 31;
pub const DBGMCU_APB1_FZ_DBG_LPTIMER_STOP_Msk: u32 = 2147483648;
pub const DBGMCU_APB1_FZ_DBG_LPTIMER_STOP: u32 = 2147483648;
pub const DBGMCU_APB2_FZ_DBG_TIM22_STOP_Pos: u32 = 5;
pub const DBGMCU_APB2_FZ_DBG_TIM22_STOP_Msk: u32 = 32;
pub const DBGMCU_APB2_FZ_DBG_TIM22_STOP: u32 = 32;
pub const DBGMCU_APB2_FZ_DBG_TIM21_STOP_Pos: u32 = 2;
pub const DBGMCU_APB2_FZ_DBG_TIM21_STOP_Msk: u32 = 4;
pub const DBGMCU_APB2_FZ_DBG_TIM21_STOP: u32 = 4;
pub const DMA_ISR_GIF1_Pos: u32 = 0;
pub const DMA_ISR_GIF1_Msk: u32 = 1;
pub const DMA_ISR_GIF1: u32 = 1;
pub const DMA_ISR_TCIF1_Pos: u32 = 1;
pub const DMA_ISR_TCIF1_Msk: u32 = 2;
pub const DMA_ISR_TCIF1: u32 = 2;
pub const DMA_ISR_HTIF1_Pos: u32 = 2;
pub const DMA_ISR_HTIF1_Msk: u32 = 4;
pub const DMA_ISR_HTIF1: u32 = 4;
pub const DMA_ISR_TEIF1_Pos: u32 = 3;
pub const DMA_ISR_TEIF1_Msk: u32 = 8;
pub const DMA_ISR_TEIF1: u32 = 8;
pub const DMA_ISR_GIF2_Pos: u32 = 4;
pub const DMA_ISR_GIF2_Msk: u32 = 16;
pub const DMA_ISR_GIF2: u32 = 16;
pub const DMA_ISR_TCIF2_Pos: u32 = 5;
pub const DMA_ISR_TCIF2_Msk: u32 = 32;
pub const DMA_ISR_TCIF2: u32 = 32;
pub const DMA_ISR_HTIF2_Pos: u32 = 6;
pub const DMA_ISR_HTIF2_Msk: u32 = 64;
pub const DMA_ISR_HTIF2: u32 = 64;
pub const DMA_ISR_TEIF2_Pos: u32 = 7;
pub const DMA_ISR_TEIF2_Msk: u32 = 128;
pub const DMA_ISR_TEIF2: u32 = 128;
pub const DMA_ISR_GIF3_Pos: u32 = 8;
pub const DMA_ISR_GIF3_Msk: u32 = 256;
pub const DMA_ISR_GIF3: u32 = 256;
pub const DMA_ISR_TCIF3_Pos: u32 = 9;
pub const DMA_ISR_TCIF3_Msk: u32 = 512;
pub const DMA_ISR_TCIF3: u32 = 512;
pub const DMA_ISR_HTIF3_Pos: u32 = 10;
pub const DMA_ISR_HTIF3_Msk: u32 = 1024;
pub const DMA_ISR_HTIF3: u32 = 1024;
pub const DMA_ISR_TEIF3_Pos: u32 = 11;
pub const DMA_ISR_TEIF3_Msk: u32 = 2048;
pub const DMA_ISR_TEIF3: u32 = 2048;
pub const DMA_ISR_GIF4_Pos: u32 = 12;
pub const DMA_ISR_GIF4_Msk: u32 = 4096;
pub const DMA_ISR_GIF4: u32 = 4096;
pub const DMA_ISR_TCIF4_Pos: u32 = 13;
pub const DMA_ISR_TCIF4_Msk: u32 = 8192;
pub const DMA_ISR_TCIF4: u32 = 8192;
pub const DMA_ISR_HTIF4_Pos: u32 = 14;
pub const DMA_ISR_HTIF4_Msk: u32 = 16384;
pub const DMA_ISR_HTIF4: u32 = 16384;
pub const DMA_ISR_TEIF4_Pos: u32 = 15;
pub const DMA_ISR_TEIF4_Msk: u32 = 32768;
pub const DMA_ISR_TEIF4: u32 = 32768;
pub const DMA_ISR_GIF5_Pos: u32 = 16;
pub const DMA_ISR_GIF5_Msk: u32 = 65536;
pub const DMA_ISR_GIF5: u32 = 65536;
pub const DMA_ISR_TCIF5_Pos: u32 = 17;
pub const DMA_ISR_TCIF5_Msk: u32 = 131072;
pub const DMA_ISR_TCIF5: u32 = 131072;
pub const DMA_ISR_HTIF5_Pos: u32 = 18;
pub const DMA_ISR_HTIF5_Msk: u32 = 262144;
pub const DMA_ISR_HTIF5: u32 = 262144;
pub const DMA_ISR_TEIF5_Pos: u32 = 19;
pub const DMA_ISR_TEIF5_Msk: u32 = 524288;
pub const DMA_ISR_TEIF5: u32 = 524288;
pub const DMA_ISR_GIF6_Pos: u32 = 20;
pub const DMA_ISR_GIF6_Msk: u32 = 1048576;
pub const DMA_ISR_GIF6: u32 = 1048576;
pub const DMA_ISR_TCIF6_Pos: u32 = 21;
pub const DMA_ISR_TCIF6_Msk: u32 = 2097152;
pub const DMA_ISR_TCIF6: u32 = 2097152;
pub const DMA_ISR_HTIF6_Pos: u32 = 22;
pub const DMA_ISR_HTIF6_Msk: u32 = 4194304;
pub const DMA_ISR_HTIF6: u32 = 4194304;
pub const DMA_ISR_TEIF6_Pos: u32 = 23;
pub const DMA_ISR_TEIF6_Msk: u32 = 8388608;
pub const DMA_ISR_TEIF6: u32 = 8388608;
pub const DMA_ISR_GIF7_Pos: u32 = 24;
pub const DMA_ISR_GIF7_Msk: u32 = 16777216;
pub const DMA_ISR_GIF7: u32 = 16777216;
pub const DMA_ISR_TCIF7_Pos: u32 = 25;
pub const DMA_ISR_TCIF7_Msk: u32 = 33554432;
pub const DMA_ISR_TCIF7: u32 = 33554432;
pub const DMA_ISR_HTIF7_Pos: u32 = 26;
pub const DMA_ISR_HTIF7_Msk: u32 = 67108864;
pub const DMA_ISR_HTIF7: u32 = 67108864;
pub const DMA_ISR_TEIF7_Pos: u32 = 27;
pub const DMA_ISR_TEIF7_Msk: u32 = 134217728;
pub const DMA_ISR_TEIF7: u32 = 134217728;
pub const DMA_IFCR_CGIF1_Pos: u32 = 0;
pub const DMA_IFCR_CGIF1_Msk: u32 = 1;
pub const DMA_IFCR_CGIF1: u32 = 1;
pub const DMA_IFCR_CTCIF1_Pos: u32 = 1;
pub const DMA_IFCR_CTCIF1_Msk: u32 = 2;
pub const DMA_IFCR_CTCIF1: u32 = 2;
pub const DMA_IFCR_CHTIF1_Pos: u32 = 2;
pub const DMA_IFCR_CHTIF1_Msk: u32 = 4;
pub const DMA_IFCR_CHTIF1: u32 = 4;
pub const DMA_IFCR_CTEIF1_Pos: u32 = 3;
pub const DMA_IFCR_CTEIF1_Msk: u32 = 8;
pub const DMA_IFCR_CTEIF1: u32 = 8;
pub const DMA_IFCR_CGIF2_Pos: u32 = 4;
pub const DMA_IFCR_CGIF2_Msk: u32 = 16;
pub const DMA_IFCR_CGIF2: u32 = 16;
pub const DMA_IFCR_CTCIF2_Pos: u32 = 5;
pub const DMA_IFCR_CTCIF2_Msk: u32 = 32;
pub const DMA_IFCR_CTCIF2: u32 = 32;
pub const DMA_IFCR_CHTIF2_Pos: u32 = 6;
pub const DMA_IFCR_CHTIF2_Msk: u32 = 64;
pub const DMA_IFCR_CHTIF2: u32 = 64;
pub const DMA_IFCR_CTEIF2_Pos: u32 = 7;
pub const DMA_IFCR_CTEIF2_Msk: u32 = 128;
pub const DMA_IFCR_CTEIF2: u32 = 128;
pub const DMA_IFCR_CGIF3_Pos: u32 = 8;
pub const DMA_IFCR_CGIF3_Msk: u32 = 256;
pub const DMA_IFCR_CGIF3: u32 = 256;
pub const DMA_IFCR_CTCIF3_Pos: u32 = 9;
pub const DMA_IFCR_CTCIF3_Msk: u32 = 512;
pub const DMA_IFCR_CTCIF3: u32 = 512;
pub const DMA_IFCR_CHTIF3_Pos: u32 = 10;
pub const DMA_IFCR_CHTIF3_Msk: u32 = 1024;
pub const DMA_IFCR_CHTIF3: u32 = 1024;
pub const DMA_IFCR_CTEIF3_Pos: u32 = 11;
pub const DMA_IFCR_CTEIF3_Msk: u32 = 2048;
pub const DMA_IFCR_CTEIF3: u32 = 2048;
pub const DMA_IFCR_CGIF4_Pos: u32 = 12;
pub const DMA_IFCR_CGIF4_Msk: u32 = 4096;
pub const DMA_IFCR_CGIF4: u32 = 4096;
pub const DMA_IFCR_CTCIF4_Pos: u32 = 13;
pub const DMA_IFCR_CTCIF4_Msk: u32 = 8192;
pub const DMA_IFCR_CTCIF4: u32 = 8192;
pub const DMA_IFCR_CHTIF4_Pos: u32 = 14;
pub const DMA_IFCR_CHTIF4_Msk: u32 = 16384;
pub const DMA_IFCR_CHTIF4: u32 = 16384;
pub const DMA_IFCR_CTEIF4_Pos: u32 = 15;
pub const DMA_IFCR_CTEIF4_Msk: u32 = 32768;
pub const DMA_IFCR_CTEIF4: u32 = 32768;
pub const DMA_IFCR_CGIF5_Pos: u32 = 16;
pub const DMA_IFCR_CGIF5_Msk: u32 = 65536;
pub const DMA_IFCR_CGIF5: u32 = 65536;
pub const DMA_IFCR_CTCIF5_Pos: u32 = 17;
pub const DMA_IFCR_CTCIF5_Msk: u32 = 131072;
pub const DMA_IFCR_CTCIF5: u32 = 131072;
pub const DMA_IFCR_CHTIF5_Pos: u32 = 18;
pub const DMA_IFCR_CHTIF5_Msk: u32 = 262144;
pub const DMA_IFCR_CHTIF5: u32 = 262144;
pub const DMA_IFCR_CTEIF5_Pos: u32 = 19;
pub const DMA_IFCR_CTEIF5_Msk: u32 = 524288;
pub const DMA_IFCR_CTEIF5: u32 = 524288;
pub const DMA_IFCR_CGIF6_Pos: u32 = 20;
pub const DMA_IFCR_CGIF6_Msk: u32 = 1048576;
pub const DMA_IFCR_CGIF6: u32 = 1048576;
pub const DMA_IFCR_CTCIF6_Pos: u32 = 21;
pub const DMA_IFCR_CTCIF6_Msk: u32 = 2097152;
pub const DMA_IFCR_CTCIF6: u32 = 2097152;
pub const DMA_IFCR_CHTIF6_Pos: u32 = 22;
pub const DMA_IFCR_CHTIF6_Msk: u32 = 4194304;
pub const DMA_IFCR_CHTIF6: u32 = 4194304;
pub const DMA_IFCR_CTEIF6_Pos: u32 = 23;
pub const DMA_IFCR_CTEIF6_Msk: u32 = 8388608;
pub const DMA_IFCR_CTEIF6: u32 = 8388608;
pub const DMA_IFCR_CGIF7_Pos: u32 = 24;
pub const DMA_IFCR_CGIF7_Msk: u32 = 16777216;
pub const DMA_IFCR_CGIF7: u32 = 16777216;
pub const DMA_IFCR_CTCIF7_Pos: u32 = 25;
pub const DMA_IFCR_CTCIF7_Msk: u32 = 33554432;
pub const DMA_IFCR_CTCIF7: u32 = 33554432;
pub const DMA_IFCR_CHTIF7_Pos: u32 = 26;
pub const DMA_IFCR_CHTIF7_Msk: u32 = 67108864;
pub const DMA_IFCR_CHTIF7: u32 = 67108864;
pub const DMA_IFCR_CTEIF7_Pos: u32 = 27;
pub const DMA_IFCR_CTEIF7_Msk: u32 = 134217728;
pub const DMA_IFCR_CTEIF7: u32 = 134217728;
pub const DMA_CCR_EN_Pos: u32 = 0;
pub const DMA_CCR_EN_Msk: u32 = 1;
pub const DMA_CCR_EN: u32 = 1;
pub const DMA_CCR_TCIE_Pos: u32 = 1;
pub const DMA_CCR_TCIE_Msk: u32 = 2;
pub const DMA_CCR_TCIE: u32 = 2;
pub const DMA_CCR_HTIE_Pos: u32 = 2;
pub const DMA_CCR_HTIE_Msk: u32 = 4;
pub const DMA_CCR_HTIE: u32 = 4;
pub const DMA_CCR_TEIE_Pos: u32 = 3;
pub const DMA_CCR_TEIE_Msk: u32 = 8;
pub const DMA_CCR_TEIE: u32 = 8;
pub const DMA_CCR_DIR_Pos: u32 = 4;
pub const DMA_CCR_DIR_Msk: u32 = 16;
pub const DMA_CCR_DIR: u32 = 16;
pub const DMA_CCR_CIRC_Pos: u32 = 5;
pub const DMA_CCR_CIRC_Msk: u32 = 32;
pub const DMA_CCR_CIRC: u32 = 32;
pub const DMA_CCR_PINC_Pos: u32 = 6;
pub const DMA_CCR_PINC_Msk: u32 = 64;
pub const DMA_CCR_PINC: u32 = 64;
pub const DMA_CCR_MINC_Pos: u32 = 7;
pub const DMA_CCR_MINC_Msk: u32 = 128;
pub const DMA_CCR_MINC: u32 = 128;
pub const DMA_CCR_PSIZE_Pos: u32 = 8;
pub const DMA_CCR_PSIZE_Msk: u32 = 768;
pub const DMA_CCR_PSIZE: u32 = 768;
pub const DMA_CCR_PSIZE_0: u32 = 256;
pub const DMA_CCR_PSIZE_1: u32 = 512;
pub const DMA_CCR_MSIZE_Pos: u32 = 10;
pub const DMA_CCR_MSIZE_Msk: u32 = 3072;
pub const DMA_CCR_MSIZE: u32 = 3072;
pub const DMA_CCR_MSIZE_0: u32 = 1024;
pub const DMA_CCR_MSIZE_1: u32 = 2048;
pub const DMA_CCR_PL_Pos: u32 = 12;
pub const DMA_CCR_PL_Msk: u32 = 12288;
pub const DMA_CCR_PL: u32 = 12288;
pub const DMA_CCR_PL_0: u32 = 4096;
pub const DMA_CCR_PL_1: u32 = 8192;
pub const DMA_CCR_MEM2MEM_Pos: u32 = 14;
pub const DMA_CCR_MEM2MEM_Msk: u32 = 16384;
pub const DMA_CCR_MEM2MEM: u32 = 16384;
pub const DMA_CNDTR_NDT_Pos: u32 = 0;
pub const DMA_CNDTR_NDT_Msk: u32 = 65535;
pub const DMA_CNDTR_NDT: u32 = 65535;
pub const DMA_CPAR_PA_Pos: u32 = 0;
pub const DMA_CPAR_PA_Msk: u32 = 4294967295;
pub const DMA_CPAR_PA: u32 = 4294967295;
pub const DMA_CMAR_MA_Pos: u32 = 0;
pub const DMA_CMAR_MA_Msk: u32 = 4294967295;
pub const DMA_CMAR_MA: u32 = 4294967295;
pub const DMA_CSELR_C1S_Pos: u32 = 0;
pub const DMA_CSELR_C1S_Msk: u32 = 15;
pub const DMA_CSELR_C1S: u32 = 15;
pub const DMA_CSELR_C2S_Pos: u32 = 4;
pub const DMA_CSELR_C2S_Msk: u32 = 240;
pub const DMA_CSELR_C2S: u32 = 240;
pub const DMA_CSELR_C3S_Pos: u32 = 8;
pub const DMA_CSELR_C3S_Msk: u32 = 3840;
pub const DMA_CSELR_C3S: u32 = 3840;
pub const DMA_CSELR_C4S_Pos: u32 = 12;
pub const DMA_CSELR_C4S_Msk: u32 = 61440;
pub const DMA_CSELR_C4S: u32 = 61440;
pub const DMA_CSELR_C5S_Pos: u32 = 16;
pub const DMA_CSELR_C5S_Msk: u32 = 983040;
pub const DMA_CSELR_C5S: u32 = 983040;
pub const DMA_CSELR_C6S_Pos: u32 = 20;
pub const DMA_CSELR_C6S_Msk: u32 = 15728640;
pub const DMA_CSELR_C6S: u32 = 15728640;
pub const DMA_CSELR_C7S_Pos: u32 = 24;
pub const DMA_CSELR_C7S_Msk: u32 = 251658240;
pub const DMA_CSELR_C7S: u32 = 251658240;
pub const EXTI_IMR_IM0_Pos: u32 = 0;
pub const EXTI_IMR_IM0_Msk: u32 = 1;
pub const EXTI_IMR_IM0: u32 = 1;
pub const EXTI_IMR_IM1_Pos: u32 = 1;
pub const EXTI_IMR_IM1_Msk: u32 = 2;
pub const EXTI_IMR_IM1: u32 = 2;
pub const EXTI_IMR_IM2_Pos: u32 = 2;
pub const EXTI_IMR_IM2_Msk: u32 = 4;
pub const EXTI_IMR_IM2: u32 = 4;
pub const EXTI_IMR_IM3_Pos: u32 = 3;
pub const EXTI_IMR_IM3_Msk: u32 = 8;
pub const EXTI_IMR_IM3: u32 = 8;
pub const EXTI_IMR_IM4_Pos: u32 = 4;
pub const EXTI_IMR_IM4_Msk: u32 = 16;
pub const EXTI_IMR_IM4: u32 = 16;
pub const EXTI_IMR_IM5_Pos: u32 = 5;
pub const EXTI_IMR_IM5_Msk: u32 = 32;
pub const EXTI_IMR_IM5: u32 = 32;
pub const EXTI_IMR_IM6_Pos: u32 = 6;
pub const EXTI_IMR_IM6_Msk: u32 = 64;
pub const EXTI_IMR_IM6: u32 = 64;
pub const EXTI_IMR_IM7_Pos: u32 = 7;
pub const EXTI_IMR_IM7_Msk: u32 = 128;
pub const EXTI_IMR_IM7: u32 = 128;
pub const EXTI_IMR_IM8_Pos: u32 = 8;
pub const EXTI_IMR_IM8_Msk: u32 = 256;
pub const EXTI_IMR_IM8: u32 = 256;
pub const EXTI_IMR_IM9_Pos: u32 = 9;
pub const EXTI_IMR_IM9_Msk: u32 = 512;
pub const EXTI_IMR_IM9: u32 = 512;
pub const EXTI_IMR_IM10_Pos: u32 = 10;
pub const EXTI_IMR_IM10_Msk: u32 = 1024;
pub const EXTI_IMR_IM10: u32 = 1024;
pub const EXTI_IMR_IM11_Pos: u32 = 11;
pub const EXTI_IMR_IM11_Msk: u32 = 2048;
pub const EXTI_IMR_IM11: u32 = 2048;
pub const EXTI_IMR_IM12_Pos: u32 = 12;
pub const EXTI_IMR_IM12_Msk: u32 = 4096;
pub const EXTI_IMR_IM12: u32 = 4096;
pub const EXTI_IMR_IM13_Pos: u32 = 13;
pub const EXTI_IMR_IM13_Msk: u32 = 8192;
pub const EXTI_IMR_IM13: u32 = 8192;
pub const EXTI_IMR_IM14_Pos: u32 = 14;
pub const EXTI_IMR_IM14_Msk: u32 = 16384;
pub const EXTI_IMR_IM14: u32 = 16384;
pub const EXTI_IMR_IM15_Pos: u32 = 15;
pub const EXTI_IMR_IM15_Msk: u32 = 32768;
pub const EXTI_IMR_IM15: u32 = 32768;
pub const EXTI_IMR_IM16_Pos: u32 = 16;
pub const EXTI_IMR_IM16_Msk: u32 = 65536;
pub const EXTI_IMR_IM16: u32 = 65536;
pub const EXTI_IMR_IM17_Pos: u32 = 17;
pub const EXTI_IMR_IM17_Msk: u32 = 131072;
pub const EXTI_IMR_IM17: u32 = 131072;
pub const EXTI_IMR_IM18_Pos: u32 = 18;
pub const EXTI_IMR_IM18_Msk: u32 = 262144;
pub const EXTI_IMR_IM18: u32 = 262144;
pub const EXTI_IMR_IM19_Pos: u32 = 19;
pub const EXTI_IMR_IM19_Msk: u32 = 524288;
pub const EXTI_IMR_IM19: u32 = 524288;
pub const EXTI_IMR_IM20_Pos: u32 = 20;
pub const EXTI_IMR_IM20_Msk: u32 = 1048576;
pub const EXTI_IMR_IM20: u32 = 1048576;
pub const EXTI_IMR_IM21_Pos: u32 = 21;
pub const EXTI_IMR_IM21_Msk: u32 = 2097152;
pub const EXTI_IMR_IM21: u32 = 2097152;
pub const EXTI_IMR_IM22_Pos: u32 = 22;
pub const EXTI_IMR_IM22_Msk: u32 = 4194304;
pub const EXTI_IMR_IM22: u32 = 4194304;
pub const EXTI_IMR_IM23_Pos: u32 = 23;
pub const EXTI_IMR_IM23_Msk: u32 = 8388608;
pub const EXTI_IMR_IM23: u32 = 8388608;
pub const EXTI_IMR_IM24_Pos: u32 = 24;
pub const EXTI_IMR_IM24_Msk: u32 = 16777216;
pub const EXTI_IMR_IM24: u32 = 16777216;
pub const EXTI_IMR_IM25_Pos: u32 = 25;
pub const EXTI_IMR_IM25_Msk: u32 = 33554432;
pub const EXTI_IMR_IM25: u32 = 33554432;
pub const EXTI_IMR_IM26_Pos: u32 = 26;
pub const EXTI_IMR_IM26_Msk: u32 = 67108864;
pub const EXTI_IMR_IM26: u32 = 67108864;
pub const EXTI_IMR_IM28_Pos: u32 = 28;
pub const EXTI_IMR_IM28_Msk: u32 = 268435456;
pub const EXTI_IMR_IM28: u32 = 268435456;
pub const EXTI_IMR_IM29_Pos: u32 = 29;
pub const EXTI_IMR_IM29_Msk: u32 = 536870912;
pub const EXTI_IMR_IM29: u32 = 536870912;
pub const EXTI_IMR_IM_Pos: u32 = 0;
pub const EXTI_IMR_IM_Msk: u32 = 939524095;
pub const EXTI_IMR_IM: u32 = 939524095;
pub const EXTI_EMR_EM0_Pos: u32 = 0;
pub const EXTI_EMR_EM0_Msk: u32 = 1;
pub const EXTI_EMR_EM0: u32 = 1;
pub const EXTI_EMR_EM1_Pos: u32 = 1;
pub const EXTI_EMR_EM1_Msk: u32 = 2;
pub const EXTI_EMR_EM1: u32 = 2;
pub const EXTI_EMR_EM2_Pos: u32 = 2;
pub const EXTI_EMR_EM2_Msk: u32 = 4;
pub const EXTI_EMR_EM2: u32 = 4;
pub const EXTI_EMR_EM3_Pos: u32 = 3;
pub const EXTI_EMR_EM3_Msk: u32 = 8;
pub const EXTI_EMR_EM3: u32 = 8;
pub const EXTI_EMR_EM4_Pos: u32 = 4;
pub const EXTI_EMR_EM4_Msk: u32 = 16;
pub const EXTI_EMR_EM4: u32 = 16;
pub const EXTI_EMR_EM5_Pos: u32 = 5;
pub const EXTI_EMR_EM5_Msk: u32 = 32;
pub const EXTI_EMR_EM5: u32 = 32;
pub const EXTI_EMR_EM6_Pos: u32 = 6;
pub const EXTI_EMR_EM6_Msk: u32 = 64;
pub const EXTI_EMR_EM6: u32 = 64;
pub const EXTI_EMR_EM7_Pos: u32 = 7;
pub const EXTI_EMR_EM7_Msk: u32 = 128;
pub const EXTI_EMR_EM7: u32 = 128;
pub const EXTI_EMR_EM8_Pos: u32 = 8;
pub const EXTI_EMR_EM8_Msk: u32 = 256;
pub const EXTI_EMR_EM8: u32 = 256;
pub const EXTI_EMR_EM9_Pos: u32 = 9;
pub const EXTI_EMR_EM9_Msk: u32 = 512;
pub const EXTI_EMR_EM9: u32 = 512;
pub const EXTI_EMR_EM10_Pos: u32 = 10;
pub const EXTI_EMR_EM10_Msk: u32 = 1024;
pub const EXTI_EMR_EM10: u32 = 1024;
pub const EXTI_EMR_EM11_Pos: u32 = 11;
pub const EXTI_EMR_EM11_Msk: u32 = 2048;
pub const EXTI_EMR_EM11: u32 = 2048;
pub const EXTI_EMR_EM12_Pos: u32 = 12;
pub const EXTI_EMR_EM12_Msk: u32 = 4096;
pub const EXTI_EMR_EM12: u32 = 4096;
pub const EXTI_EMR_EM13_Pos: u32 = 13;
pub const EXTI_EMR_EM13_Msk: u32 = 8192;
pub const EXTI_EMR_EM13: u32 = 8192;
pub const EXTI_EMR_EM14_Pos: u32 = 14;
pub const EXTI_EMR_EM14_Msk: u32 = 16384;
pub const EXTI_EMR_EM14: u32 = 16384;
pub const EXTI_EMR_EM15_Pos: u32 = 15;
pub const EXTI_EMR_EM15_Msk: u32 = 32768;
pub const EXTI_EMR_EM15: u32 = 32768;
pub const EXTI_EMR_EM16_Pos: u32 = 16;
pub const EXTI_EMR_EM16_Msk: u32 = 65536;
pub const EXTI_EMR_EM16: u32 = 65536;
pub const EXTI_EMR_EM17_Pos: u32 = 17;
pub const EXTI_EMR_EM17_Msk: u32 = 131072;
pub const EXTI_EMR_EM17: u32 = 131072;
pub const EXTI_EMR_EM18_Pos: u32 = 18;
pub const EXTI_EMR_EM18_Msk: u32 = 262144;
pub const EXTI_EMR_EM18: u32 = 262144;
pub const EXTI_EMR_EM19_Pos: u32 = 19;
pub const EXTI_EMR_EM19_Msk: u32 = 524288;
pub const EXTI_EMR_EM19: u32 = 524288;
pub const EXTI_EMR_EM20_Pos: u32 = 20;
pub const EXTI_EMR_EM20_Msk: u32 = 1048576;
pub const EXTI_EMR_EM20: u32 = 1048576;
pub const EXTI_EMR_EM21_Pos: u32 = 21;
pub const EXTI_EMR_EM21_Msk: u32 = 2097152;
pub const EXTI_EMR_EM21: u32 = 2097152;
pub const EXTI_EMR_EM22_Pos: u32 = 22;
pub const EXTI_EMR_EM22_Msk: u32 = 4194304;
pub const EXTI_EMR_EM22: u32 = 4194304;
pub const EXTI_EMR_EM23_Pos: u32 = 23;
pub const EXTI_EMR_EM23_Msk: u32 = 8388608;
pub const EXTI_EMR_EM23: u32 = 8388608;
pub const EXTI_EMR_EM24_Pos: u32 = 24;
pub const EXTI_EMR_EM24_Msk: u32 = 16777216;
pub const EXTI_EMR_EM24: u32 = 16777216;
pub const EXTI_EMR_EM25_Pos: u32 = 25;
pub const EXTI_EMR_EM25_Msk: u32 = 33554432;
pub const EXTI_EMR_EM25: u32 = 33554432;
pub const EXTI_EMR_EM26_Pos: u32 = 26;
pub const EXTI_EMR_EM26_Msk: u32 = 67108864;
pub const EXTI_EMR_EM26: u32 = 67108864;
pub const EXTI_EMR_EM28_Pos: u32 = 28;
pub const EXTI_EMR_EM28_Msk: u32 = 268435456;
pub const EXTI_EMR_EM28: u32 = 268435456;
pub const EXTI_EMR_EM29_Pos: u32 = 29;
pub const EXTI_EMR_EM29_Msk: u32 = 536870912;
pub const EXTI_EMR_EM29: u32 = 536870912;
pub const EXTI_RTSR_RT0_Pos: u32 = 0;
pub const EXTI_RTSR_RT0_Msk: u32 = 1;
pub const EXTI_RTSR_RT0: u32 = 1;
pub const EXTI_RTSR_RT1_Pos: u32 = 1;
pub const EXTI_RTSR_RT1_Msk: u32 = 2;
pub const EXTI_RTSR_RT1: u32 = 2;
pub const EXTI_RTSR_RT2_Pos: u32 = 2;
pub const EXTI_RTSR_RT2_Msk: u32 = 4;
pub const EXTI_RTSR_RT2: u32 = 4;
pub const EXTI_RTSR_RT3_Pos: u32 = 3;
pub const EXTI_RTSR_RT3_Msk: u32 = 8;
pub const EXTI_RTSR_RT3: u32 = 8;
pub const EXTI_RTSR_RT4_Pos: u32 = 4;
pub const EXTI_RTSR_RT4_Msk: u32 = 16;
pub const EXTI_RTSR_RT4: u32 = 16;
pub const EXTI_RTSR_RT5_Pos: u32 = 5;
pub const EXTI_RTSR_RT5_Msk: u32 = 32;
pub const EXTI_RTSR_RT5: u32 = 32;
pub const EXTI_RTSR_RT6_Pos: u32 = 6;
pub const EXTI_RTSR_RT6_Msk: u32 = 64;
pub const EXTI_RTSR_RT6: u32 = 64;
pub const EXTI_RTSR_RT7_Pos: u32 = 7;
pub const EXTI_RTSR_RT7_Msk: u32 = 128;
pub const EXTI_RTSR_RT7: u32 = 128;
pub const EXTI_RTSR_RT8_Pos: u32 = 8;
pub const EXTI_RTSR_RT8_Msk: u32 = 256;
pub const EXTI_RTSR_RT8: u32 = 256;
pub const EXTI_RTSR_RT9_Pos: u32 = 9;
pub const EXTI_RTSR_RT9_Msk: u32 = 512;
pub const EXTI_RTSR_RT9: u32 = 512;
pub const EXTI_RTSR_RT10_Pos: u32 = 10;
pub const EXTI_RTSR_RT10_Msk: u32 = 1024;
pub const EXTI_RTSR_RT10: u32 = 1024;
pub const EXTI_RTSR_RT11_Pos: u32 = 11;
pub const EXTI_RTSR_RT11_Msk: u32 = 2048;
pub const EXTI_RTSR_RT11: u32 = 2048;
pub const EXTI_RTSR_RT12_Pos: u32 = 12;
pub const EXTI_RTSR_RT12_Msk: u32 = 4096;
pub const EXTI_RTSR_RT12: u32 = 4096;
pub const EXTI_RTSR_RT13_Pos: u32 = 13;
pub const EXTI_RTSR_RT13_Msk: u32 = 8192;
pub const EXTI_RTSR_RT13: u32 = 8192;
pub const EXTI_RTSR_RT14_Pos: u32 = 14;
pub const EXTI_RTSR_RT14_Msk: u32 = 16384;
pub const EXTI_RTSR_RT14: u32 = 16384;
pub const EXTI_RTSR_RT15_Pos: u32 = 15;
pub const EXTI_RTSR_RT15_Msk: u32 = 32768;
pub const EXTI_RTSR_RT15: u32 = 32768;
pub const EXTI_RTSR_RT16_Pos: u32 = 16;
pub const EXTI_RTSR_RT16_Msk: u32 = 65536;
pub const EXTI_RTSR_RT16: u32 = 65536;
pub const EXTI_RTSR_RT17_Pos: u32 = 17;
pub const EXTI_RTSR_RT17_Msk: u32 = 131072;
pub const EXTI_RTSR_RT17: u32 = 131072;
pub const EXTI_RTSR_RT19_Pos: u32 = 19;
pub const EXTI_RTSR_RT19_Msk: u32 = 524288;
pub const EXTI_RTSR_RT19: u32 = 524288;
pub const EXTI_RTSR_RT20_Pos: u32 = 20;
pub const EXTI_RTSR_RT20_Msk: u32 = 1048576;
pub const EXTI_RTSR_RT20: u32 = 1048576;
pub const EXTI_RTSR_RT21_Pos: u32 = 21;
pub const EXTI_RTSR_RT21_Msk: u32 = 2097152;
pub const EXTI_RTSR_RT21: u32 = 2097152;
pub const EXTI_RTSR_RT22_Pos: u32 = 22;
pub const EXTI_RTSR_RT22_Msk: u32 = 4194304;
pub const EXTI_RTSR_RT22: u32 = 4194304;
pub const EXTI_RTSR_TR0: u32 = 1;
pub const EXTI_RTSR_TR1: u32 = 2;
pub const EXTI_RTSR_TR2: u32 = 4;
pub const EXTI_RTSR_TR3: u32 = 8;
pub const EXTI_RTSR_TR4: u32 = 16;
pub const EXTI_RTSR_TR5: u32 = 32;
pub const EXTI_RTSR_TR6: u32 = 64;
pub const EXTI_RTSR_TR7: u32 = 128;
pub const EXTI_RTSR_TR8: u32 = 256;
pub const EXTI_RTSR_TR9: u32 = 512;
pub const EXTI_RTSR_TR10: u32 = 1024;
pub const EXTI_RTSR_TR11: u32 = 2048;
pub const EXTI_RTSR_TR12: u32 = 4096;
pub const EXTI_RTSR_TR13: u32 = 8192;
pub const EXTI_RTSR_TR14: u32 = 16384;
pub const EXTI_RTSR_TR15: u32 = 32768;
pub const EXTI_RTSR_TR16: u32 = 65536;
pub const EXTI_RTSR_TR17: u32 = 131072;
pub const EXTI_RTSR_TR19: u32 = 524288;
pub const EXTI_RTSR_TR20: u32 = 1048576;
pub const EXTI_RTSR_TR21: u32 = 2097152;
pub const EXTI_RTSR_TR22: u32 = 4194304;
pub const EXTI_FTSR_FT0_Pos: u32 = 0;
pub const EXTI_FTSR_FT0_Msk: u32 = 1;
pub const EXTI_FTSR_FT0: u32 = 1;
pub const EXTI_FTSR_FT1_Pos: u32 = 1;
pub const EXTI_FTSR_FT1_Msk: u32 = 2;
pub const EXTI_FTSR_FT1: u32 = 2;
pub const EXTI_FTSR_FT2_Pos: u32 = 2;
pub const EXTI_FTSR_FT2_Msk: u32 = 4;
pub const EXTI_FTSR_FT2: u32 = 4;
pub const EXTI_FTSR_FT3_Pos: u32 = 3;
pub const EXTI_FTSR_FT3_Msk: u32 = 8;
pub const EXTI_FTSR_FT3: u32 = 8;
pub const EXTI_FTSR_FT4_Pos: u32 = 4;
pub const EXTI_FTSR_FT4_Msk: u32 = 16;
pub const EXTI_FTSR_FT4: u32 = 16;
pub const EXTI_FTSR_FT5_Pos: u32 = 5;
pub const EXTI_FTSR_FT5_Msk: u32 = 32;
pub const EXTI_FTSR_FT5: u32 = 32;
pub const EXTI_FTSR_FT6_Pos: u32 = 6;
pub const EXTI_FTSR_FT6_Msk: u32 = 64;
pub const EXTI_FTSR_FT6: u32 = 64;
pub const EXTI_FTSR_FT7_Pos: u32 = 7;
pub const EXTI_FTSR_FT7_Msk: u32 = 128;
pub const EXTI_FTSR_FT7: u32 = 128;
pub const EXTI_FTSR_FT8_Pos: u32 = 8;
pub const EXTI_FTSR_FT8_Msk: u32 = 256;
pub const EXTI_FTSR_FT8: u32 = 256;
pub const EXTI_FTSR_FT9_Pos: u32 = 9;
pub const EXTI_FTSR_FT9_Msk: u32 = 512;
pub const EXTI_FTSR_FT9: u32 = 512;
pub const EXTI_FTSR_FT10_Pos: u32 = 10;
pub const EXTI_FTSR_FT10_Msk: u32 = 1024;
pub const EXTI_FTSR_FT10: u32 = 1024;
pub const EXTI_FTSR_FT11_Pos: u32 = 11;
pub const EXTI_FTSR_FT11_Msk: u32 = 2048;
pub const EXTI_FTSR_FT11: u32 = 2048;
pub const EXTI_FTSR_FT12_Pos: u32 = 12;
pub const EXTI_FTSR_FT12_Msk: u32 = 4096;
pub const EXTI_FTSR_FT12: u32 = 4096;
pub const EXTI_FTSR_FT13_Pos: u32 = 13;
pub const EXTI_FTSR_FT13_Msk: u32 = 8192;
pub const EXTI_FTSR_FT13: u32 = 8192;
pub const EXTI_FTSR_FT14_Pos: u32 = 14;
pub const EXTI_FTSR_FT14_Msk: u32 = 16384;
pub const EXTI_FTSR_FT14: u32 = 16384;
pub const EXTI_FTSR_FT15_Pos: u32 = 15;
pub const EXTI_FTSR_FT15_Msk: u32 = 32768;
pub const EXTI_FTSR_FT15: u32 = 32768;
pub const EXTI_FTSR_FT16_Pos: u32 = 16;
pub const EXTI_FTSR_FT16_Msk: u32 = 65536;
pub const EXTI_FTSR_FT16: u32 = 65536;
pub const EXTI_FTSR_FT17_Pos: u32 = 17;
pub const EXTI_FTSR_FT17_Msk: u32 = 131072;
pub const EXTI_FTSR_FT17: u32 = 131072;
pub const EXTI_FTSR_FT19_Pos: u32 = 19;
pub const EXTI_FTSR_FT19_Msk: u32 = 524288;
pub const EXTI_FTSR_FT19: u32 = 524288;
pub const EXTI_FTSR_FT20_Pos: u32 = 20;
pub const EXTI_FTSR_FT20_Msk: u32 = 1048576;
pub const EXTI_FTSR_FT20: u32 = 1048576;
pub const EXTI_FTSR_FT21_Pos: u32 = 21;
pub const EXTI_FTSR_FT21_Msk: u32 = 2097152;
pub const EXTI_FTSR_FT21: u32 = 2097152;
pub const EXTI_FTSR_FT22_Pos: u32 = 22;
pub const EXTI_FTSR_FT22_Msk: u32 = 4194304;
pub const EXTI_FTSR_FT22: u32 = 4194304;
pub const EXTI_FTSR_TR0: u32 = 1;
pub const EXTI_FTSR_TR1: u32 = 2;
pub const EXTI_FTSR_TR2: u32 = 4;
pub const EXTI_FTSR_TR3: u32 = 8;
pub const EXTI_FTSR_TR4: u32 = 16;
pub const EXTI_FTSR_TR5: u32 = 32;
pub const EXTI_FTSR_TR6: u32 = 64;
pub const EXTI_FTSR_TR7: u32 = 128;
pub const EXTI_FTSR_TR8: u32 = 256;
pub const EXTI_FTSR_TR9: u32 = 512;
pub const EXTI_FTSR_TR10: u32 = 1024;
pub const EXTI_FTSR_TR11: u32 = 2048;
pub const EXTI_FTSR_TR12: u32 = 4096;
pub const EXTI_FTSR_TR13: u32 = 8192;
pub const EXTI_FTSR_TR14: u32 = 16384;
pub const EXTI_FTSR_TR15: u32 = 32768;
pub const EXTI_FTSR_TR16: u32 = 65536;
pub const EXTI_FTSR_TR17: u32 = 131072;
pub const EXTI_FTSR_TR19: u32 = 524288;
pub const EXTI_FTSR_TR20: u32 = 1048576;
pub const EXTI_FTSR_TR21: u32 = 2097152;
pub const EXTI_FTSR_TR22: u32 = 4194304;
pub const EXTI_SWIER_SWI0_Pos: u32 = 0;
pub const EXTI_SWIER_SWI0_Msk: u32 = 1;
pub const EXTI_SWIER_SWI0: u32 = 1;
pub const EXTI_SWIER_SWI1_Pos: u32 = 1;
pub const EXTI_SWIER_SWI1_Msk: u32 = 2;
pub const EXTI_SWIER_SWI1: u32 = 2;
pub const EXTI_SWIER_SWI2_Pos: u32 = 2;
pub const EXTI_SWIER_SWI2_Msk: u32 = 4;
pub const EXTI_SWIER_SWI2: u32 = 4;
pub const EXTI_SWIER_SWI3_Pos: u32 = 3;
pub const EXTI_SWIER_SWI3_Msk: u32 = 8;
pub const EXTI_SWIER_SWI3: u32 = 8;
pub const EXTI_SWIER_SWI4_Pos: u32 = 4;
pub const EXTI_SWIER_SWI4_Msk: u32 = 16;
pub const EXTI_SWIER_SWI4: u32 = 16;
pub const EXTI_SWIER_SWI5_Pos: u32 = 5;
pub const EXTI_SWIER_SWI5_Msk: u32 = 32;
pub const EXTI_SWIER_SWI5: u32 = 32;
pub const EXTI_SWIER_SWI6_Pos: u32 = 6;
pub const EXTI_SWIER_SWI6_Msk: u32 = 64;
pub const EXTI_SWIER_SWI6: u32 = 64;
pub const EXTI_SWIER_SWI7_Pos: u32 = 7;
pub const EXTI_SWIER_SWI7_Msk: u32 = 128;
pub const EXTI_SWIER_SWI7: u32 = 128;
pub const EXTI_SWIER_SWI8_Pos: u32 = 8;
pub const EXTI_SWIER_SWI8_Msk: u32 = 256;
pub const EXTI_SWIER_SWI8: u32 = 256;
pub const EXTI_SWIER_SWI9_Pos: u32 = 9;
pub const EXTI_SWIER_SWI9_Msk: u32 = 512;
pub const EXTI_SWIER_SWI9: u32 = 512;
pub const EXTI_SWIER_SWI10_Pos: u32 = 10;
pub const EXTI_SWIER_SWI10_Msk: u32 = 1024;
pub const EXTI_SWIER_SWI10: u32 = 1024;
pub const EXTI_SWIER_SWI11_Pos: u32 = 11;
pub const EXTI_SWIER_SWI11_Msk: u32 = 2048;
pub const EXTI_SWIER_SWI11: u32 = 2048;
pub const EXTI_SWIER_SWI12_Pos: u32 = 12;
pub const EXTI_SWIER_SWI12_Msk: u32 = 4096;
pub const EXTI_SWIER_SWI12: u32 = 4096;
pub const EXTI_SWIER_SWI13_Pos: u32 = 13;
pub const EXTI_SWIER_SWI13_Msk: u32 = 8192;
pub const EXTI_SWIER_SWI13: u32 = 8192;
pub const EXTI_SWIER_SWI14_Pos: u32 = 14;
pub const EXTI_SWIER_SWI14_Msk: u32 = 16384;
pub const EXTI_SWIER_SWI14: u32 = 16384;
pub const EXTI_SWIER_SWI15_Pos: u32 = 15;
pub const EXTI_SWIER_SWI15_Msk: u32 = 32768;
pub const EXTI_SWIER_SWI15: u32 = 32768;
pub const EXTI_SWIER_SWI16_Pos: u32 = 16;
pub const EXTI_SWIER_SWI16_Msk: u32 = 65536;
pub const EXTI_SWIER_SWI16: u32 = 65536;
pub const EXTI_SWIER_SWI17_Pos: u32 = 17;
pub const EXTI_SWIER_SWI17_Msk: u32 = 131072;
pub const EXTI_SWIER_SWI17: u32 = 131072;
pub const EXTI_SWIER_SWI19_Pos: u32 = 19;
pub const EXTI_SWIER_SWI19_Msk: u32 = 524288;
pub const EXTI_SWIER_SWI19: u32 = 524288;
pub const EXTI_SWIER_SWI20_Pos: u32 = 20;
pub const EXTI_SWIER_SWI20_Msk: u32 = 1048576;
pub const EXTI_SWIER_SWI20: u32 = 1048576;
pub const EXTI_SWIER_SWI21_Pos: u32 = 21;
pub const EXTI_SWIER_SWI21_Msk: u32 = 2097152;
pub const EXTI_SWIER_SWI21: u32 = 2097152;
pub const EXTI_SWIER_SWI22_Pos: u32 = 22;
pub const EXTI_SWIER_SWI22_Msk: u32 = 4194304;
pub const EXTI_SWIER_SWI22: u32 = 4194304;
pub const EXTI_SWIER_SWIER0: u32 = 1;
pub const EXTI_SWIER_SWIER1: u32 = 2;
pub const EXTI_SWIER_SWIER2: u32 = 4;
pub const EXTI_SWIER_SWIER3: u32 = 8;
pub const EXTI_SWIER_SWIER4: u32 = 16;
pub const EXTI_SWIER_SWIER5: u32 = 32;
pub const EXTI_SWIER_SWIER6: u32 = 64;
pub const EXTI_SWIER_SWIER7: u32 = 128;
pub const EXTI_SWIER_SWIER8: u32 = 256;
pub const EXTI_SWIER_SWIER9: u32 = 512;
pub const EXTI_SWIER_SWIER10: u32 = 1024;
pub const EXTI_SWIER_SWIER11: u32 = 2048;
pub const EXTI_SWIER_SWIER12: u32 = 4096;
pub const EXTI_SWIER_SWIER13: u32 = 8192;
pub const EXTI_SWIER_SWIER14: u32 = 16384;
pub const EXTI_SWIER_SWIER15: u32 = 32768;
pub const EXTI_SWIER_SWIER16: u32 = 65536;
pub const EXTI_SWIER_SWIER17: u32 = 131072;
pub const EXTI_SWIER_SWIER19: u32 = 524288;
pub const EXTI_SWIER_SWIER20: u32 = 1048576;
pub const EXTI_SWIER_SWIER21: u32 = 2097152;
pub const EXTI_SWIER_SWIER22: u32 = 4194304;
pub const EXTI_PR_PIF0_Pos: u32 = 0;
pub const EXTI_PR_PIF0_Msk: u32 = 1;
pub const EXTI_PR_PIF0: u32 = 1;
pub const EXTI_PR_PIF1_Pos: u32 = 1;
pub const EXTI_PR_PIF1_Msk: u32 = 2;
pub const EXTI_PR_PIF1: u32 = 2;
pub const EXTI_PR_PIF2_Pos: u32 = 2;
pub const EXTI_PR_PIF2_Msk: u32 = 4;
pub const EXTI_PR_PIF2: u32 = 4;
pub const EXTI_PR_PIF3_Pos: u32 = 3;
pub const EXTI_PR_PIF3_Msk: u32 = 8;
pub const EXTI_PR_PIF3: u32 = 8;
pub const EXTI_PR_PIF4_Pos: u32 = 4;
pub const EXTI_PR_PIF4_Msk: u32 = 16;
pub const EXTI_PR_PIF4: u32 = 16;
pub const EXTI_PR_PIF5_Pos: u32 = 5;
pub const EXTI_PR_PIF5_Msk: u32 = 32;
pub const EXTI_PR_PIF5: u32 = 32;
pub const EXTI_PR_PIF6_Pos: u32 = 6;
pub const EXTI_PR_PIF6_Msk: u32 = 64;
pub const EXTI_PR_PIF6: u32 = 64;
pub const EXTI_PR_PIF7_Pos: u32 = 7;
pub const EXTI_PR_PIF7_Msk: u32 = 128;
pub const EXTI_PR_PIF7: u32 = 128;
pub const EXTI_PR_PIF8_Pos: u32 = 8;
pub const EXTI_PR_PIF8_Msk: u32 = 256;
pub const EXTI_PR_PIF8: u32 = 256;
pub const EXTI_PR_PIF9_Pos: u32 = 9;
pub const EXTI_PR_PIF9_Msk: u32 = 512;
pub const EXTI_PR_PIF9: u32 = 512;
pub const EXTI_PR_PIF10_Pos: u32 = 10;
pub const EXTI_PR_PIF10_Msk: u32 = 1024;
pub const EXTI_PR_PIF10: u32 = 1024;
pub const EXTI_PR_PIF11_Pos: u32 = 11;
pub const EXTI_PR_PIF11_Msk: u32 = 2048;
pub const EXTI_PR_PIF11: u32 = 2048;
pub const EXTI_PR_PIF12_Pos: u32 = 12;
pub const EXTI_PR_PIF12_Msk: u32 = 4096;
pub const EXTI_PR_PIF12: u32 = 4096;
pub const EXTI_PR_PIF13_Pos: u32 = 13;
pub const EXTI_PR_PIF13_Msk: u32 = 8192;
pub const EXTI_PR_PIF13: u32 = 8192;
pub const EXTI_PR_PIF14_Pos: u32 = 14;
pub const EXTI_PR_PIF14_Msk: u32 = 16384;
pub const EXTI_PR_PIF14: u32 = 16384;
pub const EXTI_PR_PIF15_Pos: u32 = 15;
pub const EXTI_PR_PIF15_Msk: u32 = 32768;
pub const EXTI_PR_PIF15: u32 = 32768;
pub const EXTI_PR_PIF16_Pos: u32 = 16;
pub const EXTI_PR_PIF16_Msk: u32 = 65536;
pub const EXTI_PR_PIF16: u32 = 65536;
pub const EXTI_PR_PIF17_Pos: u32 = 17;
pub const EXTI_PR_PIF17_Msk: u32 = 131072;
pub const EXTI_PR_PIF17: u32 = 131072;
pub const EXTI_PR_PIF19_Pos: u32 = 19;
pub const EXTI_PR_PIF19_Msk: u32 = 524288;
pub const EXTI_PR_PIF19: u32 = 524288;
pub const EXTI_PR_PIF20_Pos: u32 = 20;
pub const EXTI_PR_PIF20_Msk: u32 = 1048576;
pub const EXTI_PR_PIF20: u32 = 1048576;
pub const EXTI_PR_PIF21_Pos: u32 = 21;
pub const EXTI_PR_PIF21_Msk: u32 = 2097152;
pub const EXTI_PR_PIF21: u32 = 2097152;
pub const EXTI_PR_PIF22_Pos: u32 = 22;
pub const EXTI_PR_PIF22_Msk: u32 = 4194304;
pub const EXTI_PR_PIF22: u32 = 4194304;
pub const EXTI_PR_PR0: u32 = 1;
pub const EXTI_PR_PR1: u32 = 2;
pub const EXTI_PR_PR2: u32 = 4;
pub const EXTI_PR_PR3: u32 = 8;
pub const EXTI_PR_PR4: u32 = 16;
pub const EXTI_PR_PR5: u32 = 32;
pub const EXTI_PR_PR6: u32 = 64;
pub const EXTI_PR_PR7: u32 = 128;
pub const EXTI_PR_PR8: u32 = 256;
pub const EXTI_PR_PR9: u32 = 512;
pub const EXTI_PR_PR10: u32 = 1024;
pub const EXTI_PR_PR11: u32 = 2048;
pub const EXTI_PR_PR12: u32 = 4096;
pub const EXTI_PR_PR13: u32 = 8192;
pub const EXTI_PR_PR14: u32 = 16384;
pub const EXTI_PR_PR15: u32 = 32768;
pub const EXTI_PR_PR16: u32 = 65536;
pub const EXTI_PR_PR17: u32 = 131072;
pub const EXTI_PR_PR19: u32 = 524288;
pub const EXTI_PR_PR20: u32 = 1048576;
pub const EXTI_PR_PR21: u32 = 2097152;
pub const EXTI_PR_PR22: u32 = 4194304;
pub const FLASH_ACR_LATENCY_Pos: u32 = 0;
pub const FLASH_ACR_LATENCY_Msk: u32 = 1;
pub const FLASH_ACR_LATENCY: u32 = 1;
pub const FLASH_ACR_PRFTEN_Pos: u32 = 1;
pub const FLASH_ACR_PRFTEN_Msk: u32 = 2;
pub const FLASH_ACR_PRFTEN: u32 = 2;
pub const FLASH_ACR_SLEEP_PD_Pos: u32 = 3;
pub const FLASH_ACR_SLEEP_PD_Msk: u32 = 8;
pub const FLASH_ACR_SLEEP_PD: u32 = 8;
pub const FLASH_ACR_RUN_PD_Pos: u32 = 4;
pub const FLASH_ACR_RUN_PD_Msk: u32 = 16;
pub const FLASH_ACR_RUN_PD: u32 = 16;
pub const FLASH_ACR_DISAB_BUF_Pos: u32 = 5;
pub const FLASH_ACR_DISAB_BUF_Msk: u32 = 32;
pub const FLASH_ACR_DISAB_BUF: u32 = 32;
pub const FLASH_ACR_PRE_READ_Pos: u32 = 6;
pub const FLASH_ACR_PRE_READ_Msk: u32 = 64;
pub const FLASH_ACR_PRE_READ: u32 = 64;
pub const FLASH_PECR_PELOCK_Pos: u32 = 0;
pub const FLASH_PECR_PELOCK_Msk: u32 = 1;
pub const FLASH_PECR_PELOCK: u32 = 1;
pub const FLASH_PECR_PRGLOCK_Pos: u32 = 1;
pub const FLASH_PECR_PRGLOCK_Msk: u32 = 2;
pub const FLASH_PECR_PRGLOCK: u32 = 2;
pub const FLASH_PECR_OPTLOCK_Pos: u32 = 2;
pub const FLASH_PECR_OPTLOCK_Msk: u32 = 4;
pub const FLASH_PECR_OPTLOCK: u32 = 4;
pub const FLASH_PECR_PROG_Pos: u32 = 3;
pub const FLASH_PECR_PROG_Msk: u32 = 8;
pub const FLASH_PECR_PROG: u32 = 8;
pub const FLASH_PECR_DATA_Pos: u32 = 4;
pub const FLASH_PECR_DATA_Msk: u32 = 16;
pub const FLASH_PECR_DATA: u32 = 16;
pub const FLASH_PECR_FIX_Pos: u32 = 8;
pub const FLASH_PECR_FIX_Msk: u32 = 256;
pub const FLASH_PECR_FIX: u32 = 256;
pub const FLASH_PECR_ERASE_Pos: u32 = 9;
pub const FLASH_PECR_ERASE_Msk: u32 = 512;
pub const FLASH_PECR_ERASE: u32 = 512;
pub const FLASH_PECR_FPRG_Pos: u32 = 10;
pub const FLASH_PECR_FPRG_Msk: u32 = 1024;
pub const FLASH_PECR_FPRG: u32 = 1024;
pub const FLASH_PECR_PARALLBANK_Pos: u32 = 15;
pub const FLASH_PECR_PARALLBANK_Msk: u32 = 32768;
pub const FLASH_PECR_PARALLBANK: u32 = 32768;
pub const FLASH_PECR_EOPIE_Pos: u32 = 16;
pub const FLASH_PECR_EOPIE_Msk: u32 = 65536;
pub const FLASH_PECR_EOPIE: u32 = 65536;
pub const FLASH_PECR_ERRIE_Pos: u32 = 17;
pub const FLASH_PECR_ERRIE_Msk: u32 = 131072;
pub const FLASH_PECR_ERRIE: u32 = 131072;
pub const FLASH_PECR_OBL_LAUNCH_Pos: u32 = 18;
pub const FLASH_PECR_OBL_LAUNCH_Msk: u32 = 262144;
pub const FLASH_PECR_OBL_LAUNCH: u32 = 262144;
pub const FLASH_PECR_HALF_ARRAY_Pos: u32 = 19;
pub const FLASH_PECR_HALF_ARRAY_Msk: u32 = 524288;
pub const FLASH_PECR_HALF_ARRAY: u32 = 524288;
pub const FLASH_PECR_NZDISABLE_Pos: u32 = 22;
pub const FLASH_PECR_NZDISABLE_Msk: u32 = 4194304;
pub const FLASH_PECR_NZDISABLE: u32 = 4194304;
pub const FLASH_PDKEYR_PDKEYR_Pos: u32 = 0;
pub const FLASH_PDKEYR_PDKEYR_Msk: u32 = 4294967295;
pub const FLASH_PDKEYR_PDKEYR: u32 = 4294967295;
pub const FLASH_PEKEYR_PEKEYR_Pos: u32 = 0;
pub const FLASH_PEKEYR_PEKEYR_Msk: u32 = 4294967295;
pub const FLASH_PEKEYR_PEKEYR: u32 = 4294967295;
pub const FLASH_PRGKEYR_PRGKEYR_Pos: u32 = 0;
pub const FLASH_PRGKEYR_PRGKEYR_Msk: u32 = 4294967295;
pub const FLASH_PRGKEYR_PRGKEYR: u32 = 4294967295;
pub const FLASH_OPTKEYR_OPTKEYR_Pos: u32 = 0;
pub const FLASH_OPTKEYR_OPTKEYR_Msk: u32 = 4294967295;
pub const FLASH_OPTKEYR_OPTKEYR: u32 = 4294967295;
pub const FLASH_SR_BSY_Pos: u32 = 0;
pub const FLASH_SR_BSY_Msk: u32 = 1;
pub const FLASH_SR_BSY: u32 = 1;
pub const FLASH_SR_EOP_Pos: u32 = 1;
pub const FLASH_SR_EOP_Msk: u32 = 2;
pub const FLASH_SR_EOP: u32 = 2;
pub const FLASH_SR_HVOFF_Pos: u32 = 2;
pub const FLASH_SR_HVOFF_Msk: u32 = 4;
pub const FLASH_SR_HVOFF: u32 = 4;
pub const FLASH_SR_READY_Pos: u32 = 3;
pub const FLASH_SR_READY_Msk: u32 = 8;
pub const FLASH_SR_READY: u32 = 8;
pub const FLASH_SR_WRPERR_Pos: u32 = 8;
pub const FLASH_SR_WRPERR_Msk: u32 = 256;
pub const FLASH_SR_WRPERR: u32 = 256;
pub const FLASH_SR_PGAERR_Pos: u32 = 9;
pub const FLASH_SR_PGAERR_Msk: u32 = 512;
pub const FLASH_SR_PGAERR: u32 = 512;
pub const FLASH_SR_SIZERR_Pos: u32 = 10;
pub const FLASH_SR_SIZERR_Msk: u32 = 1024;
pub const FLASH_SR_SIZERR: u32 = 1024;
pub const FLASH_SR_OPTVERR_Pos: u32 = 11;
pub const FLASH_SR_OPTVERR_Msk: u32 = 2048;
pub const FLASH_SR_OPTVERR: u32 = 2048;
pub const FLASH_SR_RDERR_Pos: u32 = 13;
pub const FLASH_SR_RDERR_Msk: u32 = 8192;
pub const FLASH_SR_RDERR: u32 = 8192;
pub const FLASH_SR_NOTZEROERR_Pos: u32 = 16;
pub const FLASH_SR_NOTZEROERR_Msk: u32 = 65536;
pub const FLASH_SR_NOTZEROERR: u32 = 65536;
pub const FLASH_SR_FWWERR_Pos: u32 = 17;
pub const FLASH_SR_FWWERR_Msk: u32 = 131072;
pub const FLASH_SR_FWWERR: u32 = 131072;
pub const FLASH_SR_FWWER: u32 = 131072;
pub const FLASH_SR_ENHV: u32 = 4;
pub const FLASH_SR_ENDHV: u32 = 4;
pub const FLASH_OPTR_RDPROT_Pos: u32 = 0;
pub const FLASH_OPTR_RDPROT_Msk: u32 = 255;
pub const FLASH_OPTR_RDPROT: u32 = 255;
pub const FLASH_OPTR_WPRMOD_Pos: u32 = 8;
pub const FLASH_OPTR_WPRMOD_Msk: u32 = 256;
pub const FLASH_OPTR_WPRMOD: u32 = 256;
pub const FLASH_OPTR_BOR_LEV_Pos: u32 = 16;
pub const FLASH_OPTR_BOR_LEV_Msk: u32 = 983040;
pub const FLASH_OPTR_BOR_LEV: u32 = 983040;
pub const FLASH_OPTR_IWDG_SW_Pos: u32 = 20;
pub const FLASH_OPTR_IWDG_SW_Msk: u32 = 1048576;
pub const FLASH_OPTR_IWDG_SW: u32 = 1048576;
pub const FLASH_OPTR_nRST_STOP_Pos: u32 = 21;
pub const FLASH_OPTR_nRST_STOP_Msk: u32 = 2097152;
pub const FLASH_OPTR_nRST_STOP: u32 = 2097152;
pub const FLASH_OPTR_nRST_STDBY_Pos: u32 = 22;
pub const FLASH_OPTR_nRST_STDBY_Msk: u32 = 4194304;
pub const FLASH_OPTR_nRST_STDBY: u32 = 4194304;
pub const FLASH_OPTR_BFB2_Pos: u32 = 23;
pub const FLASH_OPTR_BFB2_Msk: u32 = 8388608;
pub const FLASH_OPTR_BFB2: u32 = 8388608;
pub const FLASH_OPTR_USER_Pos: u32 = 20;
pub const FLASH_OPTR_USER_Msk: u32 = 7340032;
pub const FLASH_OPTR_USER: u32 = 7340032;
pub const FLASH_OPTR_BOOT1_Pos: u32 = 31;
pub const FLASH_OPTR_BOOT1_Msk: u32 = 2147483648;
pub const FLASH_OPTR_BOOT1: u32 = 2147483648;
pub const FLASH_WRPR_WRP_Pos: u32 = 0;
pub const FLASH_WRPR_WRP_Msk: u32 = 65535;
pub const FLASH_WRPR_WRP: u32 = 65535;
pub const GPIO_MODER_MODE0_Pos: u32 = 0;
pub const GPIO_MODER_MODE0_Msk: u32 = 3;
pub const GPIO_MODER_MODE0: u32 = 3;
pub const GPIO_MODER_MODE0_0: u32 = 1;
pub const GPIO_MODER_MODE0_1: u32 = 2;
pub const GPIO_MODER_MODE1_Pos: u32 = 2;
pub const GPIO_MODER_MODE1_Msk: u32 = 12;
pub const GPIO_MODER_MODE1: u32 = 12;
pub const GPIO_MODER_MODE1_0: u32 = 4;
pub const GPIO_MODER_MODE1_1: u32 = 8;
pub const GPIO_MODER_MODE2_Pos: u32 = 4;
pub const GPIO_MODER_MODE2_Msk: u32 = 48;
pub const GPIO_MODER_MODE2: u32 = 48;
pub const GPIO_MODER_MODE2_0: u32 = 16;
pub const GPIO_MODER_MODE2_1: u32 = 32;
pub const GPIO_MODER_MODE3_Pos: u32 = 6;
pub const GPIO_MODER_MODE3_Msk: u32 = 192;
pub const GPIO_MODER_MODE3: u32 = 192;
pub const GPIO_MODER_MODE3_0: u32 = 64;
pub const GPIO_MODER_MODE3_1: u32 = 128;
pub const GPIO_MODER_MODE4_Pos: u32 = 8;
pub const GPIO_MODER_MODE4_Msk: u32 = 768;
pub const GPIO_MODER_MODE4: u32 = 768;
pub const GPIO_MODER_MODE4_0: u32 = 256;
pub const GPIO_MODER_MODE4_1: u32 = 512;
pub const GPIO_MODER_MODE5_Pos: u32 = 10;
pub const GPIO_MODER_MODE5_Msk: u32 = 3072;
pub const GPIO_MODER_MODE5: u32 = 3072;
pub const GPIO_MODER_MODE5_0: u32 = 1024;
pub const GPIO_MODER_MODE5_1: u32 = 2048;
pub const GPIO_MODER_MODE6_Pos: u32 = 12;
pub const GPIO_MODER_MODE6_Msk: u32 = 12288;
pub const GPIO_MODER_MODE6: u32 = 12288;
pub const GPIO_MODER_MODE6_0: u32 = 4096;
pub const GPIO_MODER_MODE6_1: u32 = 8192;
pub const GPIO_MODER_MODE7_Pos: u32 = 14;
pub const GPIO_MODER_MODE7_Msk: u32 = 49152;
pub const GPIO_MODER_MODE7: u32 = 49152;
pub const GPIO_MODER_MODE7_0: u32 = 16384;
pub const GPIO_MODER_MODE7_1: u32 = 32768;
pub const GPIO_MODER_MODE8_Pos: u32 = 16;
pub const GPIO_MODER_MODE8_Msk: u32 = 196608;
pub const GPIO_MODER_MODE8: u32 = 196608;
pub const GPIO_MODER_MODE8_0: u32 = 65536;
pub const GPIO_MODER_MODE8_1: u32 = 131072;
pub const GPIO_MODER_MODE9_Pos: u32 = 18;
pub const GPIO_MODER_MODE9_Msk: u32 = 786432;
pub const GPIO_MODER_MODE9: u32 = 786432;
pub const GPIO_MODER_MODE9_0: u32 = 262144;
pub const GPIO_MODER_MODE9_1: u32 = 524288;
pub const GPIO_MODER_MODE10_Pos: u32 = 20;
pub const GPIO_MODER_MODE10_Msk: u32 = 3145728;
pub const GPIO_MODER_MODE10: u32 = 3145728;
pub const GPIO_MODER_MODE10_0: u32 = 1048576;
pub const GPIO_MODER_MODE10_1: u32 = 2097152;
pub const GPIO_MODER_MODE11_Pos: u32 = 22;
pub const GPIO_MODER_MODE11_Msk: u32 = 12582912;
pub const GPIO_MODER_MODE11: u32 = 12582912;
pub const GPIO_MODER_MODE11_0: u32 = 4194304;
pub const GPIO_MODER_MODE11_1: u32 = 8388608;
pub const GPIO_MODER_MODE12_Pos: u32 = 24;
pub const GPIO_MODER_MODE12_Msk: u32 = 50331648;
pub const GPIO_MODER_MODE12: u32 = 50331648;
pub const GPIO_MODER_MODE12_0: u32 = 16777216;
pub const GPIO_MODER_MODE12_1: u32 = 33554432;
pub const GPIO_MODER_MODE13_Pos: u32 = 26;
pub const GPIO_MODER_MODE13_Msk: u32 = 201326592;
pub const GPIO_MODER_MODE13: u32 = 201326592;
pub const GPIO_MODER_MODE13_0: u32 = 67108864;
pub const GPIO_MODER_MODE13_1: u32 = 134217728;
pub const GPIO_MODER_MODE14_Pos: u32 = 28;
pub const GPIO_MODER_MODE14_Msk: u32 = 805306368;
pub const GPIO_MODER_MODE14: u32 = 805306368;
pub const GPIO_MODER_MODE14_0: u32 = 268435456;
pub const GPIO_MODER_MODE14_1: u32 = 536870912;
pub const GPIO_MODER_MODE15_Pos: u32 = 30;
pub const GPIO_MODER_MODE15_Msk: u32 = 3221225472;
pub const GPIO_MODER_MODE15: u32 = 3221225472;
pub const GPIO_MODER_MODE15_0: u32 = 1073741824;
pub const GPIO_MODER_MODE15_1: u32 = 2147483648;
pub const GPIO_OTYPER_OT_0: u32 = 1;
pub const GPIO_OTYPER_OT_1: u32 = 2;
pub const GPIO_OTYPER_OT_2: u32 = 4;
pub const GPIO_OTYPER_OT_3: u32 = 8;
pub const GPIO_OTYPER_OT_4: u32 = 16;
pub const GPIO_OTYPER_OT_5: u32 = 32;
pub const GPIO_OTYPER_OT_6: u32 = 64;
pub const GPIO_OTYPER_OT_7: u32 = 128;
pub const GPIO_OTYPER_OT_8: u32 = 256;
pub const GPIO_OTYPER_OT_9: u32 = 512;
pub const GPIO_OTYPER_OT_10: u32 = 1024;
pub const GPIO_OTYPER_OT_11: u32 = 2048;
pub const GPIO_OTYPER_OT_12: u32 = 4096;
pub const GPIO_OTYPER_OT_13: u32 = 8192;
pub const GPIO_OTYPER_OT_14: u32 = 16384;
pub const GPIO_OTYPER_OT_15: u32 = 32768;
pub const GPIO_OSPEEDR_OSPEED0_Pos: u32 = 0;
pub const GPIO_OSPEEDR_OSPEED0_Msk: u32 = 3;
pub const GPIO_OSPEEDR_OSPEED0: u32 = 3;
pub const GPIO_OSPEEDR_OSPEED0_0: u32 = 1;
pub const GPIO_OSPEEDR_OSPEED0_1: u32 = 2;
pub const GPIO_OSPEEDR_OSPEED1_Pos: u32 = 2;
pub const GPIO_OSPEEDR_OSPEED1_Msk: u32 = 12;
pub const GPIO_OSPEEDR_OSPEED1: u32 = 12;
pub const GPIO_OSPEEDR_OSPEED1_0: u32 = 4;
pub const GPIO_OSPEEDR_OSPEED1_1: u32 = 8;
pub const GPIO_OSPEEDR_OSPEED2_Pos: u32 = 4;
pub const GPIO_OSPEEDR_OSPEED2_Msk: u32 = 48;
pub const GPIO_OSPEEDR_OSPEED2: u32 = 48;
pub const GPIO_OSPEEDR_OSPEED2_0: u32 = 16;
pub const GPIO_OSPEEDR_OSPEED2_1: u32 = 32;
pub const GPIO_OSPEEDR_OSPEED3_Pos: u32 = 6;
pub const GPIO_OSPEEDR_OSPEED3_Msk: u32 = 192;
pub const GPIO_OSPEEDR_OSPEED3: u32 = 192;
pub const GPIO_OSPEEDR_OSPEED3_0: u32 = 64;
pub const GPIO_OSPEEDR_OSPEED3_1: u32 = 128;
pub const GPIO_OSPEEDR_OSPEED4_Pos: u32 = 8;
pub const GPIO_OSPEEDR_OSPEED4_Msk: u32 = 768;
pub const GPIO_OSPEEDR_OSPEED4: u32 = 768;
pub const GPIO_OSPEEDR_OSPEED4_0: u32 = 256;
pub const GPIO_OSPEEDR_OSPEED4_1: u32 = 512;
pub const GPIO_OSPEEDR_OSPEED5_Pos: u32 = 10;
pub const GPIO_OSPEEDR_OSPEED5_Msk: u32 = 3072;
pub const GPIO_OSPEEDR_OSPEED5: u32 = 3072;
pub const GPIO_OSPEEDR_OSPEED5_0: u32 = 1024;
pub const GPIO_OSPEEDR_OSPEED5_1: u32 = 2048;
pub const GPIO_OSPEEDR_OSPEED6_Pos: u32 = 12;
pub const GPIO_OSPEEDR_OSPEED6_Msk: u32 = 12288;
pub const GPIO_OSPEEDR_OSPEED6: u32 = 12288;
pub const GPIO_OSPEEDR_OSPEED6_0: u32 = 4096;
pub const GPIO_OSPEEDR_OSPEED6_1: u32 = 8192;
pub const GPIO_OSPEEDR_OSPEED7_Pos: u32 = 14;
pub const GPIO_OSPEEDR_OSPEED7_Msk: u32 = 49152;
pub const GPIO_OSPEEDR_OSPEED7: u32 = 49152;
pub const GPIO_OSPEEDR_OSPEED7_0: u32 = 16384;
pub const GPIO_OSPEEDR_OSPEED7_1: u32 = 32768;
pub const GPIO_OSPEEDR_OSPEED8_Pos: u32 = 16;
pub const GPIO_OSPEEDR_OSPEED8_Msk: u32 = 196608;
pub const GPIO_OSPEEDR_OSPEED8: u32 = 196608;
pub const GPIO_OSPEEDR_OSPEED8_0: u32 = 65536;
pub const GPIO_OSPEEDR_OSPEED8_1: u32 = 131072;
pub const GPIO_OSPEEDR_OSPEED9_Pos: u32 = 18;
pub const GPIO_OSPEEDR_OSPEED9_Msk: u32 = 786432;
pub const GPIO_OSPEEDR_OSPEED9: u32 = 786432;
pub const GPIO_OSPEEDR_OSPEED9_0: u32 = 262144;
pub const GPIO_OSPEEDR_OSPEED9_1: u32 = 524288;
pub const GPIO_OSPEEDR_OSPEED10_Pos: u32 = 20;
pub const GPIO_OSPEEDR_OSPEED10_Msk: u32 = 3145728;
pub const GPIO_OSPEEDR_OSPEED10: u32 = 3145728;
pub const GPIO_OSPEEDR_OSPEED10_0: u32 = 1048576;
pub const GPIO_OSPEEDR_OSPEED10_1: u32 = 2097152;
pub const GPIO_OSPEEDR_OSPEED11_Pos: u32 = 22;
pub const GPIO_OSPEEDR_OSPEED11_Msk: u32 = 12582912;
pub const GPIO_OSPEEDR_OSPEED11: u32 = 12582912;
pub const GPIO_OSPEEDR_OSPEED11_0: u32 = 4194304;
pub const GPIO_OSPEEDR_OSPEED11_1: u32 = 8388608;
pub const GPIO_OSPEEDR_OSPEED12_Pos: u32 = 24;
pub const GPIO_OSPEEDR_OSPEED12_Msk: u32 = 50331648;
pub const GPIO_OSPEEDR_OSPEED12: u32 = 50331648;
pub const GPIO_OSPEEDR_OSPEED12_0: u32 = 16777216;
pub const GPIO_OSPEEDR_OSPEED12_1: u32 = 33554432;
pub const GPIO_OSPEEDR_OSPEED13_Pos: u32 = 26;
pub const GPIO_OSPEEDR_OSPEED13_Msk: u32 = 201326592;
pub const GPIO_OSPEEDR_OSPEED13: u32 = 201326592;
pub const GPIO_OSPEEDR_OSPEED13_0: u32 = 67108864;
pub const GPIO_OSPEEDR_OSPEED13_1: u32 = 134217728;
pub const GPIO_OSPEEDR_OSPEED14_Pos: u32 = 28;
pub const GPIO_OSPEEDR_OSPEED14_Msk: u32 = 805306368;
pub const GPIO_OSPEEDR_OSPEED14: u32 = 805306368;
pub const GPIO_OSPEEDR_OSPEED14_0: u32 = 268435456;
pub const GPIO_OSPEEDR_OSPEED14_1: u32 = 536870912;
pub const GPIO_OSPEEDR_OSPEED15_Pos: u32 = 30;
pub const GPIO_OSPEEDR_OSPEED15_Msk: u32 = 3221225472;
pub const GPIO_OSPEEDR_OSPEED15: u32 = 3221225472;
pub const GPIO_OSPEEDR_OSPEED15_0: u32 = 1073741824;
pub const GPIO_OSPEEDR_OSPEED15_1: u32 = 2147483648;
pub const GPIO_OSPEEDER_OSPEED0_Pos: u32 = 0;
pub const GPIO_OSPEEDER_OSPEED0_Msk: u32 = 3;
pub const GPIO_OSPEEDER_OSPEED0: u32 = 3;
pub const GPIO_OSPEEDER_OSPEED0_0: u32 = 1;
pub const GPIO_OSPEEDER_OSPEED0_1: u32 = 2;
pub const GPIO_OSPEEDER_OSPEED1_Pos: u32 = 2;
pub const GPIO_OSPEEDER_OSPEED1_Msk: u32 = 12;
pub const GPIO_OSPEEDER_OSPEED1: u32 = 12;
pub const GPIO_OSPEEDER_OSPEED1_0: u32 = 4;
pub const GPIO_OSPEEDER_OSPEED1_1: u32 = 8;
pub const GPIO_OSPEEDER_OSPEED2_Pos: u32 = 4;
pub const GPIO_OSPEEDER_OSPEED2_Msk: u32 = 48;
pub const GPIO_OSPEEDER_OSPEED2: u32 = 48;
pub const GPIO_OSPEEDER_OSPEED2_0: u32 = 16;
pub const GPIO_OSPEEDER_OSPEED2_1: u32 = 32;
pub const GPIO_OSPEEDER_OSPEED3_Pos: u32 = 6;
pub const GPIO_OSPEEDER_OSPEED3_Msk: u32 = 192;
pub const GPIO_OSPEEDER_OSPEED3: u32 = 192;
pub const GPIO_OSPEEDER_OSPEED3_0: u32 = 64;
pub const GPIO_OSPEEDER_OSPEED3_1: u32 = 128;
pub const GPIO_OSPEEDER_OSPEED4_Pos: u32 = 8;
pub const GPIO_OSPEEDER_OSPEED4_Msk: u32 = 768;
pub const GPIO_OSPEEDER_OSPEED4: u32 = 768;
pub const GPIO_OSPEEDER_OSPEED4_0: u32 = 256;
pub const GPIO_OSPEEDER_OSPEED4_1: u32 = 512;
pub const GPIO_OSPEEDER_OSPEED5_Pos: u32 = 10;
pub const GPIO_OSPEEDER_OSPEED5_Msk: u32 = 3072;
pub const GPIO_OSPEEDER_OSPEED5: u32 = 3072;
pub const GPIO_OSPEEDER_OSPEED5_0: u32 = 1024;
pub const GPIO_OSPEEDER_OSPEED5_1: u32 = 2048;
pub const GPIO_OSPEEDER_OSPEED6_Pos: u32 = 12;
pub const GPIO_OSPEEDER_OSPEED6_Msk: u32 = 12288;
pub const GPIO_OSPEEDER_OSPEED6: u32 = 12288;
pub const GPIO_OSPEEDER_OSPEED6_0: u32 = 4096;
pub const GPIO_OSPEEDER_OSPEED6_1: u32 = 8192;
pub const GPIO_OSPEEDER_OSPEED7_Pos: u32 = 14;
pub const GPIO_OSPEEDER_OSPEED7_Msk: u32 = 49152;
pub const GPIO_OSPEEDER_OSPEED7: u32 = 49152;
pub const GPIO_OSPEEDER_OSPEED7_0: u32 = 16384;
pub const GPIO_OSPEEDER_OSPEED7_1: u32 = 32768;
pub const GPIO_OSPEEDER_OSPEED8_Pos: u32 = 16;
pub const GPIO_OSPEEDER_OSPEED8_Msk: u32 = 196608;
pub const GPIO_OSPEEDER_OSPEED8: u32 = 196608;
pub const GPIO_OSPEEDER_OSPEED8_0: u32 = 65536;
pub const GPIO_OSPEEDER_OSPEED8_1: u32 = 131072;
pub const GPIO_OSPEEDER_OSPEED9_Pos: u32 = 18;
pub const GPIO_OSPEEDER_OSPEED9_Msk: u32 = 786432;
pub const GPIO_OSPEEDER_OSPEED9: u32 = 786432;
pub const GPIO_OSPEEDER_OSPEED9_0: u32 = 262144;
pub const GPIO_OSPEEDER_OSPEED9_1: u32 = 524288;
pub const GPIO_OSPEEDER_OSPEED10_Pos: u32 = 20;
pub const GPIO_OSPEEDER_OSPEED10_Msk: u32 = 3145728;
pub const GPIO_OSPEEDER_OSPEED10: u32 = 3145728;
pub const GPIO_OSPEEDER_OSPEED10_0: u32 = 1048576;
pub const GPIO_OSPEEDER_OSPEED10_1: u32 = 2097152;
pub const GPIO_OSPEEDER_OSPEED11_Pos: u32 = 22;
pub const GPIO_OSPEEDER_OSPEED11_Msk: u32 = 12582912;
pub const GPIO_OSPEEDER_OSPEED11: u32 = 12582912;
pub const GPIO_OSPEEDER_OSPEED11_0: u32 = 4194304;
pub const GPIO_OSPEEDER_OSPEED11_1: u32 = 8388608;
pub const GPIO_OSPEEDER_OSPEED12_Pos: u32 = 24;
pub const GPIO_OSPEEDER_OSPEED12_Msk: u32 = 50331648;
pub const GPIO_OSPEEDER_OSPEED12: u32 = 50331648;
pub const GPIO_OSPEEDER_OSPEED12_0: u32 = 16777216;
pub const GPIO_OSPEEDER_OSPEED12_1: u32 = 33554432;
pub const GPIO_OSPEEDER_OSPEED13_Pos: u32 = 26;
pub const GPIO_OSPEEDER_OSPEED13_Msk: u32 = 201326592;
pub const GPIO_OSPEEDER_OSPEED13: u32 = 201326592;
pub const GPIO_OSPEEDER_OSPEED13_0: u32 = 67108864;
pub const GPIO_OSPEEDER_OSPEED13_1: u32 = 134217728;
pub const GPIO_OSPEEDER_OSPEED14_Pos: u32 = 28;
pub const GPIO_OSPEEDER_OSPEED14_Msk: u32 = 805306368;
pub const GPIO_OSPEEDER_OSPEED14: u32 = 805306368;
pub const GPIO_OSPEEDER_OSPEED14_0: u32 = 268435456;
pub const GPIO_OSPEEDER_OSPEED14_1: u32 = 536870912;
pub const GPIO_OSPEEDER_OSPEED15_Pos: u32 = 30;
pub const GPIO_OSPEEDER_OSPEED15_Msk: u32 = 3221225472;
pub const GPIO_OSPEEDER_OSPEED15: u32 = 3221225472;
pub const GPIO_OSPEEDER_OSPEED15_0: u32 = 1073741824;
pub const GPIO_OSPEEDER_OSPEED15_1: u32 = 2147483648;
pub const GPIO_PUPDR_PUPD0_Pos: u32 = 0;
pub const GPIO_PUPDR_PUPD0_Msk: u32 = 3;
pub const GPIO_PUPDR_PUPD0: u32 = 3;
pub const GPIO_PUPDR_PUPD0_0: u32 = 1;
pub const GPIO_PUPDR_PUPD0_1: u32 = 2;
pub const GPIO_PUPDR_PUPD1_Pos: u32 = 2;
pub const GPIO_PUPDR_PUPD1_Msk: u32 = 12;
pub const GPIO_PUPDR_PUPD1: u32 = 12;
pub const GPIO_PUPDR_PUPD1_0: u32 = 4;
pub const GPIO_PUPDR_PUPD1_1: u32 = 8;
pub const GPIO_PUPDR_PUPD2_Pos: u32 = 4;
pub const GPIO_PUPDR_PUPD2_Msk: u32 = 48;
pub const GPIO_PUPDR_PUPD2: u32 = 48;
pub const GPIO_PUPDR_PUPD2_0: u32 = 16;
pub const GPIO_PUPDR_PUPD2_1: u32 = 32;
pub const GPIO_PUPDR_PUPD3_Pos: u32 = 6;
pub const GPIO_PUPDR_PUPD3_Msk: u32 = 192;
pub const GPIO_PUPDR_PUPD3: u32 = 192;
pub const GPIO_PUPDR_PUPD3_0: u32 = 64;
pub const GPIO_PUPDR_PUPD3_1: u32 = 128;
pub const GPIO_PUPDR_PUPD4_Pos: u32 = 8;
pub const GPIO_PUPDR_PUPD4_Msk: u32 = 768;
pub const GPIO_PUPDR_PUPD4: u32 = 768;
pub const GPIO_PUPDR_PUPD4_0: u32 = 256;
pub const GPIO_PUPDR_PUPD4_1: u32 = 512;
pub const GPIO_PUPDR_PUPD5_Pos: u32 = 10;
pub const GPIO_PUPDR_PUPD5_Msk: u32 = 3072;
pub const GPIO_PUPDR_PUPD5: u32 = 3072;
pub const GPIO_PUPDR_PUPD5_0: u32 = 1024;
pub const GPIO_PUPDR_PUPD5_1: u32 = 2048;
pub const GPIO_PUPDR_PUPD6_Pos: u32 = 12;
pub const GPIO_PUPDR_PUPD6_Msk: u32 = 12288;
pub const GPIO_PUPDR_PUPD6: u32 = 12288;
pub const GPIO_PUPDR_PUPD6_0: u32 = 4096;
pub const GPIO_PUPDR_PUPD6_1: u32 = 8192;
pub const GPIO_PUPDR_PUPD7_Pos: u32 = 14;
pub const GPIO_PUPDR_PUPD7_Msk: u32 = 49152;
pub const GPIO_PUPDR_PUPD7: u32 = 49152;
pub const GPIO_PUPDR_PUPD7_0: u32 = 16384;
pub const GPIO_PUPDR_PUPD7_1: u32 = 32768;
pub const GPIO_PUPDR_PUPD8_Pos: u32 = 16;
pub const GPIO_PUPDR_PUPD8_Msk: u32 = 196608;
pub const GPIO_PUPDR_PUPD8: u32 = 196608;
pub const GPIO_PUPDR_PUPD8_0: u32 = 65536;
pub const GPIO_PUPDR_PUPD8_1: u32 = 131072;
pub const GPIO_PUPDR_PUPD9_Pos: u32 = 18;
pub const GPIO_PUPDR_PUPD9_Msk: u32 = 786432;
pub const GPIO_PUPDR_PUPD9: u32 = 786432;
pub const GPIO_PUPDR_PUPD9_0: u32 = 262144;
pub const GPIO_PUPDR_PUPD9_1: u32 = 524288;
pub const GPIO_PUPDR_PUPD10_Pos: u32 = 20;
pub const GPIO_PUPDR_PUPD10_Msk: u32 = 3145728;
pub const GPIO_PUPDR_PUPD10: u32 = 3145728;
pub const GPIO_PUPDR_PUPD10_0: u32 = 1048576;
pub const GPIO_PUPDR_PUPD10_1: u32 = 2097152;
pub const GPIO_PUPDR_PUPD11_Pos: u32 = 22;
pub const GPIO_PUPDR_PUPD11_Msk: u32 = 12582912;
pub const GPIO_PUPDR_PUPD11: u32 = 12582912;
pub const GPIO_PUPDR_PUPD11_0: u32 = 4194304;
pub const GPIO_PUPDR_PUPD11_1: u32 = 8388608;
pub const GPIO_PUPDR_PUPD12_Pos: u32 = 24;
pub const GPIO_PUPDR_PUPD12_Msk: u32 = 50331648;
pub const GPIO_PUPDR_PUPD12: u32 = 50331648;
pub const GPIO_PUPDR_PUPD12_0: u32 = 16777216;
pub const GPIO_PUPDR_PUPD12_1: u32 = 33554432;
pub const GPIO_PUPDR_PUPD13_Pos: u32 = 26;
pub const GPIO_PUPDR_PUPD13_Msk: u32 = 201326592;
pub const GPIO_PUPDR_PUPD13: u32 = 201326592;
pub const GPIO_PUPDR_PUPD13_0: u32 = 67108864;
pub const GPIO_PUPDR_PUPD13_1: u32 = 134217728;
pub const GPIO_PUPDR_PUPD14_Pos: u32 = 28;
pub const GPIO_PUPDR_PUPD14_Msk: u32 = 805306368;
pub const GPIO_PUPDR_PUPD14: u32 = 805306368;
pub const GPIO_PUPDR_PUPD14_0: u32 = 268435456;
pub const GPIO_PUPDR_PUPD14_1: u32 = 536870912;
pub const GPIO_PUPDR_PUPD15_Pos: u32 = 30;
pub const GPIO_PUPDR_PUPD15_Msk: u32 = 3221225472;
pub const GPIO_PUPDR_PUPD15: u32 = 3221225472;
pub const GPIO_PUPDR_PUPD15_0: u32 = 1073741824;
pub const GPIO_PUPDR_PUPD15_1: u32 = 2147483648;
pub const GPIO_IDR_ID0_Pos: u32 = 0;
pub const GPIO_IDR_ID0_Msk: u32 = 1;
pub const GPIO_IDR_ID0: u32 = 1;
pub const GPIO_IDR_ID1_Pos: u32 = 1;
pub const GPIO_IDR_ID1_Msk: u32 = 2;
pub const GPIO_IDR_ID1: u32 = 2;
pub const GPIO_IDR_ID2_Pos: u32 = 2;
pub const GPIO_IDR_ID2_Msk: u32 = 4;
pub const GPIO_IDR_ID2: u32 = 4;
pub const GPIO_IDR_ID3_Pos: u32 = 3;
pub const GPIO_IDR_ID3_Msk: u32 = 8;
pub const GPIO_IDR_ID3: u32 = 8;
pub const GPIO_IDR_ID4_Pos: u32 = 4;
pub const GPIO_IDR_ID4_Msk: u32 = 16;
pub const GPIO_IDR_ID4: u32 = 16;
pub const GPIO_IDR_ID5_Pos: u32 = 5;
pub const GPIO_IDR_ID5_Msk: u32 = 32;
pub const GPIO_IDR_ID5: u32 = 32;
pub const GPIO_IDR_ID6_Pos: u32 = 6;
pub const GPIO_IDR_ID6_Msk: u32 = 64;
pub const GPIO_IDR_ID6: u32 = 64;
pub const GPIO_IDR_ID7_Pos: u32 = 7;
pub const GPIO_IDR_ID7_Msk: u32 = 128;
pub const GPIO_IDR_ID7: u32 = 128;
pub const GPIO_IDR_ID8_Pos: u32 = 8;
pub const GPIO_IDR_ID8_Msk: u32 = 256;
pub const GPIO_IDR_ID8: u32 = 256;
pub const GPIO_IDR_ID9_Pos: u32 = 9;
pub const GPIO_IDR_ID9_Msk: u32 = 512;
pub const GPIO_IDR_ID9: u32 = 512;
pub const GPIO_IDR_ID10_Pos: u32 = 10;
pub const GPIO_IDR_ID10_Msk: u32 = 1024;
pub const GPIO_IDR_ID10: u32 = 1024;
pub const GPIO_IDR_ID11_Pos: u32 = 11;
pub const GPIO_IDR_ID11_Msk: u32 = 2048;
pub const GPIO_IDR_ID11: u32 = 2048;
pub const GPIO_IDR_ID12_Pos: u32 = 12;
pub const GPIO_IDR_ID12_Msk: u32 = 4096;
pub const GPIO_IDR_ID12: u32 = 4096;
pub const GPIO_IDR_ID13_Pos: u32 = 13;
pub const GPIO_IDR_ID13_Msk: u32 = 8192;
pub const GPIO_IDR_ID13: u32 = 8192;
pub const GPIO_IDR_ID14_Pos: u32 = 14;
pub const GPIO_IDR_ID14_Msk: u32 = 16384;
pub const GPIO_IDR_ID14: u32 = 16384;
pub const GPIO_IDR_ID15_Pos: u32 = 15;
pub const GPIO_IDR_ID15_Msk: u32 = 32768;
pub const GPIO_IDR_ID15: u32 = 32768;
pub const GPIO_ODR_OD0_Pos: u32 = 0;
pub const GPIO_ODR_OD0_Msk: u32 = 1;
pub const GPIO_ODR_OD0: u32 = 1;
pub const GPIO_ODR_OD1_Pos: u32 = 1;
pub const GPIO_ODR_OD1_Msk: u32 = 2;
pub const GPIO_ODR_OD1: u32 = 2;
pub const GPIO_ODR_OD2_Pos: u32 = 2;
pub const GPIO_ODR_OD2_Msk: u32 = 4;
pub const GPIO_ODR_OD2: u32 = 4;
pub const GPIO_ODR_OD3_Pos: u32 = 3;
pub const GPIO_ODR_OD3_Msk: u32 = 8;
pub const GPIO_ODR_OD3: u32 = 8;
pub const GPIO_ODR_OD4_Pos: u32 = 4;
pub const GPIO_ODR_OD4_Msk: u32 = 16;
pub const GPIO_ODR_OD4: u32 = 16;
pub const GPIO_ODR_OD5_Pos: u32 = 5;
pub const GPIO_ODR_OD5_Msk: u32 = 32;
pub const GPIO_ODR_OD5: u32 = 32;
pub const GPIO_ODR_OD6_Pos: u32 = 6;
pub const GPIO_ODR_OD6_Msk: u32 = 64;
pub const GPIO_ODR_OD6: u32 = 64;
pub const GPIO_ODR_OD7_Pos: u32 = 7;
pub const GPIO_ODR_OD7_Msk: u32 = 128;
pub const GPIO_ODR_OD7: u32 = 128;
pub const GPIO_ODR_OD8_Pos: u32 = 8;
pub const GPIO_ODR_OD8_Msk: u32 = 256;
pub const GPIO_ODR_OD8: u32 = 256;
pub const GPIO_ODR_OD9_Pos: u32 = 9;
pub const GPIO_ODR_OD9_Msk: u32 = 512;
pub const GPIO_ODR_OD9: u32 = 512;
pub const GPIO_ODR_OD10_Pos: u32 = 10;
pub const GPIO_ODR_OD10_Msk: u32 = 1024;
pub const GPIO_ODR_OD10: u32 = 1024;
pub const GPIO_ODR_OD11_Pos: u32 = 11;
pub const GPIO_ODR_OD11_Msk: u32 = 2048;
pub const GPIO_ODR_OD11: u32 = 2048;
pub const GPIO_ODR_OD12_Pos: u32 = 12;
pub const GPIO_ODR_OD12_Msk: u32 = 4096;
pub const GPIO_ODR_OD12: u32 = 4096;
pub const GPIO_ODR_OD13_Pos: u32 = 13;
pub const GPIO_ODR_OD13_Msk: u32 = 8192;
pub const GPIO_ODR_OD13: u32 = 8192;
pub const GPIO_ODR_OD14_Pos: u32 = 14;
pub const GPIO_ODR_OD14_Msk: u32 = 16384;
pub const GPIO_ODR_OD14: u32 = 16384;
pub const GPIO_ODR_OD15_Pos: u32 = 15;
pub const GPIO_ODR_OD15_Msk: u32 = 32768;
pub const GPIO_ODR_OD15: u32 = 32768;
pub const GPIO_BSRR_BS_0: u32 = 1;
pub const GPIO_BSRR_BS_1: u32 = 2;
pub const GPIO_BSRR_BS_2: u32 = 4;
pub const GPIO_BSRR_BS_3: u32 = 8;
pub const GPIO_BSRR_BS_4: u32 = 16;
pub const GPIO_BSRR_BS_5: u32 = 32;
pub const GPIO_BSRR_BS_6: u32 = 64;
pub const GPIO_BSRR_BS_7: u32 = 128;
pub const GPIO_BSRR_BS_8: u32 = 256;
pub const GPIO_BSRR_BS_9: u32 = 512;
pub const GPIO_BSRR_BS_10: u32 = 1024;
pub const GPIO_BSRR_BS_11: u32 = 2048;
pub const GPIO_BSRR_BS_12: u32 = 4096;
pub const GPIO_BSRR_BS_13: u32 = 8192;
pub const GPIO_BSRR_BS_14: u32 = 16384;
pub const GPIO_BSRR_BS_15: u32 = 32768;
pub const GPIO_BSRR_BR_0: u32 = 65536;
pub const GPIO_BSRR_BR_1: u32 = 131072;
pub const GPIO_BSRR_BR_2: u32 = 262144;
pub const GPIO_BSRR_BR_3: u32 = 524288;
pub const GPIO_BSRR_BR_4: u32 = 1048576;
pub const GPIO_BSRR_BR_5: u32 = 2097152;
pub const GPIO_BSRR_BR_6: u32 = 4194304;
pub const GPIO_BSRR_BR_7: u32 = 8388608;
pub const GPIO_BSRR_BR_8: u32 = 16777216;
pub const GPIO_BSRR_BR_9: u32 = 33554432;
pub const GPIO_BSRR_BR_10: u32 = 67108864;
pub const GPIO_BSRR_BR_11: u32 = 134217728;
pub const GPIO_BSRR_BR_12: u32 = 268435456;
pub const GPIO_BSRR_BR_13: u32 = 536870912;
pub const GPIO_BSRR_BR_14: u32 = 1073741824;
pub const GPIO_BSRR_BR_15: u32 = 2147483648;
pub const GPIO_LCKR_LCK0_Pos: u32 = 0;
pub const GPIO_LCKR_LCK0_Msk: u32 = 1;
pub const GPIO_LCKR_LCK0: u32 = 1;
pub const GPIO_LCKR_LCK1_Pos: u32 = 1;
pub const GPIO_LCKR_LCK1_Msk: u32 = 2;
pub const GPIO_LCKR_LCK1: u32 = 2;
pub const GPIO_LCKR_LCK2_Pos: u32 = 2;
pub const GPIO_LCKR_LCK2_Msk: u32 = 4;
pub const GPIO_LCKR_LCK2: u32 = 4;
pub const GPIO_LCKR_LCK3_Pos: u32 = 3;
pub const GPIO_LCKR_LCK3_Msk: u32 = 8;
pub const GPIO_LCKR_LCK3: u32 = 8;
pub const GPIO_LCKR_LCK4_Pos: u32 = 4;
pub const GPIO_LCKR_LCK4_Msk: u32 = 16;
pub const GPIO_LCKR_LCK4: u32 = 16;
pub const GPIO_LCKR_LCK5_Pos: u32 = 5;
pub const GPIO_LCKR_LCK5_Msk: u32 = 32;
pub const GPIO_LCKR_LCK5: u32 = 32;
pub const GPIO_LCKR_LCK6_Pos: u32 = 6;
pub const GPIO_LCKR_LCK6_Msk: u32 = 64;
pub const GPIO_LCKR_LCK6: u32 = 64;
pub const GPIO_LCKR_LCK7_Pos: u32 = 7;
pub const GPIO_LCKR_LCK7_Msk: u32 = 128;
pub const GPIO_LCKR_LCK7: u32 = 128;
pub const GPIO_LCKR_LCK8_Pos: u32 = 8;
pub const GPIO_LCKR_LCK8_Msk: u32 = 256;
pub const GPIO_LCKR_LCK8: u32 = 256;
pub const GPIO_LCKR_LCK9_Pos: u32 = 9;
pub const GPIO_LCKR_LCK9_Msk: u32 = 512;
pub const GPIO_LCKR_LCK9: u32 = 512;
pub const GPIO_LCKR_LCK10_Pos: u32 = 10;
pub const GPIO_LCKR_LCK10_Msk: u32 = 1024;
pub const GPIO_LCKR_LCK10: u32 = 1024;
pub const GPIO_LCKR_LCK11_Pos: u32 = 11;
pub const GPIO_LCKR_LCK11_Msk: u32 = 2048;
pub const GPIO_LCKR_LCK11: u32 = 2048;
pub const GPIO_LCKR_LCK12_Pos: u32 = 12;
pub const GPIO_LCKR_LCK12_Msk: u32 = 4096;
pub const GPIO_LCKR_LCK12: u32 = 4096;
pub const GPIO_LCKR_LCK13_Pos: u32 = 13;
pub const GPIO_LCKR_LCK13_Msk: u32 = 8192;
pub const GPIO_LCKR_LCK13: u32 = 8192;
pub const GPIO_LCKR_LCK14_Pos: u32 = 14;
pub const GPIO_LCKR_LCK14_Msk: u32 = 16384;
pub const GPIO_LCKR_LCK14: u32 = 16384;
pub const GPIO_LCKR_LCK15_Pos: u32 = 15;
pub const GPIO_LCKR_LCK15_Msk: u32 = 32768;
pub const GPIO_LCKR_LCK15: u32 = 32768;
pub const GPIO_LCKR_LCKK_Pos: u32 = 16;
pub const GPIO_LCKR_LCKK_Msk: u32 = 65536;
pub const GPIO_LCKR_LCKK: u32 = 65536;
pub const GPIO_AFRL_AFSEL0_Pos: u32 = 0;
pub const GPIO_AFRL_AFSEL0_Msk: u32 = 15;
pub const GPIO_AFRL_AFSEL0: u32 = 15;
pub const GPIO_AFRL_AFSEL1_Pos: u32 = 4;
pub const GPIO_AFRL_AFSEL1_Msk: u32 = 240;
pub const GPIO_AFRL_AFSEL1: u32 = 240;
pub const GPIO_AFRL_AFSEL2_Pos: u32 = 8;
pub const GPIO_AFRL_AFSEL2_Msk: u32 = 3840;
pub const GPIO_AFRL_AFSEL2: u32 = 3840;
pub const GPIO_AFRL_AFSEL3_Pos: u32 = 12;
pub const GPIO_AFRL_AFSEL3_Msk: u32 = 61440;
pub const GPIO_AFRL_AFSEL3: u32 = 61440;
pub const GPIO_AFRL_AFSEL4_Pos: u32 = 16;
pub const GPIO_AFRL_AFSEL4_Msk: u32 = 983040;
pub const GPIO_AFRL_AFSEL4: u32 = 983040;
pub const GPIO_AFRL_AFSEL5_Pos: u32 = 20;
pub const GPIO_AFRL_AFSEL5_Msk: u32 = 15728640;
pub const GPIO_AFRL_AFSEL5: u32 = 15728640;
pub const GPIO_AFRL_AFSEL6_Pos: u32 = 24;
pub const GPIO_AFRL_AFSEL6_Msk: u32 = 251658240;
pub const GPIO_AFRL_AFSEL6: u32 = 251658240;
pub const GPIO_AFRL_AFSEL7_Pos: u32 = 28;
pub const GPIO_AFRL_AFSEL7_Msk: u32 = 4026531840;
pub const GPIO_AFRL_AFSEL7: u32 = 4026531840;
pub const GPIO_AFRH_AFSEL8_Pos: u32 = 0;
pub const GPIO_AFRH_AFSEL8_Msk: u32 = 15;
pub const GPIO_AFRH_AFSEL8: u32 = 15;
pub const GPIO_AFRH_AFSEL9_Pos: u32 = 4;
pub const GPIO_AFRH_AFSEL9_Msk: u32 = 240;
pub const GPIO_AFRH_AFSEL9: u32 = 240;
pub const GPIO_AFRH_AFSEL10_Pos: u32 = 8;
pub const GPIO_AFRH_AFSEL10_Msk: u32 = 3840;
pub const GPIO_AFRH_AFSEL10: u32 = 3840;
pub const GPIO_AFRH_AFSEL11_Pos: u32 = 12;
pub const GPIO_AFRH_AFSEL11_Msk: u32 = 61440;
pub const GPIO_AFRH_AFSEL11: u32 = 61440;
pub const GPIO_AFRH_AFSEL12_Pos: u32 = 16;
pub const GPIO_AFRH_AFSEL12_Msk: u32 = 983040;
pub const GPIO_AFRH_AFSEL12: u32 = 983040;
pub const GPIO_AFRH_AFSEL13_Pos: u32 = 20;
pub const GPIO_AFRH_AFSEL13_Msk: u32 = 15728640;
pub const GPIO_AFRH_AFSEL13: u32 = 15728640;
pub const GPIO_AFRH_AFSEL14_Pos: u32 = 24;
pub const GPIO_AFRH_AFSEL14_Msk: u32 = 251658240;
pub const GPIO_AFRH_AFSEL14: u32 = 251658240;
pub const GPIO_AFRH_AFSEL15_Pos: u32 = 28;
pub const GPIO_AFRH_AFSEL15_Msk: u32 = 4026531840;
pub const GPIO_AFRH_AFSEL15: u32 = 4026531840;
pub const GPIO_BRR_BR_0: u32 = 1;
pub const GPIO_BRR_BR_1: u32 = 2;
pub const GPIO_BRR_BR_2: u32 = 4;
pub const GPIO_BRR_BR_3: u32 = 8;
pub const GPIO_BRR_BR_4: u32 = 16;
pub const GPIO_BRR_BR_5: u32 = 32;
pub const GPIO_BRR_BR_6: u32 = 64;
pub const GPIO_BRR_BR_7: u32 = 128;
pub const GPIO_BRR_BR_8: u32 = 256;
pub const GPIO_BRR_BR_9: u32 = 512;
pub const GPIO_BRR_BR_10: u32 = 1024;
pub const GPIO_BRR_BR_11: u32 = 2048;
pub const GPIO_BRR_BR_12: u32 = 4096;
pub const GPIO_BRR_BR_13: u32 = 8192;
pub const GPIO_BRR_BR_14: u32 = 16384;
pub const GPIO_BRR_BR_15: u32 = 32768;
pub const I2C_CR1_PE_Pos: u32 = 0;
pub const I2C_CR1_PE_Msk: u32 = 1;
pub const I2C_CR1_PE: u32 = 1;
pub const I2C_CR1_TXIE_Pos: u32 = 1;
pub const I2C_CR1_TXIE_Msk: u32 = 2;
pub const I2C_CR1_TXIE: u32 = 2;
pub const I2C_CR1_RXIE_Pos: u32 = 2;
pub const I2C_CR1_RXIE_Msk: u32 = 4;
pub const I2C_CR1_RXIE: u32 = 4;
pub const I2C_CR1_ADDRIE_Pos: u32 = 3;
pub const I2C_CR1_ADDRIE_Msk: u32 = 8;
pub const I2C_CR1_ADDRIE: u32 = 8;
pub const I2C_CR1_NACKIE_Pos: u32 = 4;
pub const I2C_CR1_NACKIE_Msk: u32 = 16;
pub const I2C_CR1_NACKIE: u32 = 16;
pub const I2C_CR1_STOPIE_Pos: u32 = 5;
pub const I2C_CR1_STOPIE_Msk: u32 = 32;
pub const I2C_CR1_STOPIE: u32 = 32;
pub const I2C_CR1_TCIE_Pos: u32 = 6;
pub const I2C_CR1_TCIE_Msk: u32 = 64;
pub const I2C_CR1_TCIE: u32 = 64;
pub const I2C_CR1_ERRIE_Pos: u32 = 7;
pub const I2C_CR1_ERRIE_Msk: u32 = 128;
pub const I2C_CR1_ERRIE: u32 = 128;
pub const I2C_CR1_DNF_Pos: u32 = 8;
pub const I2C_CR1_DNF_Msk: u32 = 3840;
pub const I2C_CR1_DNF: u32 = 3840;
pub const I2C_CR1_ANFOFF_Pos: u32 = 12;
pub const I2C_CR1_ANFOFF_Msk: u32 = 4096;
pub const I2C_CR1_ANFOFF: u32 = 4096;
pub const I2C_CR1_TXDMAEN_Pos: u32 = 14;
pub const I2C_CR1_TXDMAEN_Msk: u32 = 16384;
pub const I2C_CR1_TXDMAEN: u32 = 16384;
pub const I2C_CR1_RXDMAEN_Pos: u32 = 15;
pub const I2C_CR1_RXDMAEN_Msk: u32 = 32768;
pub const I2C_CR1_RXDMAEN: u32 = 32768;
pub const I2C_CR1_SBC_Pos: u32 = 16;
pub const I2C_CR1_SBC_Msk: u32 = 65536;
pub const I2C_CR1_SBC: u32 = 65536;
pub const I2C_CR1_NOSTRETCH_Pos: u32 = 17;
pub const I2C_CR1_NOSTRETCH_Msk: u32 = 131072;
pub const I2C_CR1_NOSTRETCH: u32 = 131072;
pub const I2C_CR1_WUPEN_Pos: u32 = 18;
pub const I2C_CR1_WUPEN_Msk: u32 = 262144;
pub const I2C_CR1_WUPEN: u32 = 262144;
pub const I2C_CR1_GCEN_Pos: u32 = 19;
pub const I2C_CR1_GCEN_Msk: u32 = 524288;
pub const I2C_CR1_GCEN: u32 = 524288;
pub const I2C_CR1_SMBHEN_Pos: u32 = 20;
pub const I2C_CR1_SMBHEN_Msk: u32 = 1048576;
pub const I2C_CR1_SMBHEN: u32 = 1048576;
pub const I2C_CR1_SMBDEN_Pos: u32 = 21;
pub const I2C_CR1_SMBDEN_Msk: u32 = 2097152;
pub const I2C_CR1_SMBDEN: u32 = 2097152;
pub const I2C_CR1_ALERTEN_Pos: u32 = 22;
pub const I2C_CR1_ALERTEN_Msk: u32 = 4194304;
pub const I2C_CR1_ALERTEN: u32 = 4194304;
pub const I2C_CR1_PECEN_Pos: u32 = 23;
pub const I2C_CR1_PECEN_Msk: u32 = 8388608;
pub const I2C_CR1_PECEN: u32 = 8388608;
pub const I2C_CR2_SADD_Pos: u32 = 0;
pub const I2C_CR2_SADD_Msk: u32 = 1023;
pub const I2C_CR2_SADD: u32 = 1023;
pub const I2C_CR2_RD_WRN_Pos: u32 = 10;
pub const I2C_CR2_RD_WRN_Msk: u32 = 1024;
pub const I2C_CR2_RD_WRN: u32 = 1024;
pub const I2C_CR2_ADD10_Pos: u32 = 11;
pub const I2C_CR2_ADD10_Msk: u32 = 2048;
pub const I2C_CR2_ADD10: u32 = 2048;
pub const I2C_CR2_HEAD10R_Pos: u32 = 12;
pub const I2C_CR2_HEAD10R_Msk: u32 = 4096;
pub const I2C_CR2_HEAD10R: u32 = 4096;
pub const I2C_CR2_START_Pos: u32 = 13;
pub const I2C_CR2_START_Msk: u32 = 8192;
pub const I2C_CR2_START: u32 = 8192;
pub const I2C_CR2_STOP_Pos: u32 = 14;
pub const I2C_CR2_STOP_Msk: u32 = 16384;
pub const I2C_CR2_STOP: u32 = 16384;
pub const I2C_CR2_NACK_Pos: u32 = 15;
pub const I2C_CR2_NACK_Msk: u32 = 32768;
pub const I2C_CR2_NACK: u32 = 32768;
pub const I2C_CR2_NBYTES_Pos: u32 = 16;
pub const I2C_CR2_NBYTES_Msk: u32 = 16711680;
pub const I2C_CR2_NBYTES: u32 = 16711680;
pub const I2C_CR2_RELOAD_Pos: u32 = 24;
pub const I2C_CR2_RELOAD_Msk: u32 = 16777216;
pub const I2C_CR2_RELOAD: u32 = 16777216;
pub const I2C_CR2_AUTOEND_Pos: u32 = 25;
pub const I2C_CR2_AUTOEND_Msk: u32 = 33554432;
pub const I2C_CR2_AUTOEND: u32 = 33554432;
pub const I2C_CR2_PECBYTE_Pos: u32 = 26;
pub const I2C_CR2_PECBYTE_Msk: u32 = 67108864;
pub const I2C_CR2_PECBYTE: u32 = 67108864;
pub const I2C_OAR1_OA1_Pos: u32 = 0;
pub const I2C_OAR1_OA1_Msk: u32 = 1023;
pub const I2C_OAR1_OA1: u32 = 1023;
pub const I2C_OAR1_OA1MODE_Pos: u32 = 10;
pub const I2C_OAR1_OA1MODE_Msk: u32 = 1024;
pub const I2C_OAR1_OA1MODE: u32 = 1024;
pub const I2C_OAR1_OA1EN_Pos: u32 = 15;
pub const I2C_OAR1_OA1EN_Msk: u32 = 32768;
pub const I2C_OAR1_OA1EN: u32 = 32768;
pub const I2C_OAR2_OA2_Pos: u32 = 1;
pub const I2C_OAR2_OA2_Msk: u32 = 254;
pub const I2C_OAR2_OA2: u32 = 254;
pub const I2C_OAR2_OA2MSK_Pos: u32 = 8;
pub const I2C_OAR2_OA2MSK_Msk: u32 = 1792;
pub const I2C_OAR2_OA2MSK: u32 = 1792;
pub const I2C_OAR2_OA2NOMASK: u32 = 0;
pub const I2C_OAR2_OA2MASK01_Pos: u32 = 8;
pub const I2C_OAR2_OA2MASK01_Msk: u32 = 256;
pub const I2C_OAR2_OA2MASK01: u32 = 256;
pub const I2C_OAR2_OA2MASK02_Pos: u32 = 9;
pub const I2C_OAR2_OA2MASK02_Msk: u32 = 512;
pub const I2C_OAR2_OA2MASK02: u32 = 512;
pub const I2C_OAR2_OA2MASK03_Pos: u32 = 8;
pub const I2C_OAR2_OA2MASK03_Msk: u32 = 768;
pub const I2C_OAR2_OA2MASK03: u32 = 768;
pub const I2C_OAR2_OA2MASK04_Pos: u32 = 10;
pub const I2C_OAR2_OA2MASK04_Msk: u32 = 1024;
pub const I2C_OAR2_OA2MASK04: u32 = 1024;
pub const I2C_OAR2_OA2MASK05_Pos: u32 = 8;
pub const I2C_OAR2_OA2MASK05_Msk: u32 = 1280;
pub const I2C_OAR2_OA2MASK05: u32 = 1280;
pub const I2C_OAR2_OA2MASK06_Pos: u32 = 9;
pub const I2C_OAR2_OA2MASK06_Msk: u32 = 1536;
pub const I2C_OAR2_OA2MASK06: u32 = 1536;
pub const I2C_OAR2_OA2MASK07_Pos: u32 = 8;
pub const I2C_OAR2_OA2MASK07_Msk: u32 = 1792;
pub const I2C_OAR2_OA2MASK07: u32 = 1792;
pub const I2C_OAR2_OA2EN_Pos: u32 = 15;
pub const I2C_OAR2_OA2EN_Msk: u32 = 32768;
pub const I2C_OAR2_OA2EN: u32 = 32768;
pub const I2C_TIMINGR_SCLL_Pos: u32 = 0;
pub const I2C_TIMINGR_SCLL_Msk: u32 = 255;
pub const I2C_TIMINGR_SCLL: u32 = 255;
pub const I2C_TIMINGR_SCLH_Pos: u32 = 8;
pub const I2C_TIMINGR_SCLH_Msk: u32 = 65280;
pub const I2C_TIMINGR_SCLH: u32 = 65280;
pub const I2C_TIMINGR_SDADEL_Pos: u32 = 16;
pub const I2C_TIMINGR_SDADEL_Msk: u32 = 983040;
pub const I2C_TIMINGR_SDADEL: u32 = 983040;
pub const I2C_TIMINGR_SCLDEL_Pos: u32 = 20;
pub const I2C_TIMINGR_SCLDEL_Msk: u32 = 15728640;
pub const I2C_TIMINGR_SCLDEL: u32 = 15728640;
pub const I2C_TIMINGR_PRESC_Pos: u32 = 28;
pub const I2C_TIMINGR_PRESC_Msk: u32 = 4026531840;
pub const I2C_TIMINGR_PRESC: u32 = 4026531840;
pub const I2C_TIMEOUTR_TIMEOUTA_Pos: u32 = 0;
pub const I2C_TIMEOUTR_TIMEOUTA_Msk: u32 = 4095;
pub const I2C_TIMEOUTR_TIMEOUTA: u32 = 4095;
pub const I2C_TIMEOUTR_TIDLE_Pos: u32 = 12;
pub const I2C_TIMEOUTR_TIDLE_Msk: u32 = 4096;
pub const I2C_TIMEOUTR_TIDLE: u32 = 4096;
pub const I2C_TIMEOUTR_TIMOUTEN_Pos: u32 = 15;
pub const I2C_TIMEOUTR_TIMOUTEN_Msk: u32 = 32768;
pub const I2C_TIMEOUTR_TIMOUTEN: u32 = 32768;
pub const I2C_TIMEOUTR_TIMEOUTB_Pos: u32 = 16;
pub const I2C_TIMEOUTR_TIMEOUTB_Msk: u32 = 268369920;
pub const I2C_TIMEOUTR_TIMEOUTB: u32 = 268369920;
pub const I2C_TIMEOUTR_TEXTEN_Pos: u32 = 31;
pub const I2C_TIMEOUTR_TEXTEN_Msk: u32 = 2147483648;
pub const I2C_TIMEOUTR_TEXTEN: u32 = 2147483648;
pub const I2C_ISR_TXE_Pos: u32 = 0;
pub const I2C_ISR_TXE_Msk: u32 = 1;
pub const I2C_ISR_TXE: u32 = 1;
pub const I2C_ISR_TXIS_Pos: u32 = 1;
pub const I2C_ISR_TXIS_Msk: u32 = 2;
pub const I2C_ISR_TXIS: u32 = 2;
pub const I2C_ISR_RXNE_Pos: u32 = 2;
pub const I2C_ISR_RXNE_Msk: u32 = 4;
pub const I2C_ISR_RXNE: u32 = 4;
pub const I2C_ISR_ADDR_Pos: u32 = 3;
pub const I2C_ISR_ADDR_Msk: u32 = 8;
pub const I2C_ISR_ADDR: u32 = 8;
pub const I2C_ISR_NACKF_Pos: u32 = 4;
pub const I2C_ISR_NACKF_Msk: u32 = 16;
pub const I2C_ISR_NACKF: u32 = 16;
pub const I2C_ISR_STOPF_Pos: u32 = 5;
pub const I2C_ISR_STOPF_Msk: u32 = 32;
pub const I2C_ISR_STOPF: u32 = 32;
pub const I2C_ISR_TC_Pos: u32 = 6;
pub const I2C_ISR_TC_Msk: u32 = 64;
pub const I2C_ISR_TC: u32 = 64;
pub const I2C_ISR_TCR_Pos: u32 = 7;
pub const I2C_ISR_TCR_Msk: u32 = 128;
pub const I2C_ISR_TCR: u32 = 128;
pub const I2C_ISR_BERR_Pos: u32 = 8;
pub const I2C_ISR_BERR_Msk: u32 = 256;
pub const I2C_ISR_BERR: u32 = 256;
pub const I2C_ISR_ARLO_Pos: u32 = 9;
pub const I2C_ISR_ARLO_Msk: u32 = 512;
pub const I2C_ISR_ARLO: u32 = 512;
pub const I2C_ISR_OVR_Pos: u32 = 10;
pub const I2C_ISR_OVR_Msk: u32 = 1024;
pub const I2C_ISR_OVR: u32 = 1024;
pub const I2C_ISR_PECERR_Pos: u32 = 11;
pub const I2C_ISR_PECERR_Msk: u32 = 2048;
pub const I2C_ISR_PECERR: u32 = 2048;
pub const I2C_ISR_TIMEOUT_Pos: u32 = 12;
pub const I2C_ISR_TIMEOUT_Msk: u32 = 4096;
pub const I2C_ISR_TIMEOUT: u32 = 4096;
pub const I2C_ISR_ALERT_Pos: u32 = 13;
pub const I2C_ISR_ALERT_Msk: u32 = 8192;
pub const I2C_ISR_ALERT: u32 = 8192;
pub const I2C_ISR_BUSY_Pos: u32 = 15;
pub const I2C_ISR_BUSY_Msk: u32 = 32768;
pub const I2C_ISR_BUSY: u32 = 32768;
pub const I2C_ISR_DIR_Pos: u32 = 16;
pub const I2C_ISR_DIR_Msk: u32 = 65536;
pub const I2C_ISR_DIR: u32 = 65536;
pub const I2C_ISR_ADDCODE_Pos: u32 = 17;
pub const I2C_ISR_ADDCODE_Msk: u32 = 16646144;
pub const I2C_ISR_ADDCODE: u32 = 16646144;
pub const I2C_ICR_ADDRCF_Pos: u32 = 3;
pub const I2C_ICR_ADDRCF_Msk: u32 = 8;
pub const I2C_ICR_ADDRCF: u32 = 8;
pub const I2C_ICR_NACKCF_Pos: u32 = 4;
pub const I2C_ICR_NACKCF_Msk: u32 = 16;
pub const I2C_ICR_NACKCF: u32 = 16;
pub const I2C_ICR_STOPCF_Pos: u32 = 5;
pub const I2C_ICR_STOPCF_Msk: u32 = 32;
pub const I2C_ICR_STOPCF: u32 = 32;
pub const I2C_ICR_BERRCF_Pos: u32 = 8;
pub const I2C_ICR_BERRCF_Msk: u32 = 256;
pub const I2C_ICR_BERRCF: u32 = 256;
pub const I2C_ICR_ARLOCF_Pos: u32 = 9;
pub const I2C_ICR_ARLOCF_Msk: u32 = 512;
pub const I2C_ICR_ARLOCF: u32 = 512;
pub const I2C_ICR_OVRCF_Pos: u32 = 10;
pub const I2C_ICR_OVRCF_Msk: u32 = 1024;
pub const I2C_ICR_OVRCF: u32 = 1024;
pub const I2C_ICR_PECCF_Pos: u32 = 11;
pub const I2C_ICR_PECCF_Msk: u32 = 2048;
pub const I2C_ICR_PECCF: u32 = 2048;
pub const I2C_ICR_TIMOUTCF_Pos: u32 = 12;
pub const I2C_ICR_TIMOUTCF_Msk: u32 = 4096;
pub const I2C_ICR_TIMOUTCF: u32 = 4096;
pub const I2C_ICR_ALERTCF_Pos: u32 = 13;
pub const I2C_ICR_ALERTCF_Msk: u32 = 8192;
pub const I2C_ICR_ALERTCF: u32 = 8192;
pub const I2C_PECR_PEC_Pos: u32 = 0;
pub const I2C_PECR_PEC_Msk: u32 = 255;
pub const I2C_PECR_PEC: u32 = 255;
pub const I2C_RXDR_RXDATA_Pos: u32 = 0;
pub const I2C_RXDR_RXDATA_Msk: u32 = 255;
pub const I2C_RXDR_RXDATA: u32 = 255;
pub const I2C_TXDR_TXDATA_Pos: u32 = 0;
pub const I2C_TXDR_TXDATA_Msk: u32 = 255;
pub const I2C_TXDR_TXDATA: u32 = 255;
pub const IWDG_KR_KEY_Pos: u32 = 0;
pub const IWDG_KR_KEY_Msk: u32 = 65535;
pub const IWDG_KR_KEY: u32 = 65535;
pub const IWDG_PR_PR_Pos: u32 = 0;
pub const IWDG_PR_PR_Msk: u32 = 7;
pub const IWDG_PR_PR: u32 = 7;
pub const IWDG_PR_PR_0: u32 = 1;
pub const IWDG_PR_PR_1: u32 = 2;
pub const IWDG_PR_PR_2: u32 = 4;
pub const IWDG_RLR_RL_Pos: u32 = 0;
pub const IWDG_RLR_RL_Msk: u32 = 4095;
pub const IWDG_RLR_RL: u32 = 4095;
pub const IWDG_SR_PVU_Pos: u32 = 0;
pub const IWDG_SR_PVU_Msk: u32 = 1;
pub const IWDG_SR_PVU: u32 = 1;
pub const IWDG_SR_RVU_Pos: u32 = 1;
pub const IWDG_SR_RVU_Msk: u32 = 2;
pub const IWDG_SR_RVU: u32 = 2;
pub const IWDG_SR_WVU_Pos: u32 = 2;
pub const IWDG_SR_WVU_Msk: u32 = 4;
pub const IWDG_SR_WVU: u32 = 4;
pub const IWDG_WINR_WIN_Pos: u32 = 0;
pub const IWDG_WINR_WIN_Msk: u32 = 4095;
pub const IWDG_WINR_WIN: u32 = 4095;
pub const LPTIM_ISR_CMPM_Pos: u32 = 0;
pub const LPTIM_ISR_CMPM_Msk: u32 = 1;
pub const LPTIM_ISR_CMPM: u32 = 1;
pub const LPTIM_ISR_ARRM_Pos: u32 = 1;
pub const LPTIM_ISR_ARRM_Msk: u32 = 2;
pub const LPTIM_ISR_ARRM: u32 = 2;
pub const LPTIM_ISR_EXTTRIG_Pos: u32 = 2;
pub const LPTIM_ISR_EXTTRIG_Msk: u32 = 4;
pub const LPTIM_ISR_EXTTRIG: u32 = 4;
pub const LPTIM_ISR_CMPOK_Pos: u32 = 3;
pub const LPTIM_ISR_CMPOK_Msk: u32 = 8;
pub const LPTIM_ISR_CMPOK: u32 = 8;
pub const LPTIM_ISR_ARROK_Pos: u32 = 4;
pub const LPTIM_ISR_ARROK_Msk: u32 = 16;
pub const LPTIM_ISR_ARROK: u32 = 16;
pub const LPTIM_ISR_UP_Pos: u32 = 5;
pub const LPTIM_ISR_UP_Msk: u32 = 32;
pub const LPTIM_ISR_UP: u32 = 32;
pub const LPTIM_ISR_DOWN_Pos: u32 = 6;
pub const LPTIM_ISR_DOWN_Msk: u32 = 64;
pub const LPTIM_ISR_DOWN: u32 = 64;
pub const LPTIM_ICR_CMPMCF_Pos: u32 = 0;
pub const LPTIM_ICR_CMPMCF_Msk: u32 = 1;
pub const LPTIM_ICR_CMPMCF: u32 = 1;
pub const LPTIM_ICR_ARRMCF_Pos: u32 = 1;
pub const LPTIM_ICR_ARRMCF_Msk: u32 = 2;
pub const LPTIM_ICR_ARRMCF: u32 = 2;
pub const LPTIM_ICR_EXTTRIGCF_Pos: u32 = 2;
pub const LPTIM_ICR_EXTTRIGCF_Msk: u32 = 4;
pub const LPTIM_ICR_EXTTRIGCF: u32 = 4;
pub const LPTIM_ICR_CMPOKCF_Pos: u32 = 3;
pub const LPTIM_ICR_CMPOKCF_Msk: u32 = 8;
pub const LPTIM_ICR_CMPOKCF: u32 = 8;
pub const LPTIM_ICR_ARROKCF_Pos: u32 = 4;
pub const LPTIM_ICR_ARROKCF_Msk: u32 = 16;
pub const LPTIM_ICR_ARROKCF: u32 = 16;
pub const LPTIM_ICR_UPCF_Pos: u32 = 5;
pub const LPTIM_ICR_UPCF_Msk: u32 = 32;
pub const LPTIM_ICR_UPCF: u32 = 32;
pub const LPTIM_ICR_DOWNCF_Pos: u32 = 6;
pub const LPTIM_ICR_DOWNCF_Msk: u32 = 64;
pub const LPTIM_ICR_DOWNCF: u32 = 64;
pub const LPTIM_IER_CMPMIE_Pos: u32 = 0;
pub const LPTIM_IER_CMPMIE_Msk: u32 = 1;
pub const LPTIM_IER_CMPMIE: u32 = 1;
pub const LPTIM_IER_ARRMIE_Pos: u32 = 1;
pub const LPTIM_IER_ARRMIE_Msk: u32 = 2;
pub const LPTIM_IER_ARRMIE: u32 = 2;
pub const LPTIM_IER_EXTTRIGIE_Pos: u32 = 2;
pub const LPTIM_IER_EXTTRIGIE_Msk: u32 = 4;
pub const LPTIM_IER_EXTTRIGIE: u32 = 4;
pub const LPTIM_IER_CMPOKIE_Pos: u32 = 3;
pub const LPTIM_IER_CMPOKIE_Msk: u32 = 8;
pub const LPTIM_IER_CMPOKIE: u32 = 8;
pub const LPTIM_IER_ARROKIE_Pos: u32 = 4;
pub const LPTIM_IER_ARROKIE_Msk: u32 = 16;
pub const LPTIM_IER_ARROKIE: u32 = 16;
pub const LPTIM_IER_UPIE_Pos: u32 = 5;
pub const LPTIM_IER_UPIE_Msk: u32 = 32;
pub const LPTIM_IER_UPIE: u32 = 32;
pub const LPTIM_IER_DOWNIE_Pos: u32 = 6;
pub const LPTIM_IER_DOWNIE_Msk: u32 = 64;
pub const LPTIM_IER_DOWNIE: u32 = 64;
pub const LPTIM_CFGR_CKSEL_Pos: u32 = 0;
pub const LPTIM_CFGR_CKSEL_Msk: u32 = 1;
pub const LPTIM_CFGR_CKSEL: u32 = 1;
pub const LPTIM_CFGR_CKPOL_Pos: u32 = 1;
pub const LPTIM_CFGR_CKPOL_Msk: u32 = 6;
pub const LPTIM_CFGR_CKPOL: u32 = 6;
pub const LPTIM_CFGR_CKPOL_0: u32 = 2;
pub const LPTIM_CFGR_CKPOL_1: u32 = 4;
pub const LPTIM_CFGR_CKFLT_Pos: u32 = 3;
pub const LPTIM_CFGR_CKFLT_Msk: u32 = 24;
pub const LPTIM_CFGR_CKFLT: u32 = 24;
pub const LPTIM_CFGR_CKFLT_0: u32 = 8;
pub const LPTIM_CFGR_CKFLT_1: u32 = 16;
pub const LPTIM_CFGR_TRGFLT_Pos: u32 = 6;
pub const LPTIM_CFGR_TRGFLT_Msk: u32 = 192;
pub const LPTIM_CFGR_TRGFLT: u32 = 192;
pub const LPTIM_CFGR_TRGFLT_0: u32 = 64;
pub const LPTIM_CFGR_TRGFLT_1: u32 = 128;
pub const LPTIM_CFGR_PRESC_Pos: u32 = 9;
pub const LPTIM_CFGR_PRESC_Msk: u32 = 3584;
pub const LPTIM_CFGR_PRESC: u32 = 3584;
pub const LPTIM_CFGR_PRESC_0: u32 = 512;
pub const LPTIM_CFGR_PRESC_1: u32 = 1024;
pub const LPTIM_CFGR_PRESC_2: u32 = 2048;
pub const LPTIM_CFGR_TRIGSEL_Pos: u32 = 13;
pub const LPTIM_CFGR_TRIGSEL_Msk: u32 = 57344;
pub const LPTIM_CFGR_TRIGSEL: u32 = 57344;
pub const LPTIM_CFGR_TRIGSEL_0: u32 = 8192;
pub const LPTIM_CFGR_TRIGSEL_1: u32 = 16384;
pub const LPTIM_CFGR_TRIGSEL_2: u32 = 32768;
pub const LPTIM_CFGR_TRIGEN_Pos: u32 = 17;
pub const LPTIM_CFGR_TRIGEN_Msk: u32 = 393216;
pub const LPTIM_CFGR_TRIGEN: u32 = 393216;
pub const LPTIM_CFGR_TRIGEN_0: u32 = 131072;
pub const LPTIM_CFGR_TRIGEN_1: u32 = 262144;
pub const LPTIM_CFGR_TIMOUT_Pos: u32 = 19;
pub const LPTIM_CFGR_TIMOUT_Msk: u32 = 524288;
pub const LPTIM_CFGR_TIMOUT: u32 = 524288;
pub const LPTIM_CFGR_WAVE_Pos: u32 = 20;
pub const LPTIM_CFGR_WAVE_Msk: u32 = 1048576;
pub const LPTIM_CFGR_WAVE: u32 = 1048576;
pub const LPTIM_CFGR_WAVPOL_Pos: u32 = 21;
pub const LPTIM_CFGR_WAVPOL_Msk: u32 = 2097152;
pub const LPTIM_CFGR_WAVPOL: u32 = 2097152;
pub const LPTIM_CFGR_PRELOAD_Pos: u32 = 22;
pub const LPTIM_CFGR_PRELOAD_Msk: u32 = 4194304;
pub const LPTIM_CFGR_PRELOAD: u32 = 4194304;
pub const LPTIM_CFGR_COUNTMODE_Pos: u32 = 23;
pub const LPTIM_CFGR_COUNTMODE_Msk: u32 = 8388608;
pub const LPTIM_CFGR_COUNTMODE: u32 = 8388608;
pub const LPTIM_CFGR_ENC_Pos: u32 = 24;
pub const LPTIM_CFGR_ENC_Msk: u32 = 16777216;
pub const LPTIM_CFGR_ENC: u32 = 16777216;
pub const LPTIM_CR_ENABLE_Pos: u32 = 0;
pub const LPTIM_CR_ENABLE_Msk: u32 = 1;
pub const LPTIM_CR_ENABLE: u32 = 1;
pub const LPTIM_CR_SNGSTRT_Pos: u32 = 1;
pub const LPTIM_CR_SNGSTRT_Msk: u32 = 2;
pub const LPTIM_CR_SNGSTRT: u32 = 2;
pub const LPTIM_CR_CNTSTRT_Pos: u32 = 2;
pub const LPTIM_CR_CNTSTRT_Msk: u32 = 4;
pub const LPTIM_CR_CNTSTRT: u32 = 4;
pub const LPTIM_CMP_CMP_Pos: u32 = 0;
pub const LPTIM_CMP_CMP_Msk: u32 = 65535;
pub const LPTIM_CMP_CMP: u32 = 65535;
pub const LPTIM_ARR_ARR_Pos: u32 = 0;
pub const LPTIM_ARR_ARR_Msk: u32 = 65535;
pub const LPTIM_ARR_ARR: u32 = 65535;
pub const LPTIM_CNT_CNT_Pos: u32 = 0;
pub const LPTIM_CNT_CNT_Msk: u32 = 65535;
pub const LPTIM_CNT_CNT: u32 = 65535;
pub const FW_CSSA_ADD_Pos: u32 = 8;
pub const FW_CSSA_ADD_Msk: u32 = 16776960;
pub const FW_CSSA_ADD: u32 = 16776960;
pub const FW_CSL_LENG_Pos: u32 = 8;
pub const FW_CSL_LENG_Msk: u32 = 4194048;
pub const FW_CSL_LENG: u32 = 4194048;
pub const FW_NVDSSA_ADD_Pos: u32 = 8;
pub const FW_NVDSSA_ADD_Msk: u32 = 16776960;
pub const FW_NVDSSA_ADD: u32 = 16776960;
pub const FW_NVDSL_LENG_Pos: u32 = 8;
pub const FW_NVDSL_LENG_Msk: u32 = 4194048;
pub const FW_NVDSL_LENG: u32 = 4194048;
pub const FW_VDSSA_ADD_Pos: u32 = 6;
pub const FW_VDSSA_ADD_Msk: u32 = 65472;
pub const FW_VDSSA_ADD: u32 = 65472;
pub const FW_VDSL_LENG_Pos: u32 = 6;
pub const FW_VDSL_LENG_Msk: u32 = 65472;
pub const FW_VDSL_LENG: u32 = 65472;
pub const FW_CR_FPA_Pos: u32 = 0;
pub const FW_CR_FPA_Msk: u32 = 1;
pub const FW_CR_FPA: u32 = 1;
pub const FW_CR_VDS_Pos: u32 = 1;
pub const FW_CR_VDS_Msk: u32 = 2;
pub const FW_CR_VDS: u32 = 2;
pub const FW_CR_VDE_Pos: u32 = 2;
pub const FW_CR_VDE_Msk: u32 = 4;
pub const FW_CR_VDE: u32 = 4;
pub const PWR_CR_LPSDSR_Pos: u32 = 0;
pub const PWR_CR_LPSDSR_Msk: u32 = 1;
pub const PWR_CR_LPSDSR: u32 = 1;
pub const PWR_CR_PDDS_Pos: u32 = 1;
pub const PWR_CR_PDDS_Msk: u32 = 2;
pub const PWR_CR_PDDS: u32 = 2;
pub const PWR_CR_CWUF_Pos: u32 = 2;
pub const PWR_CR_CWUF_Msk: u32 = 4;
pub const PWR_CR_CWUF: u32 = 4;
pub const PWR_CR_CSBF_Pos: u32 = 3;
pub const PWR_CR_CSBF_Msk: u32 = 8;
pub const PWR_CR_CSBF: u32 = 8;
pub const PWR_CR_PVDE_Pos: u32 = 4;
pub const PWR_CR_PVDE_Msk: u32 = 16;
pub const PWR_CR_PVDE: u32 = 16;
pub const PWR_CR_PLS_Pos: u32 = 5;
pub const PWR_CR_PLS_Msk: u32 = 224;
pub const PWR_CR_PLS: u32 = 224;
pub const PWR_CR_PLS_0: u32 = 32;
pub const PWR_CR_PLS_1: u32 = 64;
pub const PWR_CR_PLS_2: u32 = 128;
pub const PWR_CR_PLS_LEV0: u32 = 0;
pub const PWR_CR_PLS_LEV1: u32 = 32;
pub const PWR_CR_PLS_LEV2: u32 = 64;
pub const PWR_CR_PLS_LEV3: u32 = 96;
pub const PWR_CR_PLS_LEV4: u32 = 128;
pub const PWR_CR_PLS_LEV5: u32 = 160;
pub const PWR_CR_PLS_LEV6: u32 = 192;
pub const PWR_CR_PLS_LEV7: u32 = 224;
pub const PWR_CR_DBP_Pos: u32 = 8;
pub const PWR_CR_DBP_Msk: u32 = 256;
pub const PWR_CR_DBP: u32 = 256;
pub const PWR_CR_ULP_Pos: u32 = 9;
pub const PWR_CR_ULP_Msk: u32 = 512;
pub const PWR_CR_ULP: u32 = 512;
pub const PWR_CR_FWU_Pos: u32 = 10;
pub const PWR_CR_FWU_Msk: u32 = 1024;
pub const PWR_CR_FWU: u32 = 1024;
pub const PWR_CR_VOS_Pos: u32 = 11;
pub const PWR_CR_VOS_Msk: u32 = 6144;
pub const PWR_CR_VOS: u32 = 6144;
pub const PWR_CR_VOS_0: u32 = 2048;
pub const PWR_CR_VOS_1: u32 = 4096;
pub const PWR_CR_DSEEKOFF_Pos: u32 = 13;
pub const PWR_CR_DSEEKOFF_Msk: u32 = 8192;
pub const PWR_CR_DSEEKOFF: u32 = 8192;
pub const PWR_CR_LPRUN_Pos: u32 = 14;
pub const PWR_CR_LPRUN_Msk: u32 = 16384;
pub const PWR_CR_LPRUN: u32 = 16384;
pub const PWR_CSR_WUF_Pos: u32 = 0;
pub const PWR_CSR_WUF_Msk: u32 = 1;
pub const PWR_CSR_WUF: u32 = 1;
pub const PWR_CSR_SBF_Pos: u32 = 1;
pub const PWR_CSR_SBF_Msk: u32 = 2;
pub const PWR_CSR_SBF: u32 = 2;
pub const PWR_CSR_PVDO_Pos: u32 = 2;
pub const PWR_CSR_PVDO_Msk: u32 = 4;
pub const PWR_CSR_PVDO: u32 = 4;
pub const PWR_CSR_VREFINTRDYF_Pos: u32 = 3;
pub const PWR_CSR_VREFINTRDYF_Msk: u32 = 8;
pub const PWR_CSR_VREFINTRDYF: u32 = 8;
pub const PWR_CSR_VOSF_Pos: u32 = 4;
pub const PWR_CSR_VOSF_Msk: u32 = 16;
pub const PWR_CSR_VOSF: u32 = 16;
pub const PWR_CSR_REGLPF_Pos: u32 = 5;
pub const PWR_CSR_REGLPF_Msk: u32 = 32;
pub const PWR_CSR_REGLPF: u32 = 32;
pub const PWR_CSR_EWUP1_Pos: u32 = 8;
pub const PWR_CSR_EWUP1_Msk: u32 = 256;
pub const PWR_CSR_EWUP1: u32 = 256;
pub const PWR_CSR_EWUP2_Pos: u32 = 9;
pub const PWR_CSR_EWUP2_Msk: u32 = 512;
pub const PWR_CSR_EWUP2: u32 = 512;
pub const PWR_CSR_EWUP3_Pos: u32 = 10;
pub const PWR_CSR_EWUP3_Msk: u32 = 1024;
pub const PWR_CSR_EWUP3: u32 = 1024;
pub const RCC_CR_HSION_Pos: u32 = 0;
pub const RCC_CR_HSION_Msk: u32 = 1;
pub const RCC_CR_HSION: u32 = 1;
pub const RCC_CR_HSIKERON_Pos: u32 = 1;
pub const RCC_CR_HSIKERON_Msk: u32 = 2;
pub const RCC_CR_HSIKERON: u32 = 2;
pub const RCC_CR_HSIRDY_Pos: u32 = 2;
pub const RCC_CR_HSIRDY_Msk: u32 = 4;
pub const RCC_CR_HSIRDY: u32 = 4;
pub const RCC_CR_HSIDIVEN_Pos: u32 = 3;
pub const RCC_CR_HSIDIVEN_Msk: u32 = 8;
pub const RCC_CR_HSIDIVEN: u32 = 8;
pub const RCC_CR_HSIDIVF_Pos: u32 = 4;
pub const RCC_CR_HSIDIVF_Msk: u32 = 16;
pub const RCC_CR_HSIDIVF: u32 = 16;
pub const RCC_CR_HSIOUTEN_Pos: u32 = 5;
pub const RCC_CR_HSIOUTEN_Msk: u32 = 32;
pub const RCC_CR_HSIOUTEN: u32 = 32;
pub const RCC_CR_MSION_Pos: u32 = 8;
pub const RCC_CR_MSION_Msk: u32 = 256;
pub const RCC_CR_MSION: u32 = 256;
pub const RCC_CR_MSIRDY_Pos: u32 = 9;
pub const RCC_CR_MSIRDY_Msk: u32 = 512;
pub const RCC_CR_MSIRDY: u32 = 512;
pub const RCC_CR_HSEON_Pos: u32 = 16;
pub const RCC_CR_HSEON_Msk: u32 = 65536;
pub const RCC_CR_HSEON: u32 = 65536;
pub const RCC_CR_HSERDY_Pos: u32 = 17;
pub const RCC_CR_HSERDY_Msk: u32 = 131072;
pub const RCC_CR_HSERDY: u32 = 131072;
pub const RCC_CR_HSEBYP_Pos: u32 = 18;
pub const RCC_CR_HSEBYP_Msk: u32 = 262144;
pub const RCC_CR_HSEBYP: u32 = 262144;
pub const RCC_CR_CSSHSEON_Pos: u32 = 19;
pub const RCC_CR_CSSHSEON_Msk: u32 = 524288;
pub const RCC_CR_CSSHSEON: u32 = 524288;
pub const RCC_CR_RTCPRE_Pos: u32 = 20;
pub const RCC_CR_RTCPRE_Msk: u32 = 3145728;
pub const RCC_CR_RTCPRE: u32 = 3145728;
pub const RCC_CR_RTCPRE_0: u32 = 1048576;
pub const RCC_CR_RTCPRE_1: u32 = 2097152;
pub const RCC_CR_PLLON_Pos: u32 = 24;
pub const RCC_CR_PLLON_Msk: u32 = 16777216;
pub const RCC_CR_PLLON: u32 = 16777216;
pub const RCC_CR_PLLRDY_Pos: u32 = 25;
pub const RCC_CR_PLLRDY_Msk: u32 = 33554432;
pub const RCC_CR_PLLRDY: u32 = 33554432;
pub const RCC_CR_CSSON: u32 = 524288;
pub const RCC_ICSCR_HSICAL_Pos: u32 = 0;
pub const RCC_ICSCR_HSICAL_Msk: u32 = 255;
pub const RCC_ICSCR_HSICAL: u32 = 255;
pub const RCC_ICSCR_HSITRIM_Pos: u32 = 8;
pub const RCC_ICSCR_HSITRIM_Msk: u32 = 7936;
pub const RCC_ICSCR_HSITRIM: u32 = 7936;
pub const RCC_ICSCR_MSIRANGE_Pos: u32 = 13;
pub const RCC_ICSCR_MSIRANGE_Msk: u32 = 57344;
pub const RCC_ICSCR_MSIRANGE: u32 = 57344;
pub const RCC_ICSCR_MSIRANGE_0: u32 = 0;
pub const RCC_ICSCR_MSIRANGE_1: u32 = 8192;
pub const RCC_ICSCR_MSIRANGE_2: u32 = 16384;
pub const RCC_ICSCR_MSIRANGE_3: u32 = 24576;
pub const RCC_ICSCR_MSIRANGE_4: u32 = 32768;
pub const RCC_ICSCR_MSIRANGE_5: u32 = 40960;
pub const RCC_ICSCR_MSIRANGE_6: u32 = 49152;
pub const RCC_ICSCR_MSICAL_Pos: u32 = 16;
pub const RCC_ICSCR_MSICAL_Msk: u32 = 16711680;
pub const RCC_ICSCR_MSICAL: u32 = 16711680;
pub const RCC_ICSCR_MSITRIM_Pos: u32 = 24;
pub const RCC_ICSCR_MSITRIM_Msk: u32 = 4278190080;
pub const RCC_ICSCR_MSITRIM: u32 = 4278190080;
pub const RCC_CRRCR_HSI48ON_Pos: u32 = 0;
pub const RCC_CRRCR_HSI48ON_Msk: u32 = 1;
pub const RCC_CRRCR_HSI48ON: u32 = 1;
pub const RCC_CRRCR_HSI48RDY_Pos: u32 = 1;
pub const RCC_CRRCR_HSI48RDY_Msk: u32 = 2;
pub const RCC_CRRCR_HSI48RDY: u32 = 2;
pub const RCC_CRRCR_HSI48DIV6OUTEN_Pos: u32 = 2;
pub const RCC_CRRCR_HSI48DIV6OUTEN_Msk: u32 = 4;
pub const RCC_CRRCR_HSI48DIV6OUTEN: u32 = 4;
pub const RCC_CRRCR_HSI48CAL_Pos: u32 = 8;
pub const RCC_CRRCR_HSI48CAL_Msk: u32 = 65280;
pub const RCC_CRRCR_HSI48CAL: u32 = 65280;
pub const RCC_CFGR_SW_Pos: u32 = 0;
pub const RCC_CFGR_SW_Msk: u32 = 3;
pub const RCC_CFGR_SW: u32 = 3;
pub const RCC_CFGR_SW_0: u32 = 1;
pub const RCC_CFGR_SW_1: u32 = 2;
pub const RCC_CFGR_SW_MSI: u32 = 0;
pub const RCC_CFGR_SW_HSI: u32 = 1;
pub const RCC_CFGR_SW_HSE: u32 = 2;
pub const RCC_CFGR_SW_PLL: u32 = 3;
pub const RCC_CFGR_SWS_Pos: u32 = 2;
pub const RCC_CFGR_SWS_Msk: u32 = 12;
pub const RCC_CFGR_SWS: u32 = 12;
pub const RCC_CFGR_SWS_0: u32 = 4;
pub const RCC_CFGR_SWS_1: u32 = 8;
pub const RCC_CFGR_SWS_MSI: u32 = 0;
pub const RCC_CFGR_SWS_HSI: u32 = 4;
pub const RCC_CFGR_SWS_HSE: u32 = 8;
pub const RCC_CFGR_SWS_PLL: u32 = 12;
pub const RCC_CFGR_HPRE_Pos: u32 = 4;
pub const RCC_CFGR_HPRE_Msk: u32 = 240;
pub const RCC_CFGR_HPRE: u32 = 240;
pub const RCC_CFGR_HPRE_0: u32 = 16;
pub const RCC_CFGR_HPRE_1: u32 = 32;
pub const RCC_CFGR_HPRE_2: u32 = 64;
pub const RCC_CFGR_HPRE_3: u32 = 128;
pub const RCC_CFGR_HPRE_DIV1: u32 = 0;
pub const RCC_CFGR_HPRE_DIV2: u32 = 128;
pub const RCC_CFGR_HPRE_DIV4: u32 = 144;
pub const RCC_CFGR_HPRE_DIV8: u32 = 160;
pub const RCC_CFGR_HPRE_DIV16: u32 = 176;
pub const RCC_CFGR_HPRE_DIV64: u32 = 192;
pub const RCC_CFGR_HPRE_DIV128: u32 = 208;
pub const RCC_CFGR_HPRE_DIV256: u32 = 224;
pub const RCC_CFGR_HPRE_DIV512: u32 = 240;
pub const RCC_CFGR_PPRE1_Pos: u32 = 8;
pub const RCC_CFGR_PPRE1_Msk: u32 = 1792;
pub const RCC_CFGR_PPRE1: u32 = 1792;
pub const RCC_CFGR_PPRE1_0: u32 = 256;
pub const RCC_CFGR_PPRE1_1: u32 = 512;
pub const RCC_CFGR_PPRE1_2: u32 = 1024;
pub const RCC_CFGR_PPRE1_DIV1: u32 = 0;
pub const RCC_CFGR_PPRE1_DIV2: u32 = 1024;
pub const RCC_CFGR_PPRE1_DIV4: u32 = 1280;
pub const RCC_CFGR_PPRE1_DIV8: u32 = 1536;
pub const RCC_CFGR_PPRE1_DIV16: u32 = 1792;
pub const RCC_CFGR_PPRE2_Pos: u32 = 11;
pub const RCC_CFGR_PPRE2_Msk: u32 = 14336;
pub const RCC_CFGR_PPRE2: u32 = 14336;
pub const RCC_CFGR_PPRE2_0: u32 = 2048;
pub const RCC_CFGR_PPRE2_1: u32 = 4096;
pub const RCC_CFGR_PPRE2_2: u32 = 8192;
pub const RCC_CFGR_PPRE2_DIV1: u32 = 0;
pub const RCC_CFGR_PPRE2_DIV2: u32 = 8192;
pub const RCC_CFGR_PPRE2_DIV4: u32 = 10240;
pub const RCC_CFGR_PPRE2_DIV8: u32 = 12288;
pub const RCC_CFGR_PPRE2_DIV16: u32 = 14336;
pub const RCC_CFGR_STOPWUCK_Pos: u32 = 15;
pub const RCC_CFGR_STOPWUCK_Msk: u32 = 32768;
pub const RCC_CFGR_STOPWUCK: u32 = 32768;
pub const RCC_CFGR_PLLSRC_Pos: u32 = 16;
pub const RCC_CFGR_PLLSRC_Msk: u32 = 65536;
pub const RCC_CFGR_PLLSRC: u32 = 65536;
pub const RCC_CFGR_PLLSRC_HSI: u32 = 0;
pub const RCC_CFGR_PLLSRC_HSE: u32 = 65536;
pub const RCC_CFGR_PLLMUL_Pos: u32 = 18;
pub const RCC_CFGR_PLLMUL_Msk: u32 = 3932160;
pub const RCC_CFGR_PLLMUL: u32 = 3932160;
pub const RCC_CFGR_PLLMUL_0: u32 = 262144;
pub const RCC_CFGR_PLLMUL_1: u32 = 524288;
pub const RCC_CFGR_PLLMUL_2: u32 = 1048576;
pub const RCC_CFGR_PLLMUL_3: u32 = 2097152;
pub const RCC_CFGR_PLLMUL3: u32 = 0;
pub const RCC_CFGR_PLLMUL4: u32 = 262144;
pub const RCC_CFGR_PLLMUL6: u32 = 524288;
pub const RCC_CFGR_PLLMUL8: u32 = 786432;
pub const RCC_CFGR_PLLMUL12: u32 = 1048576;
pub const RCC_CFGR_PLLMUL16: u32 = 1310720;
pub const RCC_CFGR_PLLMUL24: u32 = 1572864;
pub const RCC_CFGR_PLLMUL32: u32 = 1835008;
pub const RCC_CFGR_PLLMUL48: u32 = 2097152;
pub const RCC_CFGR_PLLDIV_Pos: u32 = 22;
pub const RCC_CFGR_PLLDIV_Msk: u32 = 12582912;
pub const RCC_CFGR_PLLDIV: u32 = 12582912;
pub const RCC_CFGR_PLLDIV_0: u32 = 4194304;
pub const RCC_CFGR_PLLDIV_1: u32 = 8388608;
pub const RCC_CFGR_PLLDIV2_Pos: u32 = 22;
pub const RCC_CFGR_PLLDIV2_Msk: u32 = 4194304;
pub const RCC_CFGR_PLLDIV2: u32 = 4194304;
pub const RCC_CFGR_PLLDIV3_Pos: u32 = 23;
pub const RCC_CFGR_PLLDIV3_Msk: u32 = 8388608;
pub const RCC_CFGR_PLLDIV3: u32 = 8388608;
pub const RCC_CFGR_PLLDIV4_Pos: u32 = 22;
pub const RCC_CFGR_PLLDIV4_Msk: u32 = 12582912;
pub const RCC_CFGR_PLLDIV4: u32 = 12582912;
pub const RCC_CFGR_MCOSEL_Pos: u32 = 24;
pub const RCC_CFGR_MCOSEL_Msk: u32 = 251658240;
pub const RCC_CFGR_MCOSEL: u32 = 251658240;
pub const RCC_CFGR_MCOSEL_0: u32 = 16777216;
pub const RCC_CFGR_MCOSEL_1: u32 = 33554432;
pub const RCC_CFGR_MCOSEL_2: u32 = 67108864;
pub const RCC_CFGR_MCOSEL_3: u32 = 134217728;
pub const RCC_CFGR_MCOSEL_NOCLOCK: u32 = 0;
pub const RCC_CFGR_MCOSEL_SYSCLK_Pos: u32 = 24;
pub const RCC_CFGR_MCOSEL_SYSCLK_Msk: u32 = 16777216;
pub const RCC_CFGR_MCOSEL_SYSCLK: u32 = 16777216;
pub const RCC_CFGR_MCOSEL_HSI_Pos: u32 = 25;
pub const RCC_CFGR_MCOSEL_HSI_Msk: u32 = 33554432;
pub const RCC_CFGR_MCOSEL_HSI: u32 = 33554432;
pub const RCC_CFGR_MCOSEL_MSI_Pos: u32 = 24;
pub const RCC_CFGR_MCOSEL_MSI_Msk: u32 = 50331648;
pub const RCC_CFGR_MCOSEL_MSI: u32 = 50331648;
pub const RCC_CFGR_MCOSEL_HSE_Pos: u32 = 26;
pub const RCC_CFGR_MCOSEL_HSE_Msk: u32 = 67108864;
pub const RCC_CFGR_MCOSEL_HSE: u32 = 67108864;
pub const RCC_CFGR_MCOSEL_PLL_Pos: u32 = 24;
pub const RCC_CFGR_MCOSEL_PLL_Msk: u32 = 83886080;
pub const RCC_CFGR_MCOSEL_PLL: u32 = 83886080;
pub const RCC_CFGR_MCOSEL_LSI_Pos: u32 = 25;
pub const RCC_CFGR_MCOSEL_LSI_Msk: u32 = 100663296;
pub const RCC_CFGR_MCOSEL_LSI: u32 = 100663296;
pub const RCC_CFGR_MCOSEL_LSE_Pos: u32 = 24;
pub const RCC_CFGR_MCOSEL_LSE_Msk: u32 = 117440512;
pub const RCC_CFGR_MCOSEL_LSE: u32 = 117440512;
pub const RCC_CFGR_MCOSEL_HSI48_Pos: u32 = 27;
pub const RCC_CFGR_MCOSEL_HSI48_Msk: u32 = 134217728;
pub const RCC_CFGR_MCOSEL_HSI48: u32 = 134217728;
pub const RCC_CFGR_MCOPRE_Pos: u32 = 28;
pub const RCC_CFGR_MCOPRE_Msk: u32 = 1879048192;
pub const RCC_CFGR_MCOPRE: u32 = 1879048192;
pub const RCC_CFGR_MCOPRE_0: u32 = 268435456;
pub const RCC_CFGR_MCOPRE_1: u32 = 536870912;
pub const RCC_CFGR_MCOPRE_2: u32 = 1073741824;
pub const RCC_CFGR_MCOPRE_DIV1: u32 = 0;
pub const RCC_CFGR_MCOPRE_DIV2: u32 = 268435456;
pub const RCC_CFGR_MCOPRE_DIV4: u32 = 536870912;
pub const RCC_CFGR_MCOPRE_DIV8: u32 = 805306368;
pub const RCC_CFGR_MCOPRE_DIV16: u32 = 1073741824;
pub const RCC_CFGR_MCO_NOCLOCK: u32 = 0;
pub const RCC_CFGR_MCO_SYSCLK: u32 = 16777216;
pub const RCC_CFGR_MCO_HSI: u32 = 33554432;
pub const RCC_CFGR_MCO_MSI: u32 = 50331648;
pub const RCC_CFGR_MCO_HSE: u32 = 67108864;
pub const RCC_CFGR_MCO_PLL: u32 = 83886080;
pub const RCC_CFGR_MCO_LSI: u32 = 100663296;
pub const RCC_CFGR_MCO_LSE: u32 = 117440512;
pub const RCC_CFGR_MCO_HSI48: u32 = 134217728;
pub const RCC_CFGR_MCO_PRE: u32 = 1879048192;
pub const RCC_CFGR_MCO_PRE_1: u32 = 0;
pub const RCC_CFGR_MCO_PRE_2: u32 = 268435456;
pub const RCC_CFGR_MCO_PRE_4: u32 = 536870912;
pub const RCC_CFGR_MCO_PRE_8: u32 = 805306368;
pub const RCC_CFGR_MCO_PRE_16: u32 = 1073741824;
pub const RCC_CIER_LSIRDYIE_Pos: u32 = 0;
pub const RCC_CIER_LSIRDYIE_Msk: u32 = 1;
pub const RCC_CIER_LSIRDYIE: u32 = 1;
pub const RCC_CIER_LSERDYIE_Pos: u32 = 1;
pub const RCC_CIER_LSERDYIE_Msk: u32 = 2;
pub const RCC_CIER_LSERDYIE: u32 = 2;
pub const RCC_CIER_HSIRDYIE_Pos: u32 = 2;
pub const RCC_CIER_HSIRDYIE_Msk: u32 = 4;
pub const RCC_CIER_HSIRDYIE: u32 = 4;
pub const RCC_CIER_HSERDYIE_Pos: u32 = 3;
pub const RCC_CIER_HSERDYIE_Msk: u32 = 8;
pub const RCC_CIER_HSERDYIE: u32 = 8;
pub const RCC_CIER_PLLRDYIE_Pos: u32 = 4;
pub const RCC_CIER_PLLRDYIE_Msk: u32 = 16;
pub const RCC_CIER_PLLRDYIE: u32 = 16;
pub const RCC_CIER_MSIRDYIE_Pos: u32 = 5;
pub const RCC_CIER_MSIRDYIE_Msk: u32 = 32;
pub const RCC_CIER_MSIRDYIE: u32 = 32;
pub const RCC_CIER_HSI48RDYIE_Pos: u32 = 6;
pub const RCC_CIER_HSI48RDYIE_Msk: u32 = 64;
pub const RCC_CIER_HSI48RDYIE: u32 = 64;
pub const RCC_CIER_CSSLSE_Pos: u32 = 7;
pub const RCC_CIER_CSSLSE_Msk: u32 = 128;
pub const RCC_CIER_CSSLSE: u32 = 128;
pub const RCC_CIER_LSECSSIE: u32 = 128;
pub const RCC_CIFR_LSIRDYF_Pos: u32 = 0;
pub const RCC_CIFR_LSIRDYF_Msk: u32 = 1;
pub const RCC_CIFR_LSIRDYF: u32 = 1;
pub const RCC_CIFR_LSERDYF_Pos: u32 = 1;
pub const RCC_CIFR_LSERDYF_Msk: u32 = 2;
pub const RCC_CIFR_LSERDYF: u32 = 2;
pub const RCC_CIFR_HSIRDYF_Pos: u32 = 2;
pub const RCC_CIFR_HSIRDYF_Msk: u32 = 4;
pub const RCC_CIFR_HSIRDYF: u32 = 4;
pub const RCC_CIFR_HSERDYF_Pos: u32 = 3;
pub const RCC_CIFR_HSERDYF_Msk: u32 = 8;
pub const RCC_CIFR_HSERDYF: u32 = 8;
pub const RCC_CIFR_PLLRDYF_Pos: u32 = 4;
pub const RCC_CIFR_PLLRDYF_Msk: u32 = 16;
pub const RCC_CIFR_PLLRDYF: u32 = 16;
pub const RCC_CIFR_MSIRDYF_Pos: u32 = 5;
pub const RCC_CIFR_MSIRDYF_Msk: u32 = 32;
pub const RCC_CIFR_MSIRDYF: u32 = 32;
pub const RCC_CIFR_HSI48RDYF_Pos: u32 = 6;
pub const RCC_CIFR_HSI48RDYF_Msk: u32 = 64;
pub const RCC_CIFR_HSI48RDYF: u32 = 64;
pub const RCC_CIFR_CSSLSEF_Pos: u32 = 7;
pub const RCC_CIFR_CSSLSEF_Msk: u32 = 128;
pub const RCC_CIFR_CSSLSEF: u32 = 128;
pub const RCC_CIFR_CSSHSEF_Pos: u32 = 8;
pub const RCC_CIFR_CSSHSEF_Msk: u32 = 256;
pub const RCC_CIFR_CSSHSEF: u32 = 256;
pub const RCC_CIFR_LSECSSF: u32 = 128;
pub const RCC_CIFR_CSSF: u32 = 256;
pub const RCC_CICR_LSIRDYC_Pos: u32 = 0;
pub const RCC_CICR_LSIRDYC_Msk: u32 = 1;
pub const RCC_CICR_LSIRDYC: u32 = 1;
pub const RCC_CICR_LSERDYC_Pos: u32 = 1;
pub const RCC_CICR_LSERDYC_Msk: u32 = 2;
pub const RCC_CICR_LSERDYC: u32 = 2;
pub const RCC_CICR_HSIRDYC_Pos: u32 = 2;
pub const RCC_CICR_HSIRDYC_Msk: u32 = 4;
pub const RCC_CICR_HSIRDYC: u32 = 4;
pub const RCC_CICR_HSERDYC_Pos: u32 = 3;
pub const RCC_CICR_HSERDYC_Msk: u32 = 8;
pub const RCC_CICR_HSERDYC: u32 = 8;
pub const RCC_CICR_PLLRDYC_Pos: u32 = 4;
pub const RCC_CICR_PLLRDYC_Msk: u32 = 16;
pub const RCC_CICR_PLLRDYC: u32 = 16;
pub const RCC_CICR_MSIRDYC_Pos: u32 = 5;
pub const RCC_CICR_MSIRDYC_Msk: u32 = 32;
pub const RCC_CICR_MSIRDYC: u32 = 32;
pub const RCC_CICR_HSI48RDYC_Pos: u32 = 6;
pub const RCC_CICR_HSI48RDYC_Msk: u32 = 64;
pub const RCC_CICR_HSI48RDYC: u32 = 64;
pub const RCC_CICR_CSSLSEC_Pos: u32 = 7;
pub const RCC_CICR_CSSLSEC_Msk: u32 = 128;
pub const RCC_CICR_CSSLSEC: u32 = 128;
pub const RCC_CICR_CSSHSEC_Pos: u32 = 8;
pub const RCC_CICR_CSSHSEC_Msk: u32 = 256;
pub const RCC_CICR_CSSHSEC: u32 = 256;
pub const RCC_CICR_LSECSSC: u32 = 128;
pub const RCC_CICR_CSSC: u32 = 256;
pub const RCC_IOPRSTR_IOPARST_Pos: u32 = 0;
pub const RCC_IOPRSTR_IOPARST_Msk: u32 = 1;
pub const RCC_IOPRSTR_IOPARST: u32 = 1;
pub const RCC_IOPRSTR_IOPBRST_Pos: u32 = 1;
pub const RCC_IOPRSTR_IOPBRST_Msk: u32 = 2;
pub const RCC_IOPRSTR_IOPBRST: u32 = 2;
pub const RCC_IOPRSTR_IOPCRST_Pos: u32 = 2;
pub const RCC_IOPRSTR_IOPCRST_Msk: u32 = 4;
pub const RCC_IOPRSTR_IOPCRST: u32 = 4;
pub const RCC_IOPRSTR_IOPDRST_Pos: u32 = 3;
pub const RCC_IOPRSTR_IOPDRST_Msk: u32 = 8;
pub const RCC_IOPRSTR_IOPDRST: u32 = 8;
pub const RCC_IOPRSTR_IOPERST_Pos: u32 = 4;
pub const RCC_IOPRSTR_IOPERST_Msk: u32 = 16;
pub const RCC_IOPRSTR_IOPERST: u32 = 16;
pub const RCC_IOPRSTR_IOPHRST_Pos: u32 = 7;
pub const RCC_IOPRSTR_IOPHRST_Msk: u32 = 128;
pub const RCC_IOPRSTR_IOPHRST: u32 = 128;
pub const RCC_IOPRSTR_GPIOARST: u32 = 1;
pub const RCC_IOPRSTR_GPIOBRST: u32 = 2;
pub const RCC_IOPRSTR_GPIOCRST: u32 = 4;
pub const RCC_IOPRSTR_GPIODRST: u32 = 8;
pub const RCC_IOPRSTR_GPIOERST: u32 = 16;
pub const RCC_IOPRSTR_GPIOHRST: u32 = 128;
pub const RCC_AHBRSTR_DMARST_Pos: u32 = 0;
pub const RCC_AHBRSTR_DMARST_Msk: u32 = 1;
pub const RCC_AHBRSTR_DMARST: u32 = 1;
pub const RCC_AHBRSTR_MIFRST_Pos: u32 = 8;
pub const RCC_AHBRSTR_MIFRST_Msk: u32 = 256;
pub const RCC_AHBRSTR_MIFRST: u32 = 256;
pub const RCC_AHBRSTR_CRCRST_Pos: u32 = 12;
pub const RCC_AHBRSTR_CRCRST_Msk: u32 = 4096;
pub const RCC_AHBRSTR_CRCRST: u32 = 4096;
pub const RCC_AHBRSTR_TSCRST_Pos: u32 = 16;
pub const RCC_AHBRSTR_TSCRST_Msk: u32 = 65536;
pub const RCC_AHBRSTR_TSCRST: u32 = 65536;
pub const RCC_AHBRSTR_RNGRST_Pos: u32 = 20;
pub const RCC_AHBRSTR_RNGRST_Msk: u32 = 1048576;
pub const RCC_AHBRSTR_RNGRST: u32 = 1048576;
pub const RCC_AHBRSTR_DMA1RST: u32 = 1;
pub const RCC_APB2RSTR_SYSCFGRST_Pos: u32 = 0;
pub const RCC_APB2RSTR_SYSCFGRST_Msk: u32 = 1;
pub const RCC_APB2RSTR_SYSCFGRST: u32 = 1;
pub const RCC_APB2RSTR_TIM21RST_Pos: u32 = 2;
pub const RCC_APB2RSTR_TIM21RST_Msk: u32 = 4;
pub const RCC_APB2RSTR_TIM21RST: u32 = 4;
pub const RCC_APB2RSTR_TIM22RST_Pos: u32 = 5;
pub const RCC_APB2RSTR_TIM22RST_Msk: u32 = 32;
pub const RCC_APB2RSTR_TIM22RST: u32 = 32;
pub const RCC_APB2RSTR_ADCRST_Pos: u32 = 9;
pub const RCC_APB2RSTR_ADCRST_Msk: u32 = 512;
pub const RCC_APB2RSTR_ADCRST: u32 = 512;
pub const RCC_APB2RSTR_SPI1RST_Pos: u32 = 12;
pub const RCC_APB2RSTR_SPI1RST_Msk: u32 = 4096;
pub const RCC_APB2RSTR_SPI1RST: u32 = 4096;
pub const RCC_APB2RSTR_USART1RST_Pos: u32 = 14;
pub const RCC_APB2RSTR_USART1RST_Msk: u32 = 16384;
pub const RCC_APB2RSTR_USART1RST: u32 = 16384;
pub const RCC_APB2RSTR_DBGRST_Pos: u32 = 22;
pub const RCC_APB2RSTR_DBGRST_Msk: u32 = 4194304;
pub const RCC_APB2RSTR_DBGRST: u32 = 4194304;
pub const RCC_APB2RSTR_ADC1RST: u32 = 512;
pub const RCC_APB2RSTR_DBGMCURST: u32 = 4194304;
pub const RCC_APB1RSTR_TIM2RST_Pos: u32 = 0;
pub const RCC_APB1RSTR_TIM2RST_Msk: u32 = 1;
pub const RCC_APB1RSTR_TIM2RST: u32 = 1;
pub const RCC_APB1RSTR_TIM3RST_Pos: u32 = 1;
pub const RCC_APB1RSTR_TIM3RST_Msk: u32 = 2;
pub const RCC_APB1RSTR_TIM3RST: u32 = 2;
pub const RCC_APB1RSTR_TIM6RST_Pos: u32 = 4;
pub const RCC_APB1RSTR_TIM6RST_Msk: u32 = 16;
pub const RCC_APB1RSTR_TIM6RST: u32 = 16;
pub const RCC_APB1RSTR_TIM7RST_Pos: u32 = 5;
pub const RCC_APB1RSTR_TIM7RST_Msk: u32 = 32;
pub const RCC_APB1RSTR_TIM7RST: u32 = 32;
pub const RCC_APB1RSTR_WWDGRST_Pos: u32 = 11;
pub const RCC_APB1RSTR_WWDGRST_Msk: u32 = 2048;
pub const RCC_APB1RSTR_WWDGRST: u32 = 2048;
pub const RCC_APB1RSTR_SPI2RST_Pos: u32 = 14;
pub const RCC_APB1RSTR_SPI2RST_Msk: u32 = 16384;
pub const RCC_APB1RSTR_SPI2RST: u32 = 16384;
pub const RCC_APB1RSTR_USART2RST_Pos: u32 = 17;
pub const RCC_APB1RSTR_USART2RST_Msk: u32 = 131072;
pub const RCC_APB1RSTR_USART2RST: u32 = 131072;
pub const RCC_APB1RSTR_LPUART1RST_Pos: u32 = 18;
pub const RCC_APB1RSTR_LPUART1RST_Msk: u32 = 262144;
pub const RCC_APB1RSTR_LPUART1RST: u32 = 262144;
pub const RCC_APB1RSTR_USART4RST_Pos: u32 = 19;
pub const RCC_APB1RSTR_USART4RST_Msk: u32 = 524288;
pub const RCC_APB1RSTR_USART4RST: u32 = 524288;
pub const RCC_APB1RSTR_USART5RST_Pos: u32 = 20;
pub const RCC_APB1RSTR_USART5RST_Msk: u32 = 1048576;
pub const RCC_APB1RSTR_USART5RST: u32 = 1048576;
pub const RCC_APB1RSTR_I2C1RST_Pos: u32 = 21;
pub const RCC_APB1RSTR_I2C1RST_Msk: u32 = 2097152;
pub const RCC_APB1RSTR_I2C1RST: u32 = 2097152;
pub const RCC_APB1RSTR_I2C2RST_Pos: u32 = 22;
pub const RCC_APB1RSTR_I2C2RST_Msk: u32 = 4194304;
pub const RCC_APB1RSTR_I2C2RST: u32 = 4194304;
pub const RCC_APB1RSTR_USBRST_Pos: u32 = 23;
pub const RCC_APB1RSTR_USBRST_Msk: u32 = 8388608;
pub const RCC_APB1RSTR_USBRST: u32 = 8388608;
pub const RCC_APB1RSTR_CRSRST_Pos: u32 = 27;
pub const RCC_APB1RSTR_CRSRST_Msk: u32 = 134217728;
pub const RCC_APB1RSTR_CRSRST: u32 = 134217728;
pub const RCC_APB1RSTR_PWRRST_Pos: u32 = 28;
pub const RCC_APB1RSTR_PWRRST_Msk: u32 = 268435456;
pub const RCC_APB1RSTR_PWRRST: u32 = 268435456;
pub const RCC_APB1RSTR_DACRST_Pos: u32 = 29;
pub const RCC_APB1RSTR_DACRST_Msk: u32 = 536870912;
pub const RCC_APB1RSTR_DACRST: u32 = 536870912;
pub const RCC_APB1RSTR_I2C3RST_Pos: u32 = 30;
pub const RCC_APB1RSTR_I2C3RST_Msk: u32 = 1073741824;
pub const RCC_APB1RSTR_I2C3RST: u32 = 1073741824;
pub const RCC_APB1RSTR_LPTIM1RST_Pos: u32 = 31;
pub const RCC_APB1RSTR_LPTIM1RST_Msk: u32 = 2147483648;
pub const RCC_APB1RSTR_LPTIM1RST: u32 = 2147483648;
pub const RCC_IOPENR_IOPAEN_Pos: u32 = 0;
pub const RCC_IOPENR_IOPAEN_Msk: u32 = 1;
pub const RCC_IOPENR_IOPAEN: u32 = 1;
pub const RCC_IOPENR_IOPBEN_Pos: u32 = 1;
pub const RCC_IOPENR_IOPBEN_Msk: u32 = 2;
pub const RCC_IOPENR_IOPBEN: u32 = 2;
pub const RCC_IOPENR_IOPCEN_Pos: u32 = 2;
pub const RCC_IOPENR_IOPCEN_Msk: u32 = 4;
pub const RCC_IOPENR_IOPCEN: u32 = 4;
pub const RCC_IOPENR_IOPDEN_Pos: u32 = 3;
pub const RCC_IOPENR_IOPDEN_Msk: u32 = 8;
pub const RCC_IOPENR_IOPDEN: u32 = 8;
pub const RCC_IOPENR_IOPEEN_Pos: u32 = 4;
pub const RCC_IOPENR_IOPEEN_Msk: u32 = 16;
pub const RCC_IOPENR_IOPEEN: u32 = 16;
pub const RCC_IOPENR_IOPHEN_Pos: u32 = 7;
pub const RCC_IOPENR_IOPHEN_Msk: u32 = 128;
pub const RCC_IOPENR_IOPHEN: u32 = 128;
pub const RCC_IOPENR_GPIOAEN: u32 = 1;
pub const RCC_IOPENR_GPIOBEN: u32 = 2;
pub const RCC_IOPENR_GPIOCEN: u32 = 4;
pub const RCC_IOPENR_GPIODEN: u32 = 8;
pub const RCC_IOPENR_GPIOEEN: u32 = 16;
pub const RCC_IOPENR_GPIOHEN: u32 = 128;
pub const RCC_AHBENR_DMAEN_Pos: u32 = 0;
pub const RCC_AHBENR_DMAEN_Msk: u32 = 1;
pub const RCC_AHBENR_DMAEN: u32 = 1;
pub const RCC_AHBENR_MIFEN_Pos: u32 = 8;
pub const RCC_AHBENR_MIFEN_Msk: u32 = 256;
pub const RCC_AHBENR_MIFEN: u32 = 256;
pub const RCC_AHBENR_CRCEN_Pos: u32 = 12;
pub const RCC_AHBENR_CRCEN_Msk: u32 = 4096;
pub const RCC_AHBENR_CRCEN: u32 = 4096;
pub const RCC_AHBENR_TSCEN_Pos: u32 = 16;
pub const RCC_AHBENR_TSCEN_Msk: u32 = 65536;
pub const RCC_AHBENR_TSCEN: u32 = 65536;
pub const RCC_AHBENR_RNGEN_Pos: u32 = 20;
pub const RCC_AHBENR_RNGEN_Msk: u32 = 1048576;
pub const RCC_AHBENR_RNGEN: u32 = 1048576;
pub const RCC_AHBENR_DMA1EN: u32 = 1;
pub const RCC_APB2ENR_SYSCFGEN_Pos: u32 = 0;
pub const RCC_APB2ENR_SYSCFGEN_Msk: u32 = 1;
pub const RCC_APB2ENR_SYSCFGEN: u32 = 1;
pub const RCC_APB2ENR_TIM21EN_Pos: u32 = 2;
pub const RCC_APB2ENR_TIM21EN_Msk: u32 = 4;
pub const RCC_APB2ENR_TIM21EN: u32 = 4;
pub const RCC_APB2ENR_TIM22EN_Pos: u32 = 5;
pub const RCC_APB2ENR_TIM22EN_Msk: u32 = 32;
pub const RCC_APB2ENR_TIM22EN: u32 = 32;
pub const RCC_APB2ENR_FWEN_Pos: u32 = 7;
pub const RCC_APB2ENR_FWEN_Msk: u32 = 128;
pub const RCC_APB2ENR_FWEN: u32 = 128;
pub const RCC_APB2ENR_ADCEN_Pos: u32 = 9;
pub const RCC_APB2ENR_ADCEN_Msk: u32 = 512;
pub const RCC_APB2ENR_ADCEN: u32 = 512;
pub const RCC_APB2ENR_SPI1EN_Pos: u32 = 12;
pub const RCC_APB2ENR_SPI1EN_Msk: u32 = 4096;
pub const RCC_APB2ENR_SPI1EN: u32 = 4096;
pub const RCC_APB2ENR_USART1EN_Pos: u32 = 14;
pub const RCC_APB2ENR_USART1EN_Msk: u32 = 16384;
pub const RCC_APB2ENR_USART1EN: u32 = 16384;
pub const RCC_APB2ENR_DBGEN_Pos: u32 = 22;
pub const RCC_APB2ENR_DBGEN_Msk: u32 = 4194304;
pub const RCC_APB2ENR_DBGEN: u32 = 4194304;
pub const RCC_APB2ENR_MIFIEN: u32 = 128;
pub const RCC_APB2ENR_ADC1EN: u32 = 512;
pub const RCC_APB2ENR_DBGMCUEN: u32 = 4194304;
pub const RCC_APB1ENR_TIM2EN_Pos: u32 = 0;
pub const RCC_APB1ENR_TIM2EN_Msk: u32 = 1;
pub const RCC_APB1ENR_TIM2EN: u32 = 1;
pub const RCC_APB1ENR_TIM3EN_Pos: u32 = 1;
pub const RCC_APB1ENR_TIM3EN_Msk: u32 = 2;
pub const RCC_APB1ENR_TIM3EN: u32 = 2;
pub const RCC_APB1ENR_TIM6EN_Pos: u32 = 4;
pub const RCC_APB1ENR_TIM6EN_Msk: u32 = 16;
pub const RCC_APB1ENR_TIM6EN: u32 = 16;
pub const RCC_APB1ENR_TIM7EN_Pos: u32 = 5;
pub const RCC_APB1ENR_TIM7EN_Msk: u32 = 32;
pub const RCC_APB1ENR_TIM7EN: u32 = 32;
pub const RCC_APB1ENR_WWDGEN_Pos: u32 = 11;
pub const RCC_APB1ENR_WWDGEN_Msk: u32 = 2048;
pub const RCC_APB1ENR_WWDGEN: u32 = 2048;
pub const RCC_APB1ENR_SPI2EN_Pos: u32 = 14;
pub const RCC_APB1ENR_SPI2EN_Msk: u32 = 16384;
pub const RCC_APB1ENR_SPI2EN: u32 = 16384;
pub const RCC_APB1ENR_USART2EN_Pos: u32 = 17;
pub const RCC_APB1ENR_USART2EN_Msk: u32 = 131072;
pub const RCC_APB1ENR_USART2EN: u32 = 131072;
pub const RCC_APB1ENR_LPUART1EN_Pos: u32 = 18;
pub const RCC_APB1ENR_LPUART1EN_Msk: u32 = 262144;
pub const RCC_APB1ENR_LPUART1EN: u32 = 262144;
pub const RCC_APB1ENR_USART4EN_Pos: u32 = 19;
pub const RCC_APB1ENR_USART4EN_Msk: u32 = 524288;
pub const RCC_APB1ENR_USART4EN: u32 = 524288;
pub const RCC_APB1ENR_USART5EN_Pos: u32 = 20;
pub const RCC_APB1ENR_USART5EN_Msk: u32 = 1048576;
pub const RCC_APB1ENR_USART5EN: u32 = 1048576;
pub const RCC_APB1ENR_I2C1EN_Pos: u32 = 21;
pub const RCC_APB1ENR_I2C1EN_Msk: u32 = 2097152;
pub const RCC_APB1ENR_I2C1EN: u32 = 2097152;
pub const RCC_APB1ENR_I2C2EN_Pos: u32 = 22;
pub const RCC_APB1ENR_I2C2EN_Msk: u32 = 4194304;
pub const RCC_APB1ENR_I2C2EN: u32 = 4194304;
pub const RCC_APB1ENR_USBEN_Pos: u32 = 23;
pub const RCC_APB1ENR_USBEN_Msk: u32 = 8388608;
pub const RCC_APB1ENR_USBEN: u32 = 8388608;
pub const RCC_APB1ENR_CRSEN_Pos: u32 = 27;
pub const RCC_APB1ENR_CRSEN_Msk: u32 = 134217728;
pub const RCC_APB1ENR_CRSEN: u32 = 134217728;
pub const RCC_APB1ENR_PWREN_Pos: u32 = 28;
pub const RCC_APB1ENR_PWREN_Msk: u32 = 268435456;
pub const RCC_APB1ENR_PWREN: u32 = 268435456;
pub const RCC_APB1ENR_DACEN_Pos: u32 = 29;
pub const RCC_APB1ENR_DACEN_Msk: u32 = 536870912;
pub const RCC_APB1ENR_DACEN: u32 = 536870912;
pub const RCC_APB1ENR_I2C3EN_Pos: u32 = 30;
pub const RCC_APB1ENR_I2C3EN_Msk: u32 = 1073741824;
pub const RCC_APB1ENR_I2C3EN: u32 = 1073741824;
pub const RCC_APB1ENR_LPTIM1EN_Pos: u32 = 31;
pub const RCC_APB1ENR_LPTIM1EN_Msk: u32 = 2147483648;
pub const RCC_APB1ENR_LPTIM1EN: u32 = 2147483648;
pub const RCC_IOPSMENR_IOPASMEN_Pos: u32 = 0;
pub const RCC_IOPSMENR_IOPASMEN_Msk: u32 = 1;
pub const RCC_IOPSMENR_IOPASMEN: u32 = 1;
pub const RCC_IOPSMENR_IOPBSMEN_Pos: u32 = 1;
pub const RCC_IOPSMENR_IOPBSMEN_Msk: u32 = 2;
pub const RCC_IOPSMENR_IOPBSMEN: u32 = 2;
pub const RCC_IOPSMENR_IOPCSMEN_Pos: u32 = 2;
pub const RCC_IOPSMENR_IOPCSMEN_Msk: u32 = 4;
pub const RCC_IOPSMENR_IOPCSMEN: u32 = 4;
pub const RCC_IOPSMENR_IOPDSMEN_Pos: u32 = 3;
pub const RCC_IOPSMENR_IOPDSMEN_Msk: u32 = 8;
pub const RCC_IOPSMENR_IOPDSMEN: u32 = 8;
pub const RCC_IOPSMENR_IOPESMEN_Pos: u32 = 4;
pub const RCC_IOPSMENR_IOPESMEN_Msk: u32 = 16;
pub const RCC_IOPSMENR_IOPESMEN: u32 = 16;
pub const RCC_IOPSMENR_IOPHSMEN_Pos: u32 = 7;
pub const RCC_IOPSMENR_IOPHSMEN_Msk: u32 = 128;
pub const RCC_IOPSMENR_IOPHSMEN: u32 = 128;
pub const RCC_IOPSMENR_GPIOASMEN: u32 = 1;
pub const RCC_IOPSMENR_GPIOBSMEN: u32 = 2;
pub const RCC_IOPSMENR_GPIOCSMEN: u32 = 4;
pub const RCC_IOPSMENR_GPIODSMEN: u32 = 8;
pub const RCC_IOPSMENR_GPIOESMEN: u32 = 16;
pub const RCC_IOPSMENR_GPIOHSMEN: u32 = 128;
pub const RCC_AHBSMENR_DMASMEN_Pos: u32 = 0;
pub const RCC_AHBSMENR_DMASMEN_Msk: u32 = 1;
pub const RCC_AHBSMENR_DMASMEN: u32 = 1;
pub const RCC_AHBSMENR_MIFSMEN_Pos: u32 = 8;
pub const RCC_AHBSMENR_MIFSMEN_Msk: u32 = 256;
pub const RCC_AHBSMENR_MIFSMEN: u32 = 256;
pub const RCC_AHBSMENR_SRAMSMEN_Pos: u32 = 9;
pub const RCC_AHBSMENR_SRAMSMEN_Msk: u32 = 512;
pub const RCC_AHBSMENR_SRAMSMEN: u32 = 512;
pub const RCC_AHBSMENR_CRCSMEN_Pos: u32 = 12;
pub const RCC_AHBSMENR_CRCSMEN_Msk: u32 = 4096;
pub const RCC_AHBSMENR_CRCSMEN: u32 = 4096;
pub const RCC_AHBSMENR_TSCSMEN_Pos: u32 = 16;
pub const RCC_AHBSMENR_TSCSMEN_Msk: u32 = 65536;
pub const RCC_AHBSMENR_TSCSMEN: u32 = 65536;
pub const RCC_AHBSMENR_RNGSMEN_Pos: u32 = 20;
pub const RCC_AHBSMENR_RNGSMEN_Msk: u32 = 1048576;
pub const RCC_AHBSMENR_RNGSMEN: u32 = 1048576;
pub const RCC_AHBSMENR_DMA1SMEN: u32 = 1;
pub const RCC_APB2SMENR_SYSCFGSMEN_Pos: u32 = 0;
pub const RCC_APB2SMENR_SYSCFGSMEN_Msk: u32 = 1;
pub const RCC_APB2SMENR_SYSCFGSMEN: u32 = 1;
pub const RCC_APB2SMENR_TIM21SMEN_Pos: u32 = 2;
pub const RCC_APB2SMENR_TIM21SMEN_Msk: u32 = 4;
pub const RCC_APB2SMENR_TIM21SMEN: u32 = 4;
pub const RCC_APB2SMENR_TIM22SMEN_Pos: u32 = 5;
pub const RCC_APB2SMENR_TIM22SMEN_Msk: u32 = 32;
pub const RCC_APB2SMENR_TIM22SMEN: u32 = 32;
pub const RCC_APB2SMENR_ADCSMEN_Pos: u32 = 9;
pub const RCC_APB2SMENR_ADCSMEN_Msk: u32 = 512;
pub const RCC_APB2SMENR_ADCSMEN: u32 = 512;
pub const RCC_APB2SMENR_SPI1SMEN_Pos: u32 = 12;
pub const RCC_APB2SMENR_SPI1SMEN_Msk: u32 = 4096;
pub const RCC_APB2SMENR_SPI1SMEN: u32 = 4096;
pub const RCC_APB2SMENR_USART1SMEN_Pos: u32 = 14;
pub const RCC_APB2SMENR_USART1SMEN_Msk: u32 = 16384;
pub const RCC_APB2SMENR_USART1SMEN: u32 = 16384;
pub const RCC_APB2SMENR_DBGSMEN_Pos: u32 = 22;
pub const RCC_APB2SMENR_DBGSMEN_Msk: u32 = 4194304;
pub const RCC_APB2SMENR_DBGSMEN: u32 = 4194304;
pub const RCC_APB2SMENR_ADC1SMEN: u32 = 512;
pub const RCC_APB2SMENR_DBGMCUSMEN: u32 = 4194304;
pub const RCC_APB1SMENR_TIM2SMEN_Pos: u32 = 0;
pub const RCC_APB1SMENR_TIM2SMEN_Msk: u32 = 1;
pub const RCC_APB1SMENR_TIM2SMEN: u32 = 1;
pub const RCC_APB1SMENR_TIM3SMEN_Pos: u32 = 1;
pub const RCC_APB1SMENR_TIM3SMEN_Msk: u32 = 2;
pub const RCC_APB1SMENR_TIM3SMEN: u32 = 2;
pub const RCC_APB1SMENR_TIM6SMEN_Pos: u32 = 4;
pub const RCC_APB1SMENR_TIM6SMEN_Msk: u32 = 16;
pub const RCC_APB1SMENR_TIM6SMEN: u32 = 16;
pub const RCC_APB1SMENR_TIM7SMEN_Pos: u32 = 5;
pub const RCC_APB1SMENR_TIM7SMEN_Msk: u32 = 32;
pub const RCC_APB1SMENR_TIM7SMEN: u32 = 32;
pub const RCC_APB1SMENR_WWDGSMEN_Pos: u32 = 11;
pub const RCC_APB1SMENR_WWDGSMEN_Msk: u32 = 2048;
pub const RCC_APB1SMENR_WWDGSMEN: u32 = 2048;
pub const RCC_APB1SMENR_SPI2SMEN_Pos: u32 = 14;
pub const RCC_APB1SMENR_SPI2SMEN_Msk: u32 = 16384;
pub const RCC_APB1SMENR_SPI2SMEN: u32 = 16384;
pub const RCC_APB1SMENR_USART2SMEN_Pos: u32 = 17;
pub const RCC_APB1SMENR_USART2SMEN_Msk: u32 = 131072;
pub const RCC_APB1SMENR_USART2SMEN: u32 = 131072;
pub const RCC_APB1SMENR_LPUART1SMEN_Pos: u32 = 18;
pub const RCC_APB1SMENR_LPUART1SMEN_Msk: u32 = 262144;
pub const RCC_APB1SMENR_LPUART1SMEN: u32 = 262144;
pub const RCC_APB1SMENR_USART4SMEN_Pos: u32 = 19;
pub const RCC_APB1SMENR_USART4SMEN_Msk: u32 = 524288;
pub const RCC_APB1SMENR_USART4SMEN: u32 = 524288;
pub const RCC_APB1SMENR_USART5SMEN_Pos: u32 = 20;
pub const RCC_APB1SMENR_USART5SMEN_Msk: u32 = 1048576;
pub const RCC_APB1SMENR_USART5SMEN: u32 = 1048576;
pub const RCC_APB1SMENR_I2C1SMEN_Pos: u32 = 21;
pub const RCC_APB1SMENR_I2C1SMEN_Msk: u32 = 2097152;
pub const RCC_APB1SMENR_I2C1SMEN: u32 = 2097152;
pub const RCC_APB1SMENR_I2C2SMEN_Pos: u32 = 22;
pub const RCC_APB1SMENR_I2C2SMEN_Msk: u32 = 4194304;
pub const RCC_APB1SMENR_I2C2SMEN: u32 = 4194304;
pub const RCC_APB1SMENR_USBSMEN_Pos: u32 = 23;
pub const RCC_APB1SMENR_USBSMEN_Msk: u32 = 8388608;
pub const RCC_APB1SMENR_USBSMEN: u32 = 8388608;
pub const RCC_APB1SMENR_CRSSMEN_Pos: u32 = 27;
pub const RCC_APB1SMENR_CRSSMEN_Msk: u32 = 134217728;
pub const RCC_APB1SMENR_CRSSMEN: u32 = 134217728;
pub const RCC_APB1SMENR_PWRSMEN_Pos: u32 = 28;
pub const RCC_APB1SMENR_PWRSMEN_Msk: u32 = 268435456;
pub const RCC_APB1SMENR_PWRSMEN: u32 = 268435456;
pub const RCC_APB1SMENR_DACSMEN_Pos: u32 = 29;
pub const RCC_APB1SMENR_DACSMEN_Msk: u32 = 536870912;
pub const RCC_APB1SMENR_DACSMEN: u32 = 536870912;
pub const RCC_APB1SMENR_I2C3SMEN_Pos: u32 = 30;
pub const RCC_APB1SMENR_I2C3SMEN_Msk: u32 = 1073741824;
pub const RCC_APB1SMENR_I2C3SMEN: u32 = 1073741824;
pub const RCC_APB1SMENR_LPTIM1SMEN_Pos: u32 = 31;
pub const RCC_APB1SMENR_LPTIM1SMEN_Msk: u32 = 2147483648;
pub const RCC_APB1SMENR_LPTIM1SMEN: u32 = 2147483648;
pub const RCC_CCIPR_USART1SEL_Pos: u32 = 0;
pub const RCC_CCIPR_USART1SEL_Msk: u32 = 3;
pub const RCC_CCIPR_USART1SEL: u32 = 3;
pub const RCC_CCIPR_USART1SEL_0: u32 = 1;
pub const RCC_CCIPR_USART1SEL_1: u32 = 2;
pub const RCC_CCIPR_USART2SEL_Pos: u32 = 2;
pub const RCC_CCIPR_USART2SEL_Msk: u32 = 12;
pub const RCC_CCIPR_USART2SEL: u32 = 12;
pub const RCC_CCIPR_USART2SEL_0: u32 = 4;
pub const RCC_CCIPR_USART2SEL_1: u32 = 8;
pub const RCC_CCIPR_LPUART1SEL_Pos: u32 = 10;
pub const RCC_CCIPR_LPUART1SEL_Msk: u32 = 3072;
pub const RCC_CCIPR_LPUART1SEL: u32 = 3072;
pub const RCC_CCIPR_LPUART1SEL_0: u32 = 1024;
pub const RCC_CCIPR_LPUART1SEL_1: u32 = 2048;
pub const RCC_CCIPR_I2C1SEL_Pos: u32 = 12;
pub const RCC_CCIPR_I2C1SEL_Msk: u32 = 12288;
pub const RCC_CCIPR_I2C1SEL: u32 = 12288;
pub const RCC_CCIPR_I2C1SEL_0: u32 = 4096;
pub const RCC_CCIPR_I2C1SEL_1: u32 = 8192;
pub const RCC_CCIPR_I2C3SEL_Pos: u32 = 16;
pub const RCC_CCIPR_I2C3SEL_Msk: u32 = 196608;
pub const RCC_CCIPR_I2C3SEL: u32 = 196608;
pub const RCC_CCIPR_I2C3SEL_0: u32 = 65536;
pub const RCC_CCIPR_I2C3SEL_1: u32 = 131072;
pub const RCC_CCIPR_LPTIM1SEL_Pos: u32 = 18;
pub const RCC_CCIPR_LPTIM1SEL_Msk: u32 = 786432;
pub const RCC_CCIPR_LPTIM1SEL: u32 = 786432;
pub const RCC_CCIPR_LPTIM1SEL_0: u32 = 262144;
pub const RCC_CCIPR_LPTIM1SEL_1: u32 = 524288;
pub const RCC_CCIPR_HSI48SEL_Pos: u32 = 26;
pub const RCC_CCIPR_HSI48SEL_Msk: u32 = 67108864;
pub const RCC_CCIPR_HSI48SEL: u32 = 67108864;
pub const RCC_CCIPR_HSI48MSEL: u32 = 67108864;
pub const RCC_CSR_LSION_Pos: u32 = 0;
pub const RCC_CSR_LSION_Msk: u32 = 1;
pub const RCC_CSR_LSION: u32 = 1;
pub const RCC_CSR_LSIRDY_Pos: u32 = 1;
pub const RCC_CSR_LSIRDY_Msk: u32 = 2;
pub const RCC_CSR_LSIRDY: u32 = 2;
pub const RCC_CSR_LSEON_Pos: u32 = 8;
pub const RCC_CSR_LSEON_Msk: u32 = 256;
pub const RCC_CSR_LSEON: u32 = 256;
pub const RCC_CSR_LSERDY_Pos: u32 = 9;
pub const RCC_CSR_LSERDY_Msk: u32 = 512;
pub const RCC_CSR_LSERDY: u32 = 512;
pub const RCC_CSR_LSEBYP_Pos: u32 = 10;
pub const RCC_CSR_LSEBYP_Msk: u32 = 1024;
pub const RCC_CSR_LSEBYP: u32 = 1024;
pub const RCC_CSR_LSEDRV_Pos: u32 = 11;
pub const RCC_CSR_LSEDRV_Msk: u32 = 6144;
pub const RCC_CSR_LSEDRV: u32 = 6144;
pub const RCC_CSR_LSEDRV_0: u32 = 2048;
pub const RCC_CSR_LSEDRV_1: u32 = 4096;
pub const RCC_CSR_LSECSSON_Pos: u32 = 13;
pub const RCC_CSR_LSECSSON_Msk: u32 = 8192;
pub const RCC_CSR_LSECSSON: u32 = 8192;
pub const RCC_CSR_LSECSSD_Pos: u32 = 14;
pub const RCC_CSR_LSECSSD_Msk: u32 = 16384;
pub const RCC_CSR_LSECSSD: u32 = 16384;
pub const RCC_CSR_RTCSEL_Pos: u32 = 16;
pub const RCC_CSR_RTCSEL_Msk: u32 = 196608;
pub const RCC_CSR_RTCSEL: u32 = 196608;
pub const RCC_CSR_RTCSEL_0: u32 = 65536;
pub const RCC_CSR_RTCSEL_1: u32 = 131072;
pub const RCC_CSR_RTCSEL_NOCLOCK: u32 = 0;
pub const RCC_CSR_RTCSEL_LSE_Pos: u32 = 16;
pub const RCC_CSR_RTCSEL_LSE_Msk: u32 = 65536;
pub const RCC_CSR_RTCSEL_LSE: u32 = 65536;
pub const RCC_CSR_RTCSEL_LSI_Pos: u32 = 17;
pub const RCC_CSR_RTCSEL_LSI_Msk: u32 = 131072;
pub const RCC_CSR_RTCSEL_LSI: u32 = 131072;
pub const RCC_CSR_RTCSEL_HSE_Pos: u32 = 16;
pub const RCC_CSR_RTCSEL_HSE_Msk: u32 = 196608;
pub const RCC_CSR_RTCSEL_HSE: u32 = 196608;
pub const RCC_CSR_RTCEN_Pos: u32 = 18;
pub const RCC_CSR_RTCEN_Msk: u32 = 262144;
pub const RCC_CSR_RTCEN: u32 = 262144;
pub const RCC_CSR_RTCRST_Pos: u32 = 19;
pub const RCC_CSR_RTCRST_Msk: u32 = 524288;
pub const RCC_CSR_RTCRST: u32 = 524288;
pub const RCC_CSR_RMVF_Pos: u32 = 23;
pub const RCC_CSR_RMVF_Msk: u32 = 8388608;
pub const RCC_CSR_RMVF: u32 = 8388608;
pub const RCC_CSR_FWRSTF_Pos: u32 = 24;
pub const RCC_CSR_FWRSTF_Msk: u32 = 16777216;
pub const RCC_CSR_FWRSTF: u32 = 16777216;
pub const RCC_CSR_OBLRSTF_Pos: u32 = 25;
pub const RCC_CSR_OBLRSTF_Msk: u32 = 33554432;
pub const RCC_CSR_OBLRSTF: u32 = 33554432;
pub const RCC_CSR_PINRSTF_Pos: u32 = 26;
pub const RCC_CSR_PINRSTF_Msk: u32 = 67108864;
pub const RCC_CSR_PINRSTF: u32 = 67108864;
pub const RCC_CSR_PORRSTF_Pos: u32 = 27;
pub const RCC_CSR_PORRSTF_Msk: u32 = 134217728;
pub const RCC_CSR_PORRSTF: u32 = 134217728;
pub const RCC_CSR_SFTRSTF_Pos: u32 = 28;
pub const RCC_CSR_SFTRSTF_Msk: u32 = 268435456;
pub const RCC_CSR_SFTRSTF: u32 = 268435456;
pub const RCC_CSR_IWDGRSTF_Pos: u32 = 29;
pub const RCC_CSR_IWDGRSTF_Msk: u32 = 536870912;
pub const RCC_CSR_IWDGRSTF: u32 = 536870912;
pub const RCC_CSR_WWDGRSTF_Pos: u32 = 30;
pub const RCC_CSR_WWDGRSTF_Msk: u32 = 1073741824;
pub const RCC_CSR_WWDGRSTF: u32 = 1073741824;
pub const RCC_CSR_LPWRRSTF_Pos: u32 = 31;
pub const RCC_CSR_LPWRRSTF_Msk: u32 = 2147483648;
pub const RCC_CSR_LPWRRSTF: u32 = 2147483648;
pub const RCC_CSR_OBL: u32 = 33554432;
pub const RNG_CR_RNGEN_Pos: u32 = 2;
pub const RNG_CR_RNGEN_Msk: u32 = 4;
pub const RNG_CR_RNGEN: u32 = 4;
pub const RNG_CR_IE_Pos: u32 = 3;
pub const RNG_CR_IE_Msk: u32 = 8;
pub const RNG_CR_IE: u32 = 8;
pub const RNG_SR_DRDY_Pos: u32 = 0;
pub const RNG_SR_DRDY_Msk: u32 = 1;
pub const RNG_SR_DRDY: u32 = 1;
pub const RNG_SR_CECS_Pos: u32 = 1;
pub const RNG_SR_CECS_Msk: u32 = 2;
pub const RNG_SR_CECS: u32 = 2;
pub const RNG_SR_SECS_Pos: u32 = 2;
pub const RNG_SR_SECS_Msk: u32 = 4;
pub const RNG_SR_SECS: u32 = 4;
pub const RNG_SR_CEIS_Pos: u32 = 5;
pub const RNG_SR_CEIS_Msk: u32 = 32;
pub const RNG_SR_CEIS: u32 = 32;
pub const RNG_SR_SEIS_Pos: u32 = 6;
pub const RNG_SR_SEIS_Msk: u32 = 64;
pub const RNG_SR_SEIS: u32 = 64;
pub const RTC_TR_PM_Pos: u32 = 22;
pub const RTC_TR_PM_Msk: u32 = 4194304;
pub const RTC_TR_PM: u32 = 4194304;
pub const RTC_TR_HT_Pos: u32 = 20;
pub const RTC_TR_HT_Msk: u32 = 3145728;
pub const RTC_TR_HT: u32 = 3145728;
pub const RTC_TR_HT_0: u32 = 1048576;
pub const RTC_TR_HT_1: u32 = 2097152;
pub const RTC_TR_HU_Pos: u32 = 16;
pub const RTC_TR_HU_Msk: u32 = 983040;
pub const RTC_TR_HU: u32 = 983040;
pub const RTC_TR_HU_0: u32 = 65536;
pub const RTC_TR_HU_1: u32 = 131072;
pub const RTC_TR_HU_2: u32 = 262144;
pub const RTC_TR_HU_3: u32 = 524288;
pub const RTC_TR_MNT_Pos: u32 = 12;
pub const RTC_TR_MNT_Msk: u32 = 28672;
pub const RTC_TR_MNT: u32 = 28672;
pub const RTC_TR_MNT_0: u32 = 4096;
pub const RTC_TR_MNT_1: u32 = 8192;
pub const RTC_TR_MNT_2: u32 = 16384;
pub const RTC_TR_MNU_Pos: u32 = 8;
pub const RTC_TR_MNU_Msk: u32 = 3840;
pub const RTC_TR_MNU: u32 = 3840;
pub const RTC_TR_MNU_0: u32 = 256;
pub const RTC_TR_MNU_1: u32 = 512;
pub const RTC_TR_MNU_2: u32 = 1024;
pub const RTC_TR_MNU_3: u32 = 2048;
pub const RTC_TR_ST_Pos: u32 = 4;
pub const RTC_TR_ST_Msk: u32 = 112;
pub const RTC_TR_ST: u32 = 112;
pub const RTC_TR_ST_0: u32 = 16;
pub const RTC_TR_ST_1: u32 = 32;
pub const RTC_TR_ST_2: u32 = 64;
pub const RTC_TR_SU_Pos: u32 = 0;
pub const RTC_TR_SU_Msk: u32 = 15;
pub const RTC_TR_SU: u32 = 15;
pub const RTC_TR_SU_0: u32 = 1;
pub const RTC_TR_SU_1: u32 = 2;
pub const RTC_TR_SU_2: u32 = 4;
pub const RTC_TR_SU_3: u32 = 8;
pub const RTC_DR_YT_Pos: u32 = 20;
pub const RTC_DR_YT_Msk: u32 = 15728640;
pub const RTC_DR_YT: u32 = 15728640;
pub const RTC_DR_YT_0: u32 = 1048576;
pub const RTC_DR_YT_1: u32 = 2097152;
pub const RTC_DR_YT_2: u32 = 4194304;
pub const RTC_DR_YT_3: u32 = 8388608;
pub const RTC_DR_YU_Pos: u32 = 16;
pub const RTC_DR_YU_Msk: u32 = 983040;
pub const RTC_DR_YU: u32 = 983040;
pub const RTC_DR_YU_0: u32 = 65536;
pub const RTC_DR_YU_1: u32 = 131072;
pub const RTC_DR_YU_2: u32 = 262144;
pub const RTC_DR_YU_3: u32 = 524288;
pub const RTC_DR_WDU_Pos: u32 = 13;
pub const RTC_DR_WDU_Msk: u32 = 57344;
pub const RTC_DR_WDU: u32 = 57344;
pub const RTC_DR_WDU_0: u32 = 8192;
pub const RTC_DR_WDU_1: u32 = 16384;
pub const RTC_DR_WDU_2: u32 = 32768;
pub const RTC_DR_MT_Pos: u32 = 12;
pub const RTC_DR_MT_Msk: u32 = 4096;
pub const RTC_DR_MT: u32 = 4096;
pub const RTC_DR_MU_Pos: u32 = 8;
pub const RTC_DR_MU_Msk: u32 = 3840;
pub const RTC_DR_MU: u32 = 3840;
pub const RTC_DR_MU_0: u32 = 256;
pub const RTC_DR_MU_1: u32 = 512;
pub const RTC_DR_MU_2: u32 = 1024;
pub const RTC_DR_MU_3: u32 = 2048;
pub const RTC_DR_DT_Pos: u32 = 4;
pub const RTC_DR_DT_Msk: u32 = 48;
pub const RTC_DR_DT: u32 = 48;
pub const RTC_DR_DT_0: u32 = 16;
pub const RTC_DR_DT_1: u32 = 32;
pub const RTC_DR_DU_Pos: u32 = 0;
pub const RTC_DR_DU_Msk: u32 = 15;
pub const RTC_DR_DU: u32 = 15;
pub const RTC_DR_DU_0: u32 = 1;
pub const RTC_DR_DU_1: u32 = 2;
pub const RTC_DR_DU_2: u32 = 4;
pub const RTC_DR_DU_3: u32 = 8;
pub const RTC_CR_COE_Pos: u32 = 23;
pub const RTC_CR_COE_Msk: u32 = 8388608;
pub const RTC_CR_COE: u32 = 8388608;
pub const RTC_CR_OSEL_Pos: u32 = 21;
pub const RTC_CR_OSEL_Msk: u32 = 6291456;
pub const RTC_CR_OSEL: u32 = 6291456;
pub const RTC_CR_OSEL_0: u32 = 2097152;
pub const RTC_CR_OSEL_1: u32 = 4194304;
pub const RTC_CR_POL_Pos: u32 = 20;
pub const RTC_CR_POL_Msk: u32 = 1048576;
pub const RTC_CR_POL: u32 = 1048576;
pub const RTC_CR_COSEL_Pos: u32 = 19;
pub const RTC_CR_COSEL_Msk: u32 = 524288;
pub const RTC_CR_COSEL: u32 = 524288;
pub const RTC_CR_BKP_Pos: u32 = 18;
pub const RTC_CR_BKP_Msk: u32 = 262144;
pub const RTC_CR_BKP: u32 = 262144;
pub const RTC_CR_SUB1H_Pos: u32 = 17;
pub const RTC_CR_SUB1H_Msk: u32 = 131072;
pub const RTC_CR_SUB1H: u32 = 131072;
pub const RTC_CR_ADD1H_Pos: u32 = 16;
pub const RTC_CR_ADD1H_Msk: u32 = 65536;
pub const RTC_CR_ADD1H: u32 = 65536;
pub const RTC_CR_TSIE_Pos: u32 = 15;
pub const RTC_CR_TSIE_Msk: u32 = 32768;
pub const RTC_CR_TSIE: u32 = 32768;
pub const RTC_CR_WUTIE_Pos: u32 = 14;
pub const RTC_CR_WUTIE_Msk: u32 = 16384;
pub const RTC_CR_WUTIE: u32 = 16384;
pub const RTC_CR_ALRBIE_Pos: u32 = 13;
pub const RTC_CR_ALRBIE_Msk: u32 = 8192;
pub const RTC_CR_ALRBIE: u32 = 8192;
pub const RTC_CR_ALRAIE_Pos: u32 = 12;
pub const RTC_CR_ALRAIE_Msk: u32 = 4096;
pub const RTC_CR_ALRAIE: u32 = 4096;
pub const RTC_CR_TSE_Pos: u32 = 11;
pub const RTC_CR_TSE_Msk: u32 = 2048;
pub const RTC_CR_TSE: u32 = 2048;
pub const RTC_CR_WUTE_Pos: u32 = 10;
pub const RTC_CR_WUTE_Msk: u32 = 1024;
pub const RTC_CR_WUTE: u32 = 1024;
pub const RTC_CR_ALRBE_Pos: u32 = 9;
pub const RTC_CR_ALRBE_Msk: u32 = 512;
pub const RTC_CR_ALRBE: u32 = 512;
pub const RTC_CR_ALRAE_Pos: u32 = 8;
pub const RTC_CR_ALRAE_Msk: u32 = 256;
pub const RTC_CR_ALRAE: u32 = 256;
pub const RTC_CR_FMT_Pos: u32 = 6;
pub const RTC_CR_FMT_Msk: u32 = 64;
pub const RTC_CR_FMT: u32 = 64;
pub const RTC_CR_BYPSHAD_Pos: u32 = 5;
pub const RTC_CR_BYPSHAD_Msk: u32 = 32;
pub const RTC_CR_BYPSHAD: u32 = 32;
pub const RTC_CR_REFCKON_Pos: u32 = 4;
pub const RTC_CR_REFCKON_Msk: u32 = 16;
pub const RTC_CR_REFCKON: u32 = 16;
pub const RTC_CR_TSEDGE_Pos: u32 = 3;
pub const RTC_CR_TSEDGE_Msk: u32 = 8;
pub const RTC_CR_TSEDGE: u32 = 8;
pub const RTC_CR_WUCKSEL_Pos: u32 = 0;
pub const RTC_CR_WUCKSEL_Msk: u32 = 7;
pub const RTC_CR_WUCKSEL: u32 = 7;
pub const RTC_CR_WUCKSEL_0: u32 = 1;
pub const RTC_CR_WUCKSEL_1: u32 = 2;
pub const RTC_CR_WUCKSEL_2: u32 = 4;
pub const RTC_ISR_RECALPF_Pos: u32 = 16;
pub const RTC_ISR_RECALPF_Msk: u32 = 65536;
pub const RTC_ISR_RECALPF: u32 = 65536;
pub const RTC_ISR_TAMP3F_Pos: u32 = 15;
pub const RTC_ISR_TAMP3F_Msk: u32 = 32768;
pub const RTC_ISR_TAMP3F: u32 = 32768;
pub const RTC_ISR_TAMP2F_Pos: u32 = 14;
pub const RTC_ISR_TAMP2F_Msk: u32 = 16384;
pub const RTC_ISR_TAMP2F: u32 = 16384;
pub const RTC_ISR_TAMP1F_Pos: u32 = 13;
pub const RTC_ISR_TAMP1F_Msk: u32 = 8192;
pub const RTC_ISR_TAMP1F: u32 = 8192;
pub const RTC_ISR_TSOVF_Pos: u32 = 12;
pub const RTC_ISR_TSOVF_Msk: u32 = 4096;
pub const RTC_ISR_TSOVF: u32 = 4096;
pub const RTC_ISR_TSF_Pos: u32 = 11;
pub const RTC_ISR_TSF_Msk: u32 = 2048;
pub const RTC_ISR_TSF: u32 = 2048;
pub const RTC_ISR_WUTF_Pos: u32 = 10;
pub const RTC_ISR_WUTF_Msk: u32 = 1024;
pub const RTC_ISR_WUTF: u32 = 1024;
pub const RTC_ISR_ALRBF_Pos: u32 = 9;
pub const RTC_ISR_ALRBF_Msk: u32 = 512;
pub const RTC_ISR_ALRBF: u32 = 512;
pub const RTC_ISR_ALRAF_Pos: u32 = 8;
pub const RTC_ISR_ALRAF_Msk: u32 = 256;
pub const RTC_ISR_ALRAF: u32 = 256;
pub const RTC_ISR_INIT_Pos: u32 = 7;
pub const RTC_ISR_INIT_Msk: u32 = 128;
pub const RTC_ISR_INIT: u32 = 128;
pub const RTC_ISR_INITF_Pos: u32 = 6;
pub const RTC_ISR_INITF_Msk: u32 = 64;
pub const RTC_ISR_INITF: u32 = 64;
pub const RTC_ISR_RSF_Pos: u32 = 5;
pub const RTC_ISR_RSF_Msk: u32 = 32;
pub const RTC_ISR_RSF: u32 = 32;
pub const RTC_ISR_INITS_Pos: u32 = 4;
pub const RTC_ISR_INITS_Msk: u32 = 16;
pub const RTC_ISR_INITS: u32 = 16;
pub const RTC_ISR_SHPF_Pos: u32 = 3;
pub const RTC_ISR_SHPF_Msk: u32 = 8;
pub const RTC_ISR_SHPF: u32 = 8;
pub const RTC_ISR_WUTWF_Pos: u32 = 2;
pub const RTC_ISR_WUTWF_Msk: u32 = 4;
pub const RTC_ISR_WUTWF: u32 = 4;
pub const RTC_ISR_ALRBWF_Pos: u32 = 1;
pub const RTC_ISR_ALRBWF_Msk: u32 = 2;
pub const RTC_ISR_ALRBWF: u32 = 2;
pub const RTC_ISR_ALRAWF_Pos: u32 = 0;
pub const RTC_ISR_ALRAWF_Msk: u32 = 1;
pub const RTC_ISR_ALRAWF: u32 = 1;
pub const RTC_PRER_PREDIV_A_Pos: u32 = 16;
pub const RTC_PRER_PREDIV_A_Msk: u32 = 8323072;
pub const RTC_PRER_PREDIV_A: u32 = 8323072;
pub const RTC_PRER_PREDIV_S_Pos: u32 = 0;
pub const RTC_PRER_PREDIV_S_Msk: u32 = 32767;
pub const RTC_PRER_PREDIV_S: u32 = 32767;
pub const RTC_WUTR_WUT_Pos: u32 = 0;
pub const RTC_WUTR_WUT_Msk: u32 = 65535;
pub const RTC_WUTR_WUT: u32 = 65535;
pub const RTC_ALRMAR_MSK4_Pos: u32 = 31;
pub const RTC_ALRMAR_MSK4_Msk: u32 = 2147483648;
pub const RTC_ALRMAR_MSK4: u32 = 2147483648;
pub const RTC_ALRMAR_WDSEL_Pos: u32 = 30;
pub const RTC_ALRMAR_WDSEL_Msk: u32 = 1073741824;
pub const RTC_ALRMAR_WDSEL: u32 = 1073741824;
pub const RTC_ALRMAR_DT_Pos: u32 = 28;
pub const RTC_ALRMAR_DT_Msk: u32 = 805306368;
pub const RTC_ALRMAR_DT: u32 = 805306368;
pub const RTC_ALRMAR_DT_0: u32 = 268435456;
pub const RTC_ALRMAR_DT_1: u32 = 536870912;
pub const RTC_ALRMAR_DU_Pos: u32 = 24;
pub const RTC_ALRMAR_DU_Msk: u32 = 251658240;
pub const RTC_ALRMAR_DU: u32 = 251658240;
pub const RTC_ALRMAR_DU_0: u32 = 16777216;
pub const RTC_ALRMAR_DU_1: u32 = 33554432;
pub const RTC_ALRMAR_DU_2: u32 = 67108864;
pub const RTC_ALRMAR_DU_3: u32 = 134217728;
pub const RTC_ALRMAR_MSK3_Pos: u32 = 23;
pub const RTC_ALRMAR_MSK3_Msk: u32 = 8388608;
pub const RTC_ALRMAR_MSK3: u32 = 8388608;
pub const RTC_ALRMAR_PM_Pos: u32 = 22;
pub const RTC_ALRMAR_PM_Msk: u32 = 4194304;
pub const RTC_ALRMAR_PM: u32 = 4194304;
pub const RTC_ALRMAR_HT_Pos: u32 = 20;
pub const RTC_ALRMAR_HT_Msk: u32 = 3145728;
pub const RTC_ALRMAR_HT: u32 = 3145728;
pub const RTC_ALRMAR_HT_0: u32 = 1048576;
pub const RTC_ALRMAR_HT_1: u32 = 2097152;
pub const RTC_ALRMAR_HU_Pos: u32 = 16;
pub const RTC_ALRMAR_HU_Msk: u32 = 983040;
pub const RTC_ALRMAR_HU: u32 = 983040;
pub const RTC_ALRMAR_HU_0: u32 = 65536;
pub const RTC_ALRMAR_HU_1: u32 = 131072;
pub const RTC_ALRMAR_HU_2: u32 = 262144;
pub const RTC_ALRMAR_HU_3: u32 = 524288;
pub const RTC_ALRMAR_MSK2_Pos: u32 = 15;
pub const RTC_ALRMAR_MSK2_Msk: u32 = 32768;
pub const RTC_ALRMAR_MSK2: u32 = 32768;
pub const RTC_ALRMAR_MNT_Pos: u32 = 12;
pub const RTC_ALRMAR_MNT_Msk: u32 = 28672;
pub const RTC_ALRMAR_MNT: u32 = 28672;
pub const RTC_ALRMAR_MNT_0: u32 = 4096;
pub const RTC_ALRMAR_MNT_1: u32 = 8192;
pub const RTC_ALRMAR_MNT_2: u32 = 16384;
pub const RTC_ALRMAR_MNU_Pos: u32 = 8;
pub const RTC_ALRMAR_MNU_Msk: u32 = 3840;
pub const RTC_ALRMAR_MNU: u32 = 3840;
pub const RTC_ALRMAR_MNU_0: u32 = 256;
pub const RTC_ALRMAR_MNU_1: u32 = 512;
pub const RTC_ALRMAR_MNU_2: u32 = 1024;
pub const RTC_ALRMAR_MNU_3: u32 = 2048;
pub const RTC_ALRMAR_MSK1_Pos: u32 = 7;
pub const RTC_ALRMAR_MSK1_Msk: u32 = 128;
pub const RTC_ALRMAR_MSK1: u32 = 128;
pub const RTC_ALRMAR_ST_Pos: u32 = 4;
pub const RTC_ALRMAR_ST_Msk: u32 = 112;
pub const RTC_ALRMAR_ST: u32 = 112;
pub const RTC_ALRMAR_ST_0: u32 = 16;
pub const RTC_ALRMAR_ST_1: u32 = 32;
pub const RTC_ALRMAR_ST_2: u32 = 64;
pub const RTC_ALRMAR_SU_Pos: u32 = 0;
pub const RTC_ALRMAR_SU_Msk: u32 = 15;
pub const RTC_ALRMAR_SU: u32 = 15;
pub const RTC_ALRMAR_SU_0: u32 = 1;
pub const RTC_ALRMAR_SU_1: u32 = 2;
pub const RTC_ALRMAR_SU_2: u32 = 4;
pub const RTC_ALRMAR_SU_3: u32 = 8;
pub const RTC_ALRMBR_MSK4_Pos: u32 = 31;
pub const RTC_ALRMBR_MSK4_Msk: u32 = 2147483648;
pub const RTC_ALRMBR_MSK4: u32 = 2147483648;
pub const RTC_ALRMBR_WDSEL_Pos: u32 = 30;
pub const RTC_ALRMBR_WDSEL_Msk: u32 = 1073741824;
pub const RTC_ALRMBR_WDSEL: u32 = 1073741824;
pub const RTC_ALRMBR_DT_Pos: u32 = 28;
pub const RTC_ALRMBR_DT_Msk: u32 = 805306368;
pub const RTC_ALRMBR_DT: u32 = 805306368;
pub const RTC_ALRMBR_DT_0: u32 = 268435456;
pub const RTC_ALRMBR_DT_1: u32 = 536870912;
pub const RTC_ALRMBR_DU_Pos: u32 = 24;
pub const RTC_ALRMBR_DU_Msk: u32 = 251658240;
pub const RTC_ALRMBR_DU: u32 = 251658240;
pub const RTC_ALRMBR_DU_0: u32 = 16777216;
pub const RTC_ALRMBR_DU_1: u32 = 33554432;
pub const RTC_ALRMBR_DU_2: u32 = 67108864;
pub const RTC_ALRMBR_DU_3: u32 = 134217728;
pub const RTC_ALRMBR_MSK3_Pos: u32 = 23;
pub const RTC_ALRMBR_MSK3_Msk: u32 = 8388608;
pub const RTC_ALRMBR_MSK3: u32 = 8388608;
pub const RTC_ALRMBR_PM_Pos: u32 = 22;
pub const RTC_ALRMBR_PM_Msk: u32 = 4194304;
pub const RTC_ALRMBR_PM: u32 = 4194304;
pub const RTC_ALRMBR_HT_Pos: u32 = 20;
pub const RTC_ALRMBR_HT_Msk: u32 = 3145728;
pub const RTC_ALRMBR_HT: u32 = 3145728;
pub const RTC_ALRMBR_HT_0: u32 = 1048576;
pub const RTC_ALRMBR_HT_1: u32 = 2097152;
pub const RTC_ALRMBR_HU_Pos: u32 = 16;
pub const RTC_ALRMBR_HU_Msk: u32 = 983040;
pub const RTC_ALRMBR_HU: u32 = 983040;
pub const RTC_ALRMBR_HU_0: u32 = 65536;
pub const RTC_ALRMBR_HU_1: u32 = 131072;
pub const RTC_ALRMBR_HU_2: u32 = 262144;
pub const RTC_ALRMBR_HU_3: u32 = 524288;
pub const RTC_ALRMBR_MSK2_Pos: u32 = 15;
pub const RTC_ALRMBR_MSK2_Msk: u32 = 32768;
pub const RTC_ALRMBR_MSK2: u32 = 32768;
pub const RTC_ALRMBR_MNT_Pos: u32 = 12;
pub const RTC_ALRMBR_MNT_Msk: u32 = 28672;
pub const RTC_ALRMBR_MNT: u32 = 28672;
pub const RTC_ALRMBR_MNT_0: u32 = 4096;
pub const RTC_ALRMBR_MNT_1: u32 = 8192;
pub const RTC_ALRMBR_MNT_2: u32 = 16384;
pub const RTC_ALRMBR_MNU_Pos: u32 = 8;
pub const RTC_ALRMBR_MNU_Msk: u32 = 3840;
pub const RTC_ALRMBR_MNU: u32 = 3840;
pub const RTC_ALRMBR_MNU_0: u32 = 256;
pub const RTC_ALRMBR_MNU_1: u32 = 512;
pub const RTC_ALRMBR_MNU_2: u32 = 1024;
pub const RTC_ALRMBR_MNU_3: u32 = 2048;
pub const RTC_ALRMBR_MSK1_Pos: u32 = 7;
pub const RTC_ALRMBR_MSK1_Msk: u32 = 128;
pub const RTC_ALRMBR_MSK1: u32 = 128;
pub const RTC_ALRMBR_ST_Pos: u32 = 4;
pub const RTC_ALRMBR_ST_Msk: u32 = 112;
pub const RTC_ALRMBR_ST: u32 = 112;
pub const RTC_ALRMBR_ST_0: u32 = 16;
pub const RTC_ALRMBR_ST_1: u32 = 32;
pub const RTC_ALRMBR_ST_2: u32 = 64;
pub const RTC_ALRMBR_SU_Pos: u32 = 0;
pub const RTC_ALRMBR_SU_Msk: u32 = 15;
pub const RTC_ALRMBR_SU: u32 = 15;
pub const RTC_ALRMBR_SU_0: u32 = 1;
pub const RTC_ALRMBR_SU_1: u32 = 2;
pub const RTC_ALRMBR_SU_2: u32 = 4;
pub const RTC_ALRMBR_SU_3: u32 = 8;
pub const RTC_WPR_KEY_Pos: u32 = 0;
pub const RTC_WPR_KEY_Msk: u32 = 255;
pub const RTC_WPR_KEY: u32 = 255;
pub const RTC_SSR_SS_Pos: u32 = 0;
pub const RTC_SSR_SS_Msk: u32 = 65535;
pub const RTC_SSR_SS: u32 = 65535;
pub const RTC_SHIFTR_SUBFS_Pos: u32 = 0;
pub const RTC_SHIFTR_SUBFS_Msk: u32 = 32767;
pub const RTC_SHIFTR_SUBFS: u32 = 32767;
pub const RTC_SHIFTR_ADD1S_Pos: u32 = 31;
pub const RTC_SHIFTR_ADD1S_Msk: u32 = 2147483648;
pub const RTC_SHIFTR_ADD1S: u32 = 2147483648;
pub const RTC_TSTR_PM_Pos: u32 = 22;
pub const RTC_TSTR_PM_Msk: u32 = 4194304;
pub const RTC_TSTR_PM: u32 = 4194304;
pub const RTC_TSTR_HT_Pos: u32 = 20;
pub const RTC_TSTR_HT_Msk: u32 = 3145728;
pub const RTC_TSTR_HT: u32 = 3145728;
pub const RTC_TSTR_HT_0: u32 = 1048576;
pub const RTC_TSTR_HT_1: u32 = 2097152;
pub const RTC_TSTR_HU_Pos: u32 = 16;
pub const RTC_TSTR_HU_Msk: u32 = 983040;
pub const RTC_TSTR_HU: u32 = 983040;
pub const RTC_TSTR_HU_0: u32 = 65536;
pub const RTC_TSTR_HU_1: u32 = 131072;
pub const RTC_TSTR_HU_2: u32 = 262144;
pub const RTC_TSTR_HU_3: u32 = 524288;
pub const RTC_TSTR_MNT_Pos: u32 = 12;
pub const RTC_TSTR_MNT_Msk: u32 = 28672;
pub const RTC_TSTR_MNT: u32 = 28672;
pub const RTC_TSTR_MNT_0: u32 = 4096;
pub const RTC_TSTR_MNT_1: u32 = 8192;
pub const RTC_TSTR_MNT_2: u32 = 16384;
pub const RTC_TSTR_MNU_Pos: u32 = 8;
pub const RTC_TSTR_MNU_Msk: u32 = 3840;
pub const RTC_TSTR_MNU: u32 = 3840;
pub const RTC_TSTR_MNU_0: u32 = 256;
pub const RTC_TSTR_MNU_1: u32 = 512;
pub const RTC_TSTR_MNU_2: u32 = 1024;
pub const RTC_TSTR_MNU_3: u32 = 2048;
pub const RTC_TSTR_ST_Pos: u32 = 4;
pub const RTC_TSTR_ST_Msk: u32 = 112;
pub const RTC_TSTR_ST: u32 = 112;
pub const RTC_TSTR_ST_0: u32 = 16;
pub const RTC_TSTR_ST_1: u32 = 32;
pub const RTC_TSTR_ST_2: u32 = 64;
pub const RTC_TSTR_SU_Pos: u32 = 0;
pub const RTC_TSTR_SU_Msk: u32 = 15;
pub const RTC_TSTR_SU: u32 = 15;
pub const RTC_TSTR_SU_0: u32 = 1;
pub const RTC_TSTR_SU_1: u32 = 2;
pub const RTC_TSTR_SU_2: u32 = 4;
pub const RTC_TSTR_SU_3: u32 = 8;
pub const RTC_TSDR_WDU_Pos: u32 = 13;
pub const RTC_TSDR_WDU_Msk: u32 = 57344;
pub const RTC_TSDR_WDU: u32 = 57344;
pub const RTC_TSDR_WDU_0: u32 = 8192;
pub const RTC_TSDR_WDU_1: u32 = 16384;
pub const RTC_TSDR_WDU_2: u32 = 32768;
pub const RTC_TSDR_MT_Pos: u32 = 12;
pub const RTC_TSDR_MT_Msk: u32 = 4096;
pub const RTC_TSDR_MT: u32 = 4096;
pub const RTC_TSDR_MU_Pos: u32 = 8;
pub const RTC_TSDR_MU_Msk: u32 = 3840;
pub const RTC_TSDR_MU: u32 = 3840;
pub const RTC_TSDR_MU_0: u32 = 256;
pub const RTC_TSDR_MU_1: u32 = 512;
pub const RTC_TSDR_MU_2: u32 = 1024;
pub const RTC_TSDR_MU_3: u32 = 2048;
pub const RTC_TSDR_DT_Pos: u32 = 4;
pub const RTC_TSDR_DT_Msk: u32 = 48;
pub const RTC_TSDR_DT: u32 = 48;
pub const RTC_TSDR_DT_0: u32 = 16;
pub const RTC_TSDR_DT_1: u32 = 32;
pub const RTC_TSDR_DU_Pos: u32 = 0;
pub const RTC_TSDR_DU_Msk: u32 = 15;
pub const RTC_TSDR_DU: u32 = 15;
pub const RTC_TSDR_DU_0: u32 = 1;
pub const RTC_TSDR_DU_1: u32 = 2;
pub const RTC_TSDR_DU_2: u32 = 4;
pub const RTC_TSDR_DU_3: u32 = 8;
pub const RTC_TSSSR_SS_Pos: u32 = 0;
pub const RTC_TSSSR_SS_Msk: u32 = 65535;
pub const RTC_TSSSR_SS: u32 = 65535;
pub const RTC_CALR_CALP_Pos: u32 = 15;
pub const RTC_CALR_CALP_Msk: u32 = 32768;
pub const RTC_CALR_CALP: u32 = 32768;
pub const RTC_CALR_CALW8_Pos: u32 = 14;
pub const RTC_CALR_CALW8_Msk: u32 = 16384;
pub const RTC_CALR_CALW8: u32 = 16384;
pub const RTC_CALR_CALW16_Pos: u32 = 13;
pub const RTC_CALR_CALW16_Msk: u32 = 8192;
pub const RTC_CALR_CALW16: u32 = 8192;
pub const RTC_CALR_CALM_Pos: u32 = 0;
pub const RTC_CALR_CALM_Msk: u32 = 511;
pub const RTC_CALR_CALM: u32 = 511;
pub const RTC_CALR_CALM_0: u32 = 1;
pub const RTC_CALR_CALM_1: u32 = 2;
pub const RTC_CALR_CALM_2: u32 = 4;
pub const RTC_CALR_CALM_3: u32 = 8;
pub const RTC_CALR_CALM_4: u32 = 16;
pub const RTC_CALR_CALM_5: u32 = 32;
pub const RTC_CALR_CALM_6: u32 = 64;
pub const RTC_CALR_CALM_7: u32 = 128;
pub const RTC_CALR_CALM_8: u32 = 256;
pub const RTC_CAL_CALP: u32 = 32768;
pub const RTC_CAL_CALW8: u32 = 16384;
pub const RTC_CAL_CALW16: u32 = 8192;
pub const RTC_CAL_CALM: u32 = 511;
pub const RTC_CAL_CALM_0: u32 = 1;
pub const RTC_CAL_CALM_1: u32 = 2;
pub const RTC_CAL_CALM_2: u32 = 4;
pub const RTC_CAL_CALM_3: u32 = 8;
pub const RTC_CAL_CALM_4: u32 = 16;
pub const RTC_CAL_CALM_5: u32 = 32;
pub const RTC_CAL_CALM_6: u32 = 64;
pub const RTC_CAL_CALM_7: u32 = 128;
pub const RTC_CAL_CALM_8: u32 = 256;
pub const RTC_TAMPCR_TAMP3MF_Pos: u32 = 24;
pub const RTC_TAMPCR_TAMP3MF_Msk: u32 = 16777216;
pub const RTC_TAMPCR_TAMP3MF: u32 = 16777216;
pub const RTC_TAMPCR_TAMP3NOERASE_Pos: u32 = 23;
pub const RTC_TAMPCR_TAMP3NOERASE_Msk: u32 = 8388608;
pub const RTC_TAMPCR_TAMP3NOERASE: u32 = 8388608;
pub const RTC_TAMPCR_TAMP3IE_Pos: u32 = 22;
pub const RTC_TAMPCR_TAMP3IE_Msk: u32 = 4194304;
pub const RTC_TAMPCR_TAMP3IE: u32 = 4194304;
pub const RTC_TAMPCR_TAMP2MF_Pos: u32 = 21;
pub const RTC_TAMPCR_TAMP2MF_Msk: u32 = 2097152;
pub const RTC_TAMPCR_TAMP2MF: u32 = 2097152;
pub const RTC_TAMPCR_TAMP2NOERASE_Pos: u32 = 20;
pub const RTC_TAMPCR_TAMP2NOERASE_Msk: u32 = 1048576;
pub const RTC_TAMPCR_TAMP2NOERASE: u32 = 1048576;
pub const RTC_TAMPCR_TAMP2IE_Pos: u32 = 19;
pub const RTC_TAMPCR_TAMP2IE_Msk: u32 = 524288;
pub const RTC_TAMPCR_TAMP2IE: u32 = 524288;
pub const RTC_TAMPCR_TAMP1MF_Pos: u32 = 18;
pub const RTC_TAMPCR_TAMP1MF_Msk: u32 = 262144;
pub const RTC_TAMPCR_TAMP1MF: u32 = 262144;
pub const RTC_TAMPCR_TAMP1NOERASE_Pos: u32 = 17;
pub const RTC_TAMPCR_TAMP1NOERASE_Msk: u32 = 131072;
pub const RTC_TAMPCR_TAMP1NOERASE: u32 = 131072;
pub const RTC_TAMPCR_TAMP1IE_Pos: u32 = 16;
pub const RTC_TAMPCR_TAMP1IE_Msk: u32 = 65536;
pub const RTC_TAMPCR_TAMP1IE: u32 = 65536;
pub const RTC_TAMPCR_TAMPPUDIS_Pos: u32 = 15;
pub const RTC_TAMPCR_TAMPPUDIS_Msk: u32 = 32768;
pub const RTC_TAMPCR_TAMPPUDIS: u32 = 32768;
pub const RTC_TAMPCR_TAMPPRCH_Pos: u32 = 13;
pub const RTC_TAMPCR_TAMPPRCH_Msk: u32 = 24576;
pub const RTC_TAMPCR_TAMPPRCH: u32 = 24576;
pub const RTC_TAMPCR_TAMPPRCH_0: u32 = 8192;
pub const RTC_TAMPCR_TAMPPRCH_1: u32 = 16384;
pub const RTC_TAMPCR_TAMPFLT_Pos: u32 = 11;
pub const RTC_TAMPCR_TAMPFLT_Msk: u32 = 6144;
pub const RTC_TAMPCR_TAMPFLT: u32 = 6144;
pub const RTC_TAMPCR_TAMPFLT_0: u32 = 2048;
pub const RTC_TAMPCR_TAMPFLT_1: u32 = 4096;
pub const RTC_TAMPCR_TAMPFREQ_Pos: u32 = 8;
pub const RTC_TAMPCR_TAMPFREQ_Msk: u32 = 1792;
pub const RTC_TAMPCR_TAMPFREQ: u32 = 1792;
pub const RTC_TAMPCR_TAMPFREQ_0: u32 = 256;
pub const RTC_TAMPCR_TAMPFREQ_1: u32 = 512;
pub const RTC_TAMPCR_TAMPFREQ_2: u32 = 1024;
pub const RTC_TAMPCR_TAMPTS_Pos: u32 = 7;
pub const RTC_TAMPCR_TAMPTS_Msk: u32 = 128;
pub const RTC_TAMPCR_TAMPTS: u32 = 128;
pub const RTC_TAMPCR_TAMP3TRG_Pos: u32 = 6;
pub const RTC_TAMPCR_TAMP3TRG_Msk: u32 = 64;
pub const RTC_TAMPCR_TAMP3TRG: u32 = 64;
pub const RTC_TAMPCR_TAMP3E_Pos: u32 = 5;
pub const RTC_TAMPCR_TAMP3E_Msk: u32 = 32;
pub const RTC_TAMPCR_TAMP3E: u32 = 32;
pub const RTC_TAMPCR_TAMP2TRG_Pos: u32 = 4;
pub const RTC_TAMPCR_TAMP2TRG_Msk: u32 = 16;
pub const RTC_TAMPCR_TAMP2TRG: u32 = 16;
pub const RTC_TAMPCR_TAMP2E_Pos: u32 = 3;
pub const RTC_TAMPCR_TAMP2E_Msk: u32 = 8;
pub const RTC_TAMPCR_TAMP2E: u32 = 8;
pub const RTC_TAMPCR_TAMPIE_Pos: u32 = 2;
pub const RTC_TAMPCR_TAMPIE_Msk: u32 = 4;
pub const RTC_TAMPCR_TAMPIE: u32 = 4;
pub const RTC_TAMPCR_TAMP1TRG_Pos: u32 = 1;
pub const RTC_TAMPCR_TAMP1TRG_Msk: u32 = 2;
pub const RTC_TAMPCR_TAMP1TRG: u32 = 2;
pub const RTC_TAMPCR_TAMP1E_Pos: u32 = 0;
pub const RTC_TAMPCR_TAMP1E_Msk: u32 = 1;
pub const RTC_TAMPCR_TAMP1E: u32 = 1;
pub const RTC_ALRMASSR_MASKSS_Pos: u32 = 24;
pub const RTC_ALRMASSR_MASKSS_Msk: u32 = 251658240;
pub const RTC_ALRMASSR_MASKSS: u32 = 251658240;
pub const RTC_ALRMASSR_MASKSS_0: u32 = 16777216;
pub const RTC_ALRMASSR_MASKSS_1: u32 = 33554432;
pub const RTC_ALRMASSR_MASKSS_2: u32 = 67108864;
pub const RTC_ALRMASSR_MASKSS_3: u32 = 134217728;
pub const RTC_ALRMASSR_SS_Pos: u32 = 0;
pub const RTC_ALRMASSR_SS_Msk: u32 = 32767;
pub const RTC_ALRMASSR_SS: u32 = 32767;
pub const RTC_ALRMBSSR_MASKSS_Pos: u32 = 24;
pub const RTC_ALRMBSSR_MASKSS_Msk: u32 = 251658240;
pub const RTC_ALRMBSSR_MASKSS: u32 = 251658240;
pub const RTC_ALRMBSSR_MASKSS_0: u32 = 16777216;
pub const RTC_ALRMBSSR_MASKSS_1: u32 = 33554432;
pub const RTC_ALRMBSSR_MASKSS_2: u32 = 67108864;
pub const RTC_ALRMBSSR_MASKSS_3: u32 = 134217728;
pub const RTC_ALRMBSSR_SS_Pos: u32 = 0;
pub const RTC_ALRMBSSR_SS_Msk: u32 = 32767;
pub const RTC_ALRMBSSR_SS: u32 = 32767;
pub const RTC_OR_OUT_RMP_Pos: u32 = 1;
pub const RTC_OR_OUT_RMP_Msk: u32 = 2;
pub const RTC_OR_OUT_RMP: u32 = 2;
pub const RTC_OR_ALARMOUTTYPE_Pos: u32 = 0;
pub const RTC_OR_ALARMOUTTYPE_Msk: u32 = 1;
pub const RTC_OR_ALARMOUTTYPE: u32 = 1;
pub const RTC_OR_RTC_OUT_RMP: u32 = 2;
pub const RTC_BKP0R_Pos: u32 = 0;
pub const RTC_BKP0R_Msk: u32 = 4294967295;
pub const RTC_BKP0R: u32 = 4294967295;
pub const RTC_BKP1R_Pos: u32 = 0;
pub const RTC_BKP1R_Msk: u32 = 4294967295;
pub const RTC_BKP1R: u32 = 4294967295;
pub const RTC_BKP2R_Pos: u32 = 0;
pub const RTC_BKP2R_Msk: u32 = 4294967295;
pub const RTC_BKP2R: u32 = 4294967295;
pub const RTC_BKP3R_Pos: u32 = 0;
pub const RTC_BKP3R_Msk: u32 = 4294967295;
pub const RTC_BKP3R: u32 = 4294967295;
pub const RTC_BKP4R_Pos: u32 = 0;
pub const RTC_BKP4R_Msk: u32 = 4294967295;
pub const RTC_BKP4R: u32 = 4294967295;
pub const RTC_BKP_NUMBER: u32 = 5;
pub const SPI_CR1_CPHA_Pos: u32 = 0;
pub const SPI_CR1_CPHA_Msk: u32 = 1;
pub const SPI_CR1_CPHA: u32 = 1;
pub const SPI_CR1_CPOL_Pos: u32 = 1;
pub const SPI_CR1_CPOL_Msk: u32 = 2;
pub const SPI_CR1_CPOL: u32 = 2;
pub const SPI_CR1_MSTR_Pos: u32 = 2;
pub const SPI_CR1_MSTR_Msk: u32 = 4;
pub const SPI_CR1_MSTR: u32 = 4;
pub const SPI_CR1_BR_Pos: u32 = 3;
pub const SPI_CR1_BR_Msk: u32 = 56;
pub const SPI_CR1_BR: u32 = 56;
pub const SPI_CR1_BR_0: u32 = 8;
pub const SPI_CR1_BR_1: u32 = 16;
pub const SPI_CR1_BR_2: u32 = 32;
pub const SPI_CR1_SPE_Pos: u32 = 6;
pub const SPI_CR1_SPE_Msk: u32 = 64;
pub const SPI_CR1_SPE: u32 = 64;
pub const SPI_CR1_LSBFIRST_Pos: u32 = 7;
pub const SPI_CR1_LSBFIRST_Msk: u32 = 128;
pub const SPI_CR1_LSBFIRST: u32 = 128;
pub const SPI_CR1_SSI_Pos: u32 = 8;
pub const SPI_CR1_SSI_Msk: u32 = 256;
pub const SPI_CR1_SSI: u32 = 256;
pub const SPI_CR1_SSM_Pos: u32 = 9;
pub const SPI_CR1_SSM_Msk: u32 = 512;
pub const SPI_CR1_SSM: u32 = 512;
pub const SPI_CR1_RXONLY_Pos: u32 = 10;
pub const SPI_CR1_RXONLY_Msk: u32 = 1024;
pub const SPI_CR1_RXONLY: u32 = 1024;
pub const SPI_CR1_DFF_Pos: u32 = 11;
pub const SPI_CR1_DFF_Msk: u32 = 2048;
pub const SPI_CR1_DFF: u32 = 2048;
pub const SPI_CR1_CRCNEXT_Pos: u32 = 12;
pub const SPI_CR1_CRCNEXT_Msk: u32 = 4096;
pub const SPI_CR1_CRCNEXT: u32 = 4096;
pub const SPI_CR1_CRCEN_Pos: u32 = 13;
pub const SPI_CR1_CRCEN_Msk: u32 = 8192;
pub const SPI_CR1_CRCEN: u32 = 8192;
pub const SPI_CR1_BIDIOE_Pos: u32 = 14;
pub const SPI_CR1_BIDIOE_Msk: u32 = 16384;
pub const SPI_CR1_BIDIOE: u32 = 16384;
pub const SPI_CR1_BIDIMODE_Pos: u32 = 15;
pub const SPI_CR1_BIDIMODE_Msk: u32 = 32768;
pub const SPI_CR1_BIDIMODE: u32 = 32768;
pub const SPI_CR2_RXDMAEN_Pos: u32 = 0;
pub const SPI_CR2_RXDMAEN_Msk: u32 = 1;
pub const SPI_CR2_RXDMAEN: u32 = 1;
pub const SPI_CR2_TXDMAEN_Pos: u32 = 1;
pub const SPI_CR2_TXDMAEN_Msk: u32 = 2;
pub const SPI_CR2_TXDMAEN: u32 = 2;
pub const SPI_CR2_SSOE_Pos: u32 = 2;
pub const SPI_CR2_SSOE_Msk: u32 = 4;
pub const SPI_CR2_SSOE: u32 = 4;
pub const SPI_CR2_FRF_Pos: u32 = 4;
pub const SPI_CR2_FRF_Msk: u32 = 16;
pub const SPI_CR2_FRF: u32 = 16;
pub const SPI_CR2_ERRIE_Pos: u32 = 5;
pub const SPI_CR2_ERRIE_Msk: u32 = 32;
pub const SPI_CR2_ERRIE: u32 = 32;
pub const SPI_CR2_RXNEIE_Pos: u32 = 6;
pub const SPI_CR2_RXNEIE_Msk: u32 = 64;
pub const SPI_CR2_RXNEIE: u32 = 64;
pub const SPI_CR2_TXEIE_Pos: u32 = 7;
pub const SPI_CR2_TXEIE_Msk: u32 = 128;
pub const SPI_CR2_TXEIE: u32 = 128;
pub const SPI_SR_RXNE_Pos: u32 = 0;
pub const SPI_SR_RXNE_Msk: u32 = 1;
pub const SPI_SR_RXNE: u32 = 1;
pub const SPI_SR_TXE_Pos: u32 = 1;
pub const SPI_SR_TXE_Msk: u32 = 2;
pub const SPI_SR_TXE: u32 = 2;
pub const SPI_SR_CHSIDE_Pos: u32 = 2;
pub const SPI_SR_CHSIDE_Msk: u32 = 4;
pub const SPI_SR_CHSIDE: u32 = 4;
pub const SPI_SR_UDR_Pos: u32 = 3;
pub const SPI_SR_UDR_Msk: u32 = 8;
pub const SPI_SR_UDR: u32 = 8;
pub const SPI_SR_CRCERR_Pos: u32 = 4;
pub const SPI_SR_CRCERR_Msk: u32 = 16;
pub const SPI_SR_CRCERR: u32 = 16;
pub const SPI_SR_MODF_Pos: u32 = 5;
pub const SPI_SR_MODF_Msk: u32 = 32;
pub const SPI_SR_MODF: u32 = 32;
pub const SPI_SR_OVR_Pos: u32 = 6;
pub const SPI_SR_OVR_Msk: u32 = 64;
pub const SPI_SR_OVR: u32 = 64;
pub const SPI_SR_BSY_Pos: u32 = 7;
pub const SPI_SR_BSY_Msk: u32 = 128;
pub const SPI_SR_BSY: u32 = 128;
pub const SPI_SR_FRE_Pos: u32 = 8;
pub const SPI_SR_FRE_Msk: u32 = 256;
pub const SPI_SR_FRE: u32 = 256;
pub const SPI_DR_DR_Pos: u32 = 0;
pub const SPI_DR_DR_Msk: u32 = 65535;
pub const SPI_DR_DR: u32 = 65535;
pub const SPI_CRCPR_CRCPOLY_Pos: u32 = 0;
pub const SPI_CRCPR_CRCPOLY_Msk: u32 = 65535;
pub const SPI_CRCPR_CRCPOLY: u32 = 65535;
pub const SPI_RXCRCR_RXCRC_Pos: u32 = 0;
pub const SPI_RXCRCR_RXCRC_Msk: u32 = 65535;
pub const SPI_RXCRCR_RXCRC: u32 = 65535;
pub const SPI_TXCRCR_TXCRC_Pos: u32 = 0;
pub const SPI_TXCRCR_TXCRC_Msk: u32 = 65535;
pub const SPI_TXCRCR_TXCRC: u32 = 65535;
pub const SPI_I2SCFGR_CHLEN_Pos: u32 = 0;
pub const SPI_I2SCFGR_CHLEN_Msk: u32 = 1;
pub const SPI_I2SCFGR_CHLEN: u32 = 1;
pub const SPI_I2SCFGR_DATLEN_Pos: u32 = 1;
pub const SPI_I2SCFGR_DATLEN_Msk: u32 = 6;
pub const SPI_I2SCFGR_DATLEN: u32 = 6;
pub const SPI_I2SCFGR_DATLEN_0: u32 = 2;
pub const SPI_I2SCFGR_DATLEN_1: u32 = 4;
pub const SPI_I2SCFGR_CKPOL_Pos: u32 = 3;
pub const SPI_I2SCFGR_CKPOL_Msk: u32 = 8;
pub const SPI_I2SCFGR_CKPOL: u32 = 8;
pub const SPI_I2SCFGR_I2SSTD_Pos: u32 = 4;
pub const SPI_I2SCFGR_I2SSTD_Msk: u32 = 48;
pub const SPI_I2SCFGR_I2SSTD: u32 = 48;
pub const SPI_I2SCFGR_I2SSTD_0: u32 = 16;
pub const SPI_I2SCFGR_I2SSTD_1: u32 = 32;
pub const SPI_I2SCFGR_PCMSYNC_Pos: u32 = 7;
pub const SPI_I2SCFGR_PCMSYNC_Msk: u32 = 128;
pub const SPI_I2SCFGR_PCMSYNC: u32 = 128;
pub const SPI_I2SCFGR_I2SCFG_Pos: u32 = 8;
pub const SPI_I2SCFGR_I2SCFG_Msk: u32 = 768;
pub const SPI_I2SCFGR_I2SCFG: u32 = 768;
pub const SPI_I2SCFGR_I2SCFG_0: u32 = 256;
pub const SPI_I2SCFGR_I2SCFG_1: u32 = 512;
pub const SPI_I2SCFGR_I2SE_Pos: u32 = 10;
pub const SPI_I2SCFGR_I2SE_Msk: u32 = 1024;
pub const SPI_I2SCFGR_I2SE: u32 = 1024;
pub const SPI_I2SCFGR_I2SMOD_Pos: u32 = 11;
pub const SPI_I2SCFGR_I2SMOD_Msk: u32 = 2048;
pub const SPI_I2SCFGR_I2SMOD: u32 = 2048;
pub const SPI_I2SCFGR_ASTRTEN_Pos: u32 = 12;
pub const SPI_I2SCFGR_ASTRTEN_Msk: u32 = 4096;
pub const SPI_I2SCFGR_ASTRTEN: u32 = 4096;
pub const SPI_I2SPR_I2SDIV_Pos: u32 = 0;
pub const SPI_I2SPR_I2SDIV_Msk: u32 = 255;
pub const SPI_I2SPR_I2SDIV: u32 = 255;
pub const SPI_I2SPR_ODD_Pos: u32 = 8;
pub const SPI_I2SPR_ODD_Msk: u32 = 256;
pub const SPI_I2SPR_ODD: u32 = 256;
pub const SPI_I2SPR_MCKOE_Pos: u32 = 9;
pub const SPI_I2SPR_MCKOE_Msk: u32 = 512;
pub const SPI_I2SPR_MCKOE: u32 = 512;
pub const SYSCFG_CFGR1_MEM_MODE_Pos: u32 = 0;
pub const SYSCFG_CFGR1_MEM_MODE_Msk: u32 = 3;
pub const SYSCFG_CFGR1_MEM_MODE: u32 = 3;
pub const SYSCFG_CFGR1_MEM_MODE_0: u32 = 1;
pub const SYSCFG_CFGR1_MEM_MODE_1: u32 = 2;
pub const SYSCFG_CFGR1_UFB_Pos: u32 = 3;
pub const SYSCFG_CFGR1_UFB_Msk: u32 = 8;
pub const SYSCFG_CFGR1_UFB: u32 = 8;
pub const SYSCFG_CFGR1_BOOT_MODE_Pos: u32 = 8;
pub const SYSCFG_CFGR1_BOOT_MODE_Msk: u32 = 768;
pub const SYSCFG_CFGR1_BOOT_MODE: u32 = 768;
pub const SYSCFG_CFGR1_BOOT_MODE_0: u32 = 256;
pub const SYSCFG_CFGR1_BOOT_MODE_1: u32 = 512;
pub const SYSCFG_CFGR2_FWDISEN_Pos: u32 = 0;
pub const SYSCFG_CFGR2_FWDISEN_Msk: u32 = 1;
pub const SYSCFG_CFGR2_FWDISEN: u32 = 1;
pub const SYSCFG_CFGR2_I2C_PB6_FMP_Pos: u32 = 8;
pub const SYSCFG_CFGR2_I2C_PB6_FMP_Msk: u32 = 256;
pub const SYSCFG_CFGR2_I2C_PB6_FMP: u32 = 256;
pub const SYSCFG_CFGR2_I2C_PB7_FMP_Pos: u32 = 9;
pub const SYSCFG_CFGR2_I2C_PB7_FMP_Msk: u32 = 512;
pub const SYSCFG_CFGR2_I2C_PB7_FMP: u32 = 512;
pub const SYSCFG_CFGR2_I2C_PB8_FMP_Pos: u32 = 10;
pub const SYSCFG_CFGR2_I2C_PB8_FMP_Msk: u32 = 1024;
pub const SYSCFG_CFGR2_I2C_PB8_FMP: u32 = 1024;
pub const SYSCFG_CFGR2_I2C_PB9_FMP_Pos: u32 = 11;
pub const SYSCFG_CFGR2_I2C_PB9_FMP_Msk: u32 = 2048;
pub const SYSCFG_CFGR2_I2C_PB9_FMP: u32 = 2048;
pub const SYSCFG_CFGR2_I2C1_FMP_Pos: u32 = 12;
pub const SYSCFG_CFGR2_I2C1_FMP_Msk: u32 = 4096;
pub const SYSCFG_CFGR2_I2C1_FMP: u32 = 4096;
pub const SYSCFG_CFGR2_I2C2_FMP_Pos: u32 = 13;
pub const SYSCFG_CFGR2_I2C2_FMP_Msk: u32 = 8192;
pub const SYSCFG_CFGR2_I2C2_FMP: u32 = 8192;
pub const SYSCFG_CFGR2_I2C3_FMP_Pos: u32 = 14;
pub const SYSCFG_CFGR2_I2C3_FMP_Msk: u32 = 16384;
pub const SYSCFG_CFGR2_I2C3_FMP: u32 = 16384;
pub const SYSCFG_EXTICR1_EXTI0_Pos: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI0_Msk: u32 = 15;
pub const SYSCFG_EXTICR1_EXTI0: u32 = 15;
pub const SYSCFG_EXTICR1_EXTI1_Pos: u32 = 4;
pub const SYSCFG_EXTICR1_EXTI1_Msk: u32 = 240;
pub const SYSCFG_EXTICR1_EXTI1: u32 = 240;
pub const SYSCFG_EXTICR1_EXTI2_Pos: u32 = 8;
pub const SYSCFG_EXTICR1_EXTI2_Msk: u32 = 3840;
pub const SYSCFG_EXTICR1_EXTI2: u32 = 3840;
pub const SYSCFG_EXTICR1_EXTI3_Pos: u32 = 12;
pub const SYSCFG_EXTICR1_EXTI3_Msk: u32 = 61440;
pub const SYSCFG_EXTICR1_EXTI3: u32 = 61440;
pub const SYSCFG_EXTICR1_EXTI0_PA: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI0_PB: u32 = 1;
pub const SYSCFG_EXTICR1_EXTI0_PC: u32 = 2;
pub const SYSCFG_EXTICR1_EXTI0_PD: u32 = 3;
pub const SYSCFG_EXTICR1_EXTI0_PE: u32 = 4;
pub const SYSCFG_EXTICR1_EXTI0_PH: u32 = 5;
pub const SYSCFG_EXTICR1_EXTI1_PA: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI1_PB: u32 = 16;
pub const SYSCFG_EXTICR1_EXTI1_PC: u32 = 32;
pub const SYSCFG_EXTICR1_EXTI1_PD: u32 = 48;
pub const SYSCFG_EXTICR1_EXTI1_PE: u32 = 64;
pub const SYSCFG_EXTICR1_EXTI1_PH: u32 = 80;
pub const SYSCFG_EXTICR1_EXTI2_PA: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI2_PB: u32 = 256;
pub const SYSCFG_EXTICR1_EXTI2_PC: u32 = 512;
pub const SYSCFG_EXTICR1_EXTI2_PD: u32 = 768;
pub const SYSCFG_EXTICR1_EXTI2_PE: u32 = 1024;
pub const SYSCFG_EXTICR1_EXTI3_PA: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI3_PB: u32 = 4096;
pub const SYSCFG_EXTICR1_EXTI3_PC: u32 = 8192;
pub const SYSCFG_EXTICR1_EXTI3_PD: u32 = 12288;
pub const SYSCFG_EXTICR1_EXTI3_PE: u32 = 16384;
pub const SYSCFG_EXTICR2_EXTI4_Pos: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI4_Msk: u32 = 15;
pub const SYSCFG_EXTICR2_EXTI4: u32 = 15;
pub const SYSCFG_EXTICR2_EXTI5_Pos: u32 = 4;
pub const SYSCFG_EXTICR2_EXTI5_Msk: u32 = 240;
pub const SYSCFG_EXTICR2_EXTI5: u32 = 240;
pub const SYSCFG_EXTICR2_EXTI6_Pos: u32 = 8;
pub const SYSCFG_EXTICR2_EXTI6_Msk: u32 = 3840;
pub const SYSCFG_EXTICR2_EXTI6: u32 = 3840;
pub const SYSCFG_EXTICR2_EXTI7_Pos: u32 = 12;
pub const SYSCFG_EXTICR2_EXTI7_Msk: u32 = 61440;
pub const SYSCFG_EXTICR2_EXTI7: u32 = 61440;
pub const SYSCFG_EXTICR2_EXTI4_PA: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI4_PB: u32 = 1;
pub const SYSCFG_EXTICR2_EXTI4_PC: u32 = 2;
pub const SYSCFG_EXTICR2_EXTI4_PD: u32 = 3;
pub const SYSCFG_EXTICR2_EXTI4_PE: u32 = 4;
pub const SYSCFG_EXTICR2_EXTI5_PA: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI5_PB: u32 = 16;
pub const SYSCFG_EXTICR2_EXTI5_PC: u32 = 32;
pub const SYSCFG_EXTICR2_EXTI5_PD: u32 = 48;
pub const SYSCFG_EXTICR2_EXTI5_PE: u32 = 64;
pub const SYSCFG_EXTICR2_EXTI6_PA: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI6_PB: u32 = 256;
pub const SYSCFG_EXTICR2_EXTI6_PC: u32 = 512;
pub const SYSCFG_EXTICR2_EXTI6_PD: u32 = 768;
pub const SYSCFG_EXTICR2_EXTI6_PE: u32 = 1024;
pub const SYSCFG_EXTICR2_EXTI7_PA: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI7_PB: u32 = 4096;
pub const SYSCFG_EXTICR2_EXTI7_PC: u32 = 8192;
pub const SYSCFG_EXTICR2_EXTI7_PD: u32 = 12288;
pub const SYSCFG_EXTICR2_EXTI7_PE: u32 = 16384;
pub const SYSCFG_EXTICR3_EXTI8_Pos: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI8_Msk: u32 = 15;
pub const SYSCFG_EXTICR3_EXTI8: u32 = 15;
pub const SYSCFG_EXTICR3_EXTI9_Pos: u32 = 4;
pub const SYSCFG_EXTICR3_EXTI9_Msk: u32 = 240;
pub const SYSCFG_EXTICR3_EXTI9: u32 = 240;
pub const SYSCFG_EXTICR3_EXTI10_Pos: u32 = 8;
pub const SYSCFG_EXTICR3_EXTI10_Msk: u32 = 3840;
pub const SYSCFG_EXTICR3_EXTI10: u32 = 3840;
pub const SYSCFG_EXTICR3_EXTI11_Pos: u32 = 12;
pub const SYSCFG_EXTICR3_EXTI11_Msk: u32 = 61440;
pub const SYSCFG_EXTICR3_EXTI11: u32 = 61440;
pub const SYSCFG_EXTICR3_EXTI8_PA: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI8_PB: u32 = 1;
pub const SYSCFG_EXTICR3_EXTI8_PC: u32 = 2;
pub const SYSCFG_EXTICR3_EXTI8_PD: u32 = 3;
pub const SYSCFG_EXTICR3_EXTI8_PE: u32 = 4;
pub const SYSCFG_EXTICR3_EXTI9_PA: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI9_PB: u32 = 16;
pub const SYSCFG_EXTICR3_EXTI9_PC: u32 = 32;
pub const SYSCFG_EXTICR3_EXTI9_PD: u32 = 48;
pub const SYSCFG_EXTICR3_EXTI9_PE: u32 = 64;
pub const SYSCFG_EXTICR3_EXTI9_PH: u32 = 80;
pub const SYSCFG_EXTICR3_EXTI10_PA: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI10_PB: u32 = 256;
pub const SYSCFG_EXTICR3_EXTI10_PC: u32 = 512;
pub const SYSCFG_EXTICR3_EXTI10_PD: u32 = 768;
pub const SYSCFG_EXTICR3_EXTI10_PE: u32 = 1024;
pub const SYSCFG_EXTICR3_EXTI10_PH: u32 = 1280;
pub const SYSCFG_EXTICR3_EXTI11_PA: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI11_PB: u32 = 4096;
pub const SYSCFG_EXTICR3_EXTI11_PC: u32 = 8192;
pub const SYSCFG_EXTICR3_EXTI11_PD: u32 = 12288;
pub const SYSCFG_EXTICR3_EXTI11_PE: u32 = 16384;
pub const SYSCFG_EXTICR4_EXTI12_Pos: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI12_Msk: u32 = 15;
pub const SYSCFG_EXTICR4_EXTI12: u32 = 15;
pub const SYSCFG_EXTICR4_EXTI13_Pos: u32 = 4;
pub const SYSCFG_EXTICR4_EXTI13_Msk: u32 = 240;
pub const SYSCFG_EXTICR4_EXTI13: u32 = 240;
pub const SYSCFG_EXTICR4_EXTI14_Pos: u32 = 8;
pub const SYSCFG_EXTICR4_EXTI14_Msk: u32 = 3840;
pub const SYSCFG_EXTICR4_EXTI14: u32 = 3840;
pub const SYSCFG_EXTICR4_EXTI15_Pos: u32 = 12;
pub const SYSCFG_EXTICR4_EXTI15_Msk: u32 = 61440;
pub const SYSCFG_EXTICR4_EXTI15: u32 = 61440;
pub const SYSCFG_EXTICR4_EXTI12_PA: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI12_PB: u32 = 1;
pub const SYSCFG_EXTICR4_EXTI12_PC: u32 = 2;
pub const SYSCFG_EXTICR4_EXTI12_PD: u32 = 3;
pub const SYSCFG_EXTICR4_EXTI12_PE: u32 = 4;
pub const SYSCFG_EXTICR4_EXTI13_PA: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI13_PB: u32 = 16;
pub const SYSCFG_EXTICR4_EXTI13_PC: u32 = 32;
pub const SYSCFG_EXTICR4_EXTI13_PD: u32 = 48;
pub const SYSCFG_EXTICR4_EXTI13_PE: u32 = 64;
pub const SYSCFG_EXTICR4_EXTI14_PA: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI14_PB: u32 = 256;
pub const SYSCFG_EXTICR4_EXTI14_PC: u32 = 512;
pub const SYSCFG_EXTICR4_EXTI14_PD: u32 = 768;
pub const SYSCFG_EXTICR4_EXTI14_PE: u32 = 1024;
pub const SYSCFG_EXTICR4_EXTI15_PA: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI15_PB: u32 = 4096;
pub const SYSCFG_EXTICR4_EXTI15_PC: u32 = 8192;
pub const SYSCFG_EXTICR4_EXTI15_PD: u32 = 12288;
pub const SYSCFG_EXTICR4_EXTI15_PE: u32 = 16384;
pub const SYSCFG_CFGR3_EN_VREFINT_Pos: u32 = 0;
pub const SYSCFG_CFGR3_EN_VREFINT_Msk: u32 = 1;
pub const SYSCFG_CFGR3_EN_VREFINT: u32 = 1;
pub const SYSCFG_CFGR3_VREF_OUT_Pos: u32 = 4;
pub const SYSCFG_CFGR3_VREF_OUT_Msk: u32 = 48;
pub const SYSCFG_CFGR3_VREF_OUT: u32 = 48;
pub const SYSCFG_CFGR3_VREF_OUT_0: u32 = 16;
pub const SYSCFG_CFGR3_VREF_OUT_1: u32 = 32;
pub const SYSCFG_CFGR3_ENBUF_VREFINT_ADC_Pos: u32 = 8;
pub const SYSCFG_CFGR3_ENBUF_VREFINT_ADC_Msk: u32 = 256;
pub const SYSCFG_CFGR3_ENBUF_VREFINT_ADC: u32 = 256;
pub const SYSCFG_CFGR3_ENBUF_SENSOR_ADC_Pos: u32 = 9;
pub const SYSCFG_CFGR3_ENBUF_SENSOR_ADC_Msk: u32 = 512;
pub const SYSCFG_CFGR3_ENBUF_SENSOR_ADC: u32 = 512;
pub const SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP_Pos: u32 = 12;
pub const SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP_Msk: u32 = 4096;
pub const SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP: u32 = 4096;
pub const SYSCFG_CFGR3_ENREF_HSI48_Pos: u32 = 13;
pub const SYSCFG_CFGR3_ENREF_HSI48_Msk: u32 = 8192;
pub const SYSCFG_CFGR3_ENREF_HSI48: u32 = 8192;
pub const SYSCFG_CFGR3_VREFINT_RDYF_Pos: u32 = 30;
pub const SYSCFG_CFGR3_VREFINT_RDYF_Msk: u32 = 1073741824;
pub const SYSCFG_CFGR3_VREFINT_RDYF: u32 = 1073741824;
pub const SYSCFG_CFGR3_REF_LOCK_Pos: u32 = 31;
pub const SYSCFG_CFGR3_REF_LOCK_Msk: u32 = 2147483648;
pub const SYSCFG_CFGR3_REF_LOCK: u32 = 2147483648;
pub const SYSCFG_CFGR3_EN_BGAP: u32 = 1;
pub const SYSCFG_CFGR3_ENBUF_BGAP_ADC: u32 = 256;
pub const SYSCFG_CFGR3_ENBUFLP_BGAP_COMP: u32 = 4096;
pub const SYSCFG_CFGR3_ENREF_RC48MHz: u32 = 8192;
pub const SYSCFG_CFGR3_REF_RC48MHz_RDYF: u32 = 1073741824;
pub const SYSCFG_CFGR3_REF_HSI48_RDYF: u32 = 1073741824;
pub const SYSCFG_VREFINT_ADC_RDYF: u32 = 1073741824;
pub const SYSCFG_CFGR3_SENSOR_ADC_RDYF: u32 = 1073741824;
pub const SYSCFG_CFGR3_VREFINT_ADC_RDYF: u32 = 1073741824;
pub const SYSCFG_CFGR3_VREFINT_COMP_RDYF: u32 = 1073741824;
pub const TIM_CR1_CEN_Pos: u32 = 0;
pub const TIM_CR1_CEN_Msk: u32 = 1;
pub const TIM_CR1_CEN: u32 = 1;
pub const TIM_CR1_UDIS_Pos: u32 = 1;
pub const TIM_CR1_UDIS_Msk: u32 = 2;
pub const TIM_CR1_UDIS: u32 = 2;
pub const TIM_CR1_URS_Pos: u32 = 2;
pub const TIM_CR1_URS_Msk: u32 = 4;
pub const TIM_CR1_URS: u32 = 4;
pub const TIM_CR1_OPM_Pos: u32 = 3;
pub const TIM_CR1_OPM_Msk: u32 = 8;
pub const TIM_CR1_OPM: u32 = 8;
pub const TIM_CR1_DIR_Pos: u32 = 4;
pub const TIM_CR1_DIR_Msk: u32 = 16;
pub const TIM_CR1_DIR: u32 = 16;
pub const TIM_CR1_CMS_Pos: u32 = 5;
pub const TIM_CR1_CMS_Msk: u32 = 96;
pub const TIM_CR1_CMS: u32 = 96;
pub const TIM_CR1_CMS_0: u32 = 32;
pub const TIM_CR1_CMS_1: u32 = 64;
pub const TIM_CR1_ARPE_Pos: u32 = 7;
pub const TIM_CR1_ARPE_Msk: u32 = 128;
pub const TIM_CR1_ARPE: u32 = 128;
pub const TIM_CR1_CKD_Pos: u32 = 8;
pub const TIM_CR1_CKD_Msk: u32 = 768;
pub const TIM_CR1_CKD: u32 = 768;
pub const TIM_CR1_CKD_0: u32 = 256;
pub const TIM_CR1_CKD_1: u32 = 512;
pub const TIM_CR2_CCDS_Pos: u32 = 3;
pub const TIM_CR2_CCDS_Msk: u32 = 8;
pub const TIM_CR2_CCDS: u32 = 8;
pub const TIM_CR2_MMS_Pos: u32 = 4;
pub const TIM_CR2_MMS_Msk: u32 = 112;
pub const TIM_CR2_MMS: u32 = 112;
pub const TIM_CR2_MMS_0: u32 = 16;
pub const TIM_CR2_MMS_1: u32 = 32;
pub const TIM_CR2_MMS_2: u32 = 64;
pub const TIM_CR2_TI1S_Pos: u32 = 7;
pub const TIM_CR2_TI1S_Msk: u32 = 128;
pub const TIM_CR2_TI1S: u32 = 128;
pub const TIM_SMCR_SMS_Pos: u32 = 0;
pub const TIM_SMCR_SMS_Msk: u32 = 7;
pub const TIM_SMCR_SMS: u32 = 7;
pub const TIM_SMCR_SMS_0: u32 = 1;
pub const TIM_SMCR_SMS_1: u32 = 2;
pub const TIM_SMCR_SMS_2: u32 = 4;
pub const TIM_SMCR_TS_Pos: u32 = 4;
pub const TIM_SMCR_TS_Msk: u32 = 112;
pub const TIM_SMCR_TS: u32 = 112;
pub const TIM_SMCR_TS_0: u32 = 16;
pub const TIM_SMCR_TS_1: u32 = 32;
pub const TIM_SMCR_TS_2: u32 = 64;
pub const TIM_SMCR_MSM_Pos: u32 = 7;
pub const TIM_SMCR_MSM_Msk: u32 = 128;
pub const TIM_SMCR_MSM: u32 = 128;
pub const TIM_SMCR_ETF_Pos: u32 = 8;
pub const TIM_SMCR_ETF_Msk: u32 = 3840;
pub const TIM_SMCR_ETF: u32 = 3840;
pub const TIM_SMCR_ETF_0: u32 = 256;
pub const TIM_SMCR_ETF_1: u32 = 512;
pub const TIM_SMCR_ETF_2: u32 = 1024;
pub const TIM_SMCR_ETF_3: u32 = 2048;
pub const TIM_SMCR_ETPS_Pos: u32 = 12;
pub const TIM_SMCR_ETPS_Msk: u32 = 12288;
pub const TIM_SMCR_ETPS: u32 = 12288;
pub const TIM_SMCR_ETPS_0: u32 = 4096;
pub const TIM_SMCR_ETPS_1: u32 = 8192;
pub const TIM_SMCR_ECE_Pos: u32 = 14;
pub const TIM_SMCR_ECE_Msk: u32 = 16384;
pub const TIM_SMCR_ECE: u32 = 16384;
pub const TIM_SMCR_ETP_Pos: u32 = 15;
pub const TIM_SMCR_ETP_Msk: u32 = 32768;
pub const TIM_SMCR_ETP: u32 = 32768;
pub const TIM_DIER_UIE_Pos: u32 = 0;
pub const TIM_DIER_UIE_Msk: u32 = 1;
pub const TIM_DIER_UIE: u32 = 1;
pub const TIM_DIER_CC1IE_Pos: u32 = 1;
pub const TIM_DIER_CC1IE_Msk: u32 = 2;
pub const TIM_DIER_CC1IE: u32 = 2;
pub const TIM_DIER_CC2IE_Pos: u32 = 2;
pub const TIM_DIER_CC2IE_Msk: u32 = 4;
pub const TIM_DIER_CC2IE: u32 = 4;
pub const TIM_DIER_CC3IE_Pos: u32 = 3;
pub const TIM_DIER_CC3IE_Msk: u32 = 8;
pub const TIM_DIER_CC3IE: u32 = 8;
pub const TIM_DIER_CC4IE_Pos: u32 = 4;
pub const TIM_DIER_CC4IE_Msk: u32 = 16;
pub const TIM_DIER_CC4IE: u32 = 16;
pub const TIM_DIER_TIE_Pos: u32 = 6;
pub const TIM_DIER_TIE_Msk: u32 = 64;
pub const TIM_DIER_TIE: u32 = 64;
pub const TIM_DIER_UDE_Pos: u32 = 8;
pub const TIM_DIER_UDE_Msk: u32 = 256;
pub const TIM_DIER_UDE: u32 = 256;
pub const TIM_DIER_CC1DE_Pos: u32 = 9;
pub const TIM_DIER_CC1DE_Msk: u32 = 512;
pub const TIM_DIER_CC1DE: u32 = 512;
pub const TIM_DIER_CC2DE_Pos: u32 = 10;
pub const TIM_DIER_CC2DE_Msk: u32 = 1024;
pub const TIM_DIER_CC2DE: u32 = 1024;
pub const TIM_DIER_CC3DE_Pos: u32 = 11;
pub const TIM_DIER_CC3DE_Msk: u32 = 2048;
pub const TIM_DIER_CC3DE: u32 = 2048;
pub const TIM_DIER_CC4DE_Pos: u32 = 12;
pub const TIM_DIER_CC4DE_Msk: u32 = 4096;
pub const TIM_DIER_CC4DE: u32 = 4096;
pub const TIM_DIER_TDE_Pos: u32 = 14;
pub const TIM_DIER_TDE_Msk: u32 = 16384;
pub const TIM_DIER_TDE: u32 = 16384;
pub const TIM_SR_UIF_Pos: u32 = 0;
pub const TIM_SR_UIF_Msk: u32 = 1;
pub const TIM_SR_UIF: u32 = 1;
pub const TIM_SR_CC1IF_Pos: u32 = 1;
pub const TIM_SR_CC1IF_Msk: u32 = 2;
pub const TIM_SR_CC1IF: u32 = 2;
pub const TIM_SR_CC2IF_Pos: u32 = 2;
pub const TIM_SR_CC2IF_Msk: u32 = 4;
pub const TIM_SR_CC2IF: u32 = 4;
pub const TIM_SR_CC3IF_Pos: u32 = 3;
pub const TIM_SR_CC3IF_Msk: u32 = 8;
pub const TIM_SR_CC3IF: u32 = 8;
pub const TIM_SR_CC4IF_Pos: u32 = 4;
pub const TIM_SR_CC4IF_Msk: u32 = 16;
pub const TIM_SR_CC4IF: u32 = 16;
pub const TIM_SR_TIF_Pos: u32 = 6;
pub const TIM_SR_TIF_Msk: u32 = 64;
pub const TIM_SR_TIF: u32 = 64;
pub const TIM_SR_CC1OF_Pos: u32 = 9;
pub const TIM_SR_CC1OF_Msk: u32 = 512;
pub const TIM_SR_CC1OF: u32 = 512;
pub const TIM_SR_CC2OF_Pos: u32 = 10;
pub const TIM_SR_CC2OF_Msk: u32 = 1024;
pub const TIM_SR_CC2OF: u32 = 1024;
pub const TIM_SR_CC3OF_Pos: u32 = 11;
pub const TIM_SR_CC3OF_Msk: u32 = 2048;
pub const TIM_SR_CC3OF: u32 = 2048;
pub const TIM_SR_CC4OF_Pos: u32 = 12;
pub const TIM_SR_CC4OF_Msk: u32 = 4096;
pub const TIM_SR_CC4OF: u32 = 4096;
pub const TIM_EGR_UG_Pos: u32 = 0;
pub const TIM_EGR_UG_Msk: u32 = 1;
pub const TIM_EGR_UG: u32 = 1;
pub const TIM_EGR_CC1G_Pos: u32 = 1;
pub const TIM_EGR_CC1G_Msk: u32 = 2;
pub const TIM_EGR_CC1G: u32 = 2;
pub const TIM_EGR_CC2G_Pos: u32 = 2;
pub const TIM_EGR_CC2G_Msk: u32 = 4;
pub const TIM_EGR_CC2G: u32 = 4;
pub const TIM_EGR_CC3G_Pos: u32 = 3;
pub const TIM_EGR_CC3G_Msk: u32 = 8;
pub const TIM_EGR_CC3G: u32 = 8;
pub const TIM_EGR_CC4G_Pos: u32 = 4;
pub const TIM_EGR_CC4G_Msk: u32 = 16;
pub const TIM_EGR_CC4G: u32 = 16;
pub const TIM_EGR_TG_Pos: u32 = 6;
pub const TIM_EGR_TG_Msk: u32 = 64;
pub const TIM_EGR_TG: u32 = 64;
pub const TIM_CCMR1_CC1S_Pos: u32 = 0;
pub const TIM_CCMR1_CC1S_Msk: u32 = 3;
pub const TIM_CCMR1_CC1S: u32 = 3;
pub const TIM_CCMR1_CC1S_0: u32 = 1;
pub const TIM_CCMR1_CC1S_1: u32 = 2;
pub const TIM_CCMR1_OC1FE_Pos: u32 = 2;
pub const TIM_CCMR1_OC1FE_Msk: u32 = 4;
pub const TIM_CCMR1_OC1FE: u32 = 4;
pub const TIM_CCMR1_OC1PE_Pos: u32 = 3;
pub const TIM_CCMR1_OC1PE_Msk: u32 = 8;
pub const TIM_CCMR1_OC1PE: u32 = 8;
pub const TIM_CCMR1_OC1M_Pos: u32 = 4;
pub const TIM_CCMR1_OC1M_Msk: u32 = 112;
pub const TIM_CCMR1_OC1M: u32 = 112;
pub const TIM_CCMR1_OC1M_0: u32 = 16;
pub const TIM_CCMR1_OC1M_1: u32 = 32;
pub const TIM_CCMR1_OC1M_2: u32 = 64;
pub const TIM_CCMR1_OC1CE_Pos: u32 = 7;
pub const TIM_CCMR1_OC1CE_Msk: u32 = 128;
pub const TIM_CCMR1_OC1CE: u32 = 128;
pub const TIM_CCMR1_CC2S_Pos: u32 = 8;
pub const TIM_CCMR1_CC2S_Msk: u32 = 768;
pub const TIM_CCMR1_CC2S: u32 = 768;
pub const TIM_CCMR1_CC2S_0: u32 = 256;
pub const TIM_CCMR1_CC2S_1: u32 = 512;
pub const TIM_CCMR1_OC2FE_Pos: u32 = 10;
pub const TIM_CCMR1_OC2FE_Msk: u32 = 1024;
pub const TIM_CCMR1_OC2FE: u32 = 1024;
pub const TIM_CCMR1_OC2PE_Pos: u32 = 11;
pub const TIM_CCMR1_OC2PE_Msk: u32 = 2048;
pub const TIM_CCMR1_OC2PE: u32 = 2048;
pub const TIM_CCMR1_OC2M_Pos: u32 = 12;
pub const TIM_CCMR1_OC2M_Msk: u32 = 28672;
pub const TIM_CCMR1_OC2M: u32 = 28672;
pub const TIM_CCMR1_OC2M_0: u32 = 4096;
pub const TIM_CCMR1_OC2M_1: u32 = 8192;
pub const TIM_CCMR1_OC2M_2: u32 = 16384;
pub const TIM_CCMR1_OC2CE_Pos: u32 = 15;
pub const TIM_CCMR1_OC2CE_Msk: u32 = 32768;
pub const TIM_CCMR1_OC2CE: u32 = 32768;
pub const TIM_CCMR1_IC1PSC_Pos: u32 = 2;
pub const TIM_CCMR1_IC1PSC_Msk: u32 = 12;
pub const TIM_CCMR1_IC1PSC: u32 = 12;
pub const TIM_CCMR1_IC1PSC_0: u32 = 4;
pub const TIM_CCMR1_IC1PSC_1: u32 = 8;
pub const TIM_CCMR1_IC1F_Pos: u32 = 4;
pub const TIM_CCMR1_IC1F_Msk: u32 = 240;
pub const TIM_CCMR1_IC1F: u32 = 240;
pub const TIM_CCMR1_IC1F_0: u32 = 16;
pub const TIM_CCMR1_IC1F_1: u32 = 32;
pub const TIM_CCMR1_IC1F_2: u32 = 64;
pub const TIM_CCMR1_IC1F_3: u32 = 128;
pub const TIM_CCMR1_IC2PSC_Pos: u32 = 10;
pub const TIM_CCMR1_IC2PSC_Msk: u32 = 3072;
pub const TIM_CCMR1_IC2PSC: u32 = 3072;
pub const TIM_CCMR1_IC2PSC_0: u32 = 1024;
pub const TIM_CCMR1_IC2PSC_1: u32 = 2048;
pub const TIM_CCMR1_IC2F_Pos: u32 = 12;
pub const TIM_CCMR1_IC2F_Msk: u32 = 61440;
pub const TIM_CCMR1_IC2F: u32 = 61440;
pub const TIM_CCMR1_IC2F_0: u32 = 4096;
pub const TIM_CCMR1_IC2F_1: u32 = 8192;
pub const TIM_CCMR1_IC2F_2: u32 = 16384;
pub const TIM_CCMR1_IC2F_3: u32 = 32768;
pub const TIM_CCMR2_CC3S_Pos: u32 = 0;
pub const TIM_CCMR2_CC3S_Msk: u32 = 3;
pub const TIM_CCMR2_CC3S: u32 = 3;
pub const TIM_CCMR2_CC3S_0: u32 = 1;
pub const TIM_CCMR2_CC3S_1: u32 = 2;
pub const TIM_CCMR2_OC3FE_Pos: u32 = 2;
pub const TIM_CCMR2_OC3FE_Msk: u32 = 4;
pub const TIM_CCMR2_OC3FE: u32 = 4;
pub const TIM_CCMR2_OC3PE_Pos: u32 = 3;
pub const TIM_CCMR2_OC3PE_Msk: u32 = 8;
pub const TIM_CCMR2_OC3PE: u32 = 8;
pub const TIM_CCMR2_OC3M_Pos: u32 = 4;
pub const TIM_CCMR2_OC3M_Msk: u32 = 112;
pub const TIM_CCMR2_OC3M: u32 = 112;
pub const TIM_CCMR2_OC3M_0: u32 = 16;
pub const TIM_CCMR2_OC3M_1: u32 = 32;
pub const TIM_CCMR2_OC3M_2: u32 = 64;
pub const TIM_CCMR2_OC3CE_Pos: u32 = 7;
pub const TIM_CCMR2_OC3CE_Msk: u32 = 128;
pub const TIM_CCMR2_OC3CE: u32 = 128;
pub const TIM_CCMR2_CC4S_Pos: u32 = 8;
pub const TIM_CCMR2_CC4S_Msk: u32 = 768;
pub const TIM_CCMR2_CC4S: u32 = 768;
pub const TIM_CCMR2_CC4S_0: u32 = 256;
pub const TIM_CCMR2_CC4S_1: u32 = 512;
pub const TIM_CCMR2_OC4FE_Pos: u32 = 10;
pub const TIM_CCMR2_OC4FE_Msk: u32 = 1024;
pub const TIM_CCMR2_OC4FE: u32 = 1024;
pub const TIM_CCMR2_OC4PE_Pos: u32 = 11;
pub const TIM_CCMR2_OC4PE_Msk: u32 = 2048;
pub const TIM_CCMR2_OC4PE: u32 = 2048;
pub const TIM_CCMR2_OC4M_Pos: u32 = 12;
pub const TIM_CCMR2_OC4M_Msk: u32 = 28672;
pub const TIM_CCMR2_OC4M: u32 = 28672;
pub const TIM_CCMR2_OC4M_0: u32 = 4096;
pub const TIM_CCMR2_OC4M_1: u32 = 8192;
pub const TIM_CCMR2_OC4M_2: u32 = 16384;
pub const TIM_CCMR2_OC4CE_Pos: u32 = 15;
pub const TIM_CCMR2_OC4CE_Msk: u32 = 32768;
pub const TIM_CCMR2_OC4CE: u32 = 32768;
pub const TIM_CCMR2_IC3PSC_Pos: u32 = 2;
pub const TIM_CCMR2_IC3PSC_Msk: u32 = 12;
pub const TIM_CCMR2_IC3PSC: u32 = 12;
pub const TIM_CCMR2_IC3PSC_0: u32 = 4;
pub const TIM_CCMR2_IC3PSC_1: u32 = 8;
pub const TIM_CCMR2_IC3F_Pos: u32 = 4;
pub const TIM_CCMR2_IC3F_Msk: u32 = 240;
pub const TIM_CCMR2_IC3F: u32 = 240;
pub const TIM_CCMR2_IC3F_0: u32 = 16;
pub const TIM_CCMR2_IC3F_1: u32 = 32;
pub const TIM_CCMR2_IC3F_2: u32 = 64;
pub const TIM_CCMR2_IC3F_3: u32 = 128;
pub const TIM_CCMR2_IC4PSC_Pos: u32 = 10;
pub const TIM_CCMR2_IC4PSC_Msk: u32 = 3072;
pub const TIM_CCMR2_IC4PSC: u32 = 3072;
pub const TIM_CCMR2_IC4PSC_0: u32 = 1024;
pub const TIM_CCMR2_IC4PSC_1: u32 = 2048;
pub const TIM_CCMR2_IC4F_Pos: u32 = 12;
pub const TIM_CCMR2_IC4F_Msk: u32 = 61440;
pub const TIM_CCMR2_IC4F: u32 = 61440;
pub const TIM_CCMR2_IC4F_0: u32 = 4096;
pub const TIM_CCMR2_IC4F_1: u32 = 8192;
pub const TIM_CCMR2_IC4F_2: u32 = 16384;
pub const TIM_CCMR2_IC4F_3: u32 = 32768;
pub const TIM_CCER_CC1E_Pos: u32 = 0;
pub const TIM_CCER_CC1E_Msk: u32 = 1;
pub const TIM_CCER_CC1E: u32 = 1;
pub const TIM_CCER_CC1P_Pos: u32 = 1;
pub const TIM_CCER_CC1P_Msk: u32 = 2;
pub const TIM_CCER_CC1P: u32 = 2;
pub const TIM_CCER_CC1NP_Pos: u32 = 3;
pub const TIM_CCER_CC1NP_Msk: u32 = 8;
pub const TIM_CCER_CC1NP: u32 = 8;
pub const TIM_CCER_CC2E_Pos: u32 = 4;
pub const TIM_CCER_CC2E_Msk: u32 = 16;
pub const TIM_CCER_CC2E: u32 = 16;
pub const TIM_CCER_CC2P_Pos: u32 = 5;
pub const TIM_CCER_CC2P_Msk: u32 = 32;
pub const TIM_CCER_CC2P: u32 = 32;
pub const TIM_CCER_CC2NP_Pos: u32 = 7;
pub const TIM_CCER_CC2NP_Msk: u32 = 128;
pub const TIM_CCER_CC2NP: u32 = 128;
pub const TIM_CCER_CC3E_Pos: u32 = 8;
pub const TIM_CCER_CC3E_Msk: u32 = 256;
pub const TIM_CCER_CC3E: u32 = 256;
pub const TIM_CCER_CC3P_Pos: u32 = 9;
pub const TIM_CCER_CC3P_Msk: u32 = 512;
pub const TIM_CCER_CC3P: u32 = 512;
pub const TIM_CCER_CC3NP_Pos: u32 = 11;
pub const TIM_CCER_CC3NP_Msk: u32 = 2048;
pub const TIM_CCER_CC3NP: u32 = 2048;
pub const TIM_CCER_CC4E_Pos: u32 = 12;
pub const TIM_CCER_CC4E_Msk: u32 = 4096;
pub const TIM_CCER_CC4E: u32 = 4096;
pub const TIM_CCER_CC4P_Pos: u32 = 13;
pub const TIM_CCER_CC4P_Msk: u32 = 8192;
pub const TIM_CCER_CC4P: u32 = 8192;
pub const TIM_CCER_CC4NP_Pos: u32 = 15;
pub const TIM_CCER_CC4NP_Msk: u32 = 32768;
pub const TIM_CCER_CC4NP: u32 = 32768;
pub const TIM_CNT_CNT_Pos: u32 = 0;
pub const TIM_CNT_CNT_Msk: u32 = 65535;
pub const TIM_CNT_CNT: u32 = 65535;
pub const TIM_PSC_PSC_Pos: u32 = 0;
pub const TIM_PSC_PSC_Msk: u32 = 65535;
pub const TIM_PSC_PSC: u32 = 65535;
pub const TIM_ARR_ARR_Pos: u32 = 0;
pub const TIM_ARR_ARR_Msk: u32 = 65535;
pub const TIM_ARR_ARR: u32 = 65535;
pub const TIM_CCR1_CCR1_Pos: u32 = 0;
pub const TIM_CCR1_CCR1_Msk: u32 = 65535;
pub const TIM_CCR1_CCR1: u32 = 65535;
pub const TIM_CCR2_CCR2_Pos: u32 = 0;
pub const TIM_CCR2_CCR2_Msk: u32 = 65535;
pub const TIM_CCR2_CCR2: u32 = 65535;
pub const TIM_CCR3_CCR3_Pos: u32 = 0;
pub const TIM_CCR3_CCR3_Msk: u32 = 65535;
pub const TIM_CCR3_CCR3: u32 = 65535;
pub const TIM_CCR4_CCR4_Pos: u32 = 0;
pub const TIM_CCR4_CCR4_Msk: u32 = 65535;
pub const TIM_CCR4_CCR4: u32 = 65535;
pub const TIM_DCR_DBA_Pos: u32 = 0;
pub const TIM_DCR_DBA_Msk: u32 = 31;
pub const TIM_DCR_DBA: u32 = 31;
pub const TIM_DCR_DBA_0: u32 = 1;
pub const TIM_DCR_DBA_1: u32 = 2;
pub const TIM_DCR_DBA_2: u32 = 4;
pub const TIM_DCR_DBA_3: u32 = 8;
pub const TIM_DCR_DBA_4: u32 = 16;
pub const TIM_DCR_DBL_Pos: u32 = 8;
pub const TIM_DCR_DBL_Msk: u32 = 7936;
pub const TIM_DCR_DBL: u32 = 7936;
pub const TIM_DCR_DBL_0: u32 = 256;
pub const TIM_DCR_DBL_1: u32 = 512;
pub const TIM_DCR_DBL_2: u32 = 1024;
pub const TIM_DCR_DBL_3: u32 = 2048;
pub const TIM_DCR_DBL_4: u32 = 4096;
pub const TIM_DMAR_DMAB_Pos: u32 = 0;
pub const TIM_DMAR_DMAB_Msk: u32 = 65535;
pub const TIM_DMAR_DMAB: u32 = 65535;
pub const TIM2_OR_ETR_RMP_Pos: u32 = 0;
pub const TIM2_OR_ETR_RMP_Msk: u32 = 7;
pub const TIM2_OR_ETR_RMP: u32 = 7;
pub const TIM2_OR_ETR_RMP_0: u32 = 1;
pub const TIM2_OR_ETR_RMP_1: u32 = 2;
pub const TIM2_OR_ETR_RMP_2: u32 = 4;
pub const TIM2_OR_TI4_RMP_Pos: u32 = 3;
pub const TIM2_OR_TI4_RMP_Msk: u32 = 24;
pub const TIM2_OR_TI4_RMP: u32 = 24;
pub const TIM2_OR_TI4_RMP_0: u32 = 8;
pub const TIM2_OR_TI4_RMP_1: u32 = 16;
pub const TIM21_OR_ETR_RMP_Pos: u32 = 0;
pub const TIM21_OR_ETR_RMP_Msk: u32 = 3;
pub const TIM21_OR_ETR_RMP: u32 = 3;
pub const TIM21_OR_ETR_RMP_0: u32 = 1;
pub const TIM21_OR_ETR_RMP_1: u32 = 2;
pub const TIM21_OR_TI1_RMP_Pos: u32 = 2;
pub const TIM21_OR_TI1_RMP_Msk: u32 = 28;
pub const TIM21_OR_TI1_RMP: u32 = 28;
pub const TIM21_OR_TI1_RMP_0: u32 = 4;
pub const TIM21_OR_TI1_RMP_1: u32 = 8;
pub const TIM21_OR_TI1_RMP_2: u32 = 16;
pub const TIM21_OR_TI2_RMP_Pos: u32 = 5;
pub const TIM21_OR_TI2_RMP_Msk: u32 = 32;
pub const TIM21_OR_TI2_RMP: u32 = 32;
pub const TIM22_OR_ETR_RMP_Pos: u32 = 0;
pub const TIM22_OR_ETR_RMP_Msk: u32 = 3;
pub const TIM22_OR_ETR_RMP: u32 = 3;
pub const TIM22_OR_ETR_RMP_0: u32 = 1;
pub const TIM22_OR_ETR_RMP_1: u32 = 2;
pub const TIM22_OR_TI1_RMP_Pos: u32 = 2;
pub const TIM22_OR_TI1_RMP_Msk: u32 = 12;
pub const TIM22_OR_TI1_RMP: u32 = 12;
pub const TIM22_OR_TI1_RMP_0: u32 = 4;
pub const TIM22_OR_TI1_RMP_1: u32 = 8;
pub const TIM3_OR_ETR_RMP_Pos: u32 = 0;
pub const TIM3_OR_ETR_RMP_Msk: u32 = 3;
pub const TIM3_OR_ETR_RMP: u32 = 3;
pub const TIM3_OR_ETR_RMP_0: u32 = 1;
pub const TIM3_OR_ETR_RMP_1: u32 = 2;
pub const TIM3_OR_TI1_RMP_Pos: u32 = 2;
pub const TIM3_OR_TI1_RMP_Msk: u32 = 4;
pub const TIM3_OR_TI1_RMP: u32 = 4;
pub const TIM3_OR_TI2_RMP_Pos: u32 = 3;
pub const TIM3_OR_TI2_RMP_Msk: u32 = 8;
pub const TIM3_OR_TI2_RMP: u32 = 8;
pub const TIM3_OR_TI4_RMP_Pos: u32 = 4;
pub const TIM3_OR_TI4_RMP_Msk: u32 = 16;
pub const TIM3_OR_TI4_RMP: u32 = 16;
pub const TSC_CR_TSCE_Pos: u32 = 0;
pub const TSC_CR_TSCE_Msk: u32 = 1;
pub const TSC_CR_TSCE: u32 = 1;
pub const TSC_CR_START_Pos: u32 = 1;
pub const TSC_CR_START_Msk: u32 = 2;
pub const TSC_CR_START: u32 = 2;
pub const TSC_CR_AM_Pos: u32 = 2;
pub const TSC_CR_AM_Msk: u32 = 4;
pub const TSC_CR_AM: u32 = 4;
pub const TSC_CR_SYNCPOL_Pos: u32 = 3;
pub const TSC_CR_SYNCPOL_Msk: u32 = 8;
pub const TSC_CR_SYNCPOL: u32 = 8;
pub const TSC_CR_IODEF_Pos: u32 = 4;
pub const TSC_CR_IODEF_Msk: u32 = 16;
pub const TSC_CR_IODEF: u32 = 16;
pub const TSC_CR_MCV_Pos: u32 = 5;
pub const TSC_CR_MCV_Msk: u32 = 224;
pub const TSC_CR_MCV: u32 = 224;
pub const TSC_CR_MCV_0: u32 = 32;
pub const TSC_CR_MCV_1: u32 = 64;
pub const TSC_CR_MCV_2: u32 = 128;
pub const TSC_CR_PGPSC_Pos: u32 = 12;
pub const TSC_CR_PGPSC_Msk: u32 = 28672;
pub const TSC_CR_PGPSC: u32 = 28672;
pub const TSC_CR_PGPSC_0: u32 = 4096;
pub const TSC_CR_PGPSC_1: u32 = 8192;
pub const TSC_CR_PGPSC_2: u32 = 16384;
pub const TSC_CR_SSPSC_Pos: u32 = 15;
pub const TSC_CR_SSPSC_Msk: u32 = 32768;
pub const TSC_CR_SSPSC: u32 = 32768;
pub const TSC_CR_SSE_Pos: u32 = 16;
pub const TSC_CR_SSE_Msk: u32 = 65536;
pub const TSC_CR_SSE: u32 = 65536;
pub const TSC_CR_SSD_Pos: u32 = 17;
pub const TSC_CR_SSD_Msk: u32 = 16646144;
pub const TSC_CR_SSD: u32 = 16646144;
pub const TSC_CR_SSD_0: u32 = 131072;
pub const TSC_CR_SSD_1: u32 = 262144;
pub const TSC_CR_SSD_2: u32 = 524288;
pub const TSC_CR_SSD_3: u32 = 1048576;
pub const TSC_CR_SSD_4: u32 = 2097152;
pub const TSC_CR_SSD_5: u32 = 4194304;
pub const TSC_CR_SSD_6: u32 = 8388608;
pub const TSC_CR_CTPL_Pos: u32 = 24;
pub const TSC_CR_CTPL_Msk: u32 = 251658240;
pub const TSC_CR_CTPL: u32 = 251658240;
pub const TSC_CR_CTPL_0: u32 = 16777216;
pub const TSC_CR_CTPL_1: u32 = 33554432;
pub const TSC_CR_CTPL_2: u32 = 67108864;
pub const TSC_CR_CTPL_3: u32 = 134217728;
pub const TSC_CR_CTPH_Pos: u32 = 28;
pub const TSC_CR_CTPH_Msk: u32 = 4026531840;
pub const TSC_CR_CTPH: u32 = 4026531840;
pub const TSC_CR_CTPH_0: u32 = 268435456;
pub const TSC_CR_CTPH_1: u32 = 536870912;
pub const TSC_CR_CTPH_2: u32 = 1073741824;
pub const TSC_CR_CTPH_3: u32 = 2147483648;
pub const TSC_IER_EOAIE_Pos: u32 = 0;
pub const TSC_IER_EOAIE_Msk: u32 = 1;
pub const TSC_IER_EOAIE: u32 = 1;
pub const TSC_IER_MCEIE_Pos: u32 = 1;
pub const TSC_IER_MCEIE_Msk: u32 = 2;
pub const TSC_IER_MCEIE: u32 = 2;
pub const TSC_ICR_EOAIC_Pos: u32 = 0;
pub const TSC_ICR_EOAIC_Msk: u32 = 1;
pub const TSC_ICR_EOAIC: u32 = 1;
pub const TSC_ICR_MCEIC_Pos: u32 = 1;
pub const TSC_ICR_MCEIC_Msk: u32 = 2;
pub const TSC_ICR_MCEIC: u32 = 2;
pub const TSC_ISR_EOAF_Pos: u32 = 0;
pub const TSC_ISR_EOAF_Msk: u32 = 1;
pub const TSC_ISR_EOAF: u32 = 1;
pub const TSC_ISR_MCEF_Pos: u32 = 1;
pub const TSC_ISR_MCEF_Msk: u32 = 2;
pub const TSC_ISR_MCEF: u32 = 2;
pub const TSC_IOHCR_G1_IO1_Pos: u32 = 0;
pub const TSC_IOHCR_G1_IO1_Msk: u32 = 1;
pub const TSC_IOHCR_G1_IO1: u32 = 1;
pub const TSC_IOHCR_G1_IO2_Pos: u32 = 1;
pub const TSC_IOHCR_G1_IO2_Msk: u32 = 2;
pub const TSC_IOHCR_G1_IO2: u32 = 2;
pub const TSC_IOHCR_G1_IO3_Pos: u32 = 2;
pub const TSC_IOHCR_G1_IO3_Msk: u32 = 4;
pub const TSC_IOHCR_G1_IO3: u32 = 4;
pub const TSC_IOHCR_G1_IO4_Pos: u32 = 3;
pub const TSC_IOHCR_G1_IO4_Msk: u32 = 8;
pub const TSC_IOHCR_G1_IO4: u32 = 8;
pub const TSC_IOHCR_G2_IO1_Pos: u32 = 4;
pub const TSC_IOHCR_G2_IO1_Msk: u32 = 16;
pub const TSC_IOHCR_G2_IO1: u32 = 16;
pub const TSC_IOHCR_G2_IO2_Pos: u32 = 5;
pub const TSC_IOHCR_G2_IO2_Msk: u32 = 32;
pub const TSC_IOHCR_G2_IO2: u32 = 32;
pub const TSC_IOHCR_G2_IO3_Pos: u32 = 6;
pub const TSC_IOHCR_G2_IO3_Msk: u32 = 64;
pub const TSC_IOHCR_G2_IO3: u32 = 64;
pub const TSC_IOHCR_G2_IO4_Pos: u32 = 7;
pub const TSC_IOHCR_G2_IO4_Msk: u32 = 128;
pub const TSC_IOHCR_G2_IO4: u32 = 128;
pub const TSC_IOHCR_G3_IO1_Pos: u32 = 8;
pub const TSC_IOHCR_G3_IO1_Msk: u32 = 256;
pub const TSC_IOHCR_G3_IO1: u32 = 256;
pub const TSC_IOHCR_G3_IO2_Pos: u32 = 9;
pub const TSC_IOHCR_G3_IO2_Msk: u32 = 512;
pub const TSC_IOHCR_G3_IO2: u32 = 512;
pub const TSC_IOHCR_G3_IO3_Pos: u32 = 10;
pub const TSC_IOHCR_G3_IO3_Msk: u32 = 1024;
pub const TSC_IOHCR_G3_IO3: u32 = 1024;
pub const TSC_IOHCR_G3_IO4_Pos: u32 = 11;
pub const TSC_IOHCR_G3_IO4_Msk: u32 = 2048;
pub const TSC_IOHCR_G3_IO4: u32 = 2048;
pub const TSC_IOHCR_G4_IO1_Pos: u32 = 12;
pub const TSC_IOHCR_G4_IO1_Msk: u32 = 4096;
pub const TSC_IOHCR_G4_IO1: u32 = 4096;
pub const TSC_IOHCR_G4_IO2_Pos: u32 = 13;
pub const TSC_IOHCR_G4_IO2_Msk: u32 = 8192;
pub const TSC_IOHCR_G4_IO2: u32 = 8192;
pub const TSC_IOHCR_G4_IO3_Pos: u32 = 14;
pub const TSC_IOHCR_G4_IO3_Msk: u32 = 16384;
pub const TSC_IOHCR_G4_IO3: u32 = 16384;
pub const TSC_IOHCR_G4_IO4_Pos: u32 = 15;
pub const TSC_IOHCR_G4_IO4_Msk: u32 = 32768;
pub const TSC_IOHCR_G4_IO4: u32 = 32768;
pub const TSC_IOHCR_G5_IO1_Pos: u32 = 16;
pub const TSC_IOHCR_G5_IO1_Msk: u32 = 65536;
pub const TSC_IOHCR_G5_IO1: u32 = 65536;
pub const TSC_IOHCR_G5_IO2_Pos: u32 = 17;
pub const TSC_IOHCR_G5_IO2_Msk: u32 = 131072;
pub const TSC_IOHCR_G5_IO2: u32 = 131072;
pub const TSC_IOHCR_G5_IO3_Pos: u32 = 18;
pub const TSC_IOHCR_G5_IO3_Msk: u32 = 262144;
pub const TSC_IOHCR_G5_IO3: u32 = 262144;
pub const TSC_IOHCR_G5_IO4_Pos: u32 = 19;
pub const TSC_IOHCR_G5_IO4_Msk: u32 = 524288;
pub const TSC_IOHCR_G5_IO4: u32 = 524288;
pub const TSC_IOHCR_G6_IO1_Pos: u32 = 20;
pub const TSC_IOHCR_G6_IO1_Msk: u32 = 1048576;
pub const TSC_IOHCR_G6_IO1: u32 = 1048576;
pub const TSC_IOHCR_G6_IO2_Pos: u32 = 21;
pub const TSC_IOHCR_G6_IO2_Msk: u32 = 2097152;
pub const TSC_IOHCR_G6_IO2: u32 = 2097152;
pub const TSC_IOHCR_G6_IO3_Pos: u32 = 22;
pub const TSC_IOHCR_G6_IO3_Msk: u32 = 4194304;
pub const TSC_IOHCR_G6_IO3: u32 = 4194304;
pub const TSC_IOHCR_G6_IO4_Pos: u32 = 23;
pub const TSC_IOHCR_G6_IO4_Msk: u32 = 8388608;
pub const TSC_IOHCR_G6_IO4: u32 = 8388608;
pub const TSC_IOHCR_G7_IO1_Pos: u32 = 24;
pub const TSC_IOHCR_G7_IO1_Msk: u32 = 16777216;
pub const TSC_IOHCR_G7_IO1: u32 = 16777216;
pub const TSC_IOHCR_G7_IO2_Pos: u32 = 25;
pub const TSC_IOHCR_G7_IO2_Msk: u32 = 33554432;
pub const TSC_IOHCR_G7_IO2: u32 = 33554432;
pub const TSC_IOHCR_G7_IO3_Pos: u32 = 26;
pub const TSC_IOHCR_G7_IO3_Msk: u32 = 67108864;
pub const TSC_IOHCR_G7_IO3: u32 = 67108864;
pub const TSC_IOHCR_G7_IO4_Pos: u32 = 27;
pub const TSC_IOHCR_G7_IO4_Msk: u32 = 134217728;
pub const TSC_IOHCR_G7_IO4: u32 = 134217728;
pub const TSC_IOHCR_G8_IO1_Pos: u32 = 28;
pub const TSC_IOHCR_G8_IO1_Msk: u32 = 268435456;
pub const TSC_IOHCR_G8_IO1: u32 = 268435456;
pub const TSC_IOHCR_G8_IO2_Pos: u32 = 29;
pub const TSC_IOHCR_G8_IO2_Msk: u32 = 536870912;
pub const TSC_IOHCR_G8_IO2: u32 = 536870912;
pub const TSC_IOHCR_G8_IO3_Pos: u32 = 30;
pub const TSC_IOHCR_G8_IO3_Msk: u32 = 1073741824;
pub const TSC_IOHCR_G8_IO3: u32 = 1073741824;
pub const TSC_IOHCR_G8_IO4_Pos: u32 = 31;
pub const TSC_IOHCR_G8_IO4_Msk: u32 = 2147483648;
pub const TSC_IOHCR_G8_IO4: u32 = 2147483648;
pub const TSC_IOASCR_G1_IO1_Pos: u32 = 0;
pub const TSC_IOASCR_G1_IO1_Msk: u32 = 1;
pub const TSC_IOASCR_G1_IO1: u32 = 1;
pub const TSC_IOASCR_G1_IO2_Pos: u32 = 1;
pub const TSC_IOASCR_G1_IO2_Msk: u32 = 2;
pub const TSC_IOASCR_G1_IO2: u32 = 2;
pub const TSC_IOASCR_G1_IO3_Pos: u32 = 2;
pub const TSC_IOASCR_G1_IO3_Msk: u32 = 4;
pub const TSC_IOASCR_G1_IO3: u32 = 4;
pub const TSC_IOASCR_G1_IO4_Pos: u32 = 3;
pub const TSC_IOASCR_G1_IO4_Msk: u32 = 8;
pub const TSC_IOASCR_G1_IO4: u32 = 8;
pub const TSC_IOASCR_G2_IO1_Pos: u32 = 4;
pub const TSC_IOASCR_G2_IO1_Msk: u32 = 16;
pub const TSC_IOASCR_G2_IO1: u32 = 16;
pub const TSC_IOASCR_G2_IO2_Pos: u32 = 5;
pub const TSC_IOASCR_G2_IO2_Msk: u32 = 32;
pub const TSC_IOASCR_G2_IO2: u32 = 32;
pub const TSC_IOASCR_G2_IO3_Pos: u32 = 6;
pub const TSC_IOASCR_G2_IO3_Msk: u32 = 64;
pub const TSC_IOASCR_G2_IO3: u32 = 64;
pub const TSC_IOASCR_G2_IO4_Pos: u32 = 7;
pub const TSC_IOASCR_G2_IO4_Msk: u32 = 128;
pub const TSC_IOASCR_G2_IO4: u32 = 128;
pub const TSC_IOASCR_G3_IO1_Pos: u32 = 8;
pub const TSC_IOASCR_G3_IO1_Msk: u32 = 256;
pub const TSC_IOASCR_G3_IO1: u32 = 256;
pub const TSC_IOASCR_G3_IO2_Pos: u32 = 9;
pub const TSC_IOASCR_G3_IO2_Msk: u32 = 512;
pub const TSC_IOASCR_G3_IO2: u32 = 512;
pub const TSC_IOASCR_G3_IO3_Pos: u32 = 10;
pub const TSC_IOASCR_G3_IO3_Msk: u32 = 1024;
pub const TSC_IOASCR_G3_IO3: u32 = 1024;
pub const TSC_IOASCR_G3_IO4_Pos: u32 = 11;
pub const TSC_IOASCR_G3_IO4_Msk: u32 = 2048;
pub const TSC_IOASCR_G3_IO4: u32 = 2048;
pub const TSC_IOASCR_G4_IO1_Pos: u32 = 12;
pub const TSC_IOASCR_G4_IO1_Msk: u32 = 4096;
pub const TSC_IOASCR_G4_IO1: u32 = 4096;
pub const TSC_IOASCR_G4_IO2_Pos: u32 = 13;
pub const TSC_IOASCR_G4_IO2_Msk: u32 = 8192;
pub const TSC_IOASCR_G4_IO2: u32 = 8192;
pub const TSC_IOASCR_G4_IO3_Pos: u32 = 14;
pub const TSC_IOASCR_G4_IO3_Msk: u32 = 16384;
pub const TSC_IOASCR_G4_IO3: u32 = 16384;
pub const TSC_IOASCR_G4_IO4_Pos: u32 = 15;
pub const TSC_IOASCR_G4_IO4_Msk: u32 = 32768;
pub const TSC_IOASCR_G4_IO4: u32 = 32768;
pub const TSC_IOASCR_G5_IO1_Pos: u32 = 16;
pub const TSC_IOASCR_G5_IO1_Msk: u32 = 65536;
pub const TSC_IOASCR_G5_IO1: u32 = 65536;
pub const TSC_IOASCR_G5_IO2_Pos: u32 = 17;
pub const TSC_IOASCR_G5_IO2_Msk: u32 = 131072;
pub const TSC_IOASCR_G5_IO2: u32 = 131072;
pub const TSC_IOASCR_G5_IO3_Pos: u32 = 18;
pub const TSC_IOASCR_G5_IO3_Msk: u32 = 262144;
pub const TSC_IOASCR_G5_IO3: u32 = 262144;
pub const TSC_IOASCR_G5_IO4_Pos: u32 = 19;
pub const TSC_IOASCR_G5_IO4_Msk: u32 = 524288;
pub const TSC_IOASCR_G5_IO4: u32 = 524288;
pub const TSC_IOASCR_G6_IO1_Pos: u32 = 20;
pub const TSC_IOASCR_G6_IO1_Msk: u32 = 1048576;
pub const TSC_IOASCR_G6_IO1: u32 = 1048576;
pub const TSC_IOASCR_G6_IO2_Pos: u32 = 21;
pub const TSC_IOASCR_G6_IO2_Msk: u32 = 2097152;
pub const TSC_IOASCR_G6_IO2: u32 = 2097152;
pub const TSC_IOASCR_G6_IO3_Pos: u32 = 22;
pub const TSC_IOASCR_G6_IO3_Msk: u32 = 4194304;
pub const TSC_IOASCR_G6_IO3: u32 = 4194304;
pub const TSC_IOASCR_G6_IO4_Pos: u32 = 23;
pub const TSC_IOASCR_G6_IO4_Msk: u32 = 8388608;
pub const TSC_IOASCR_G6_IO4: u32 = 8388608;
pub const TSC_IOASCR_G7_IO1_Pos: u32 = 24;
pub const TSC_IOASCR_G7_IO1_Msk: u32 = 16777216;
pub const TSC_IOASCR_G7_IO1: u32 = 16777216;
pub const TSC_IOASCR_G7_IO2_Pos: u32 = 25;
pub const TSC_IOASCR_G7_IO2_Msk: u32 = 33554432;
pub const TSC_IOASCR_G7_IO2: u32 = 33554432;
pub const TSC_IOASCR_G7_IO3_Pos: u32 = 26;
pub const TSC_IOASCR_G7_IO3_Msk: u32 = 67108864;
pub const TSC_IOASCR_G7_IO3: u32 = 67108864;
pub const TSC_IOASCR_G7_IO4_Pos: u32 = 27;
pub const TSC_IOASCR_G7_IO4_Msk: u32 = 134217728;
pub const TSC_IOASCR_G7_IO4: u32 = 134217728;
pub const TSC_IOASCR_G8_IO1_Pos: u32 = 28;
pub const TSC_IOASCR_G8_IO1_Msk: u32 = 268435456;
pub const TSC_IOASCR_G8_IO1: u32 = 268435456;
pub const TSC_IOASCR_G8_IO2_Pos: u32 = 29;
pub const TSC_IOASCR_G8_IO2_Msk: u32 = 536870912;
pub const TSC_IOASCR_G8_IO2: u32 = 536870912;
pub const TSC_IOASCR_G8_IO3_Pos: u32 = 30;
pub const TSC_IOASCR_G8_IO3_Msk: u32 = 1073741824;
pub const TSC_IOASCR_G8_IO3: u32 = 1073741824;
pub const TSC_IOASCR_G8_IO4_Pos: u32 = 31;
pub const TSC_IOASCR_G8_IO4_Msk: u32 = 2147483648;
pub const TSC_IOASCR_G8_IO4: u32 = 2147483648;
pub const TSC_IOSCR_G1_IO1_Pos: u32 = 0;
pub const TSC_IOSCR_G1_IO1_Msk: u32 = 1;
pub const TSC_IOSCR_G1_IO1: u32 = 1;
pub const TSC_IOSCR_G1_IO2_Pos: u32 = 1;
pub const TSC_IOSCR_G1_IO2_Msk: u32 = 2;
pub const TSC_IOSCR_G1_IO2: u32 = 2;
pub const TSC_IOSCR_G1_IO3_Pos: u32 = 2;
pub const TSC_IOSCR_G1_IO3_Msk: u32 = 4;
pub const TSC_IOSCR_G1_IO3: u32 = 4;
pub const TSC_IOSCR_G1_IO4_Pos: u32 = 3;
pub const TSC_IOSCR_G1_IO4_Msk: u32 = 8;
pub const TSC_IOSCR_G1_IO4: u32 = 8;
pub const TSC_IOSCR_G2_IO1_Pos: u32 = 4;
pub const TSC_IOSCR_G2_IO1_Msk: u32 = 16;
pub const TSC_IOSCR_G2_IO1: u32 = 16;
pub const TSC_IOSCR_G2_IO2_Pos: u32 = 5;
pub const TSC_IOSCR_G2_IO2_Msk: u32 = 32;
pub const TSC_IOSCR_G2_IO2: u32 = 32;
pub const TSC_IOSCR_G2_IO3_Pos: u32 = 6;
pub const TSC_IOSCR_G2_IO3_Msk: u32 = 64;
pub const TSC_IOSCR_G2_IO3: u32 = 64;
pub const TSC_IOSCR_G2_IO4_Pos: u32 = 7;
pub const TSC_IOSCR_G2_IO4_Msk: u32 = 128;
pub const TSC_IOSCR_G2_IO4: u32 = 128;
pub const TSC_IOSCR_G3_IO1_Pos: u32 = 8;
pub const TSC_IOSCR_G3_IO1_Msk: u32 = 256;
pub const TSC_IOSCR_G3_IO1: u32 = 256;
pub const TSC_IOSCR_G3_IO2_Pos: u32 = 9;
pub const TSC_IOSCR_G3_IO2_Msk: u32 = 512;
pub const TSC_IOSCR_G3_IO2: u32 = 512;
pub const TSC_IOSCR_G3_IO3_Pos: u32 = 10;
pub const TSC_IOSCR_G3_IO3_Msk: u32 = 1024;
pub const TSC_IOSCR_G3_IO3: u32 = 1024;
pub const TSC_IOSCR_G3_IO4_Pos: u32 = 11;
pub const TSC_IOSCR_G3_IO4_Msk: u32 = 2048;
pub const TSC_IOSCR_G3_IO4: u32 = 2048;
pub const TSC_IOSCR_G4_IO1_Pos: u32 = 12;
pub const TSC_IOSCR_G4_IO1_Msk: u32 = 4096;
pub const TSC_IOSCR_G4_IO1: u32 = 4096;
pub const TSC_IOSCR_G4_IO2_Pos: u32 = 13;
pub const TSC_IOSCR_G4_IO2_Msk: u32 = 8192;
pub const TSC_IOSCR_G4_IO2: u32 = 8192;
pub const TSC_IOSCR_G4_IO3_Pos: u32 = 14;
pub const TSC_IOSCR_G4_IO3_Msk: u32 = 16384;
pub const TSC_IOSCR_G4_IO3: u32 = 16384;
pub const TSC_IOSCR_G4_IO4_Pos: u32 = 15;
pub const TSC_IOSCR_G4_IO4_Msk: u32 = 32768;
pub const TSC_IOSCR_G4_IO4: u32 = 32768;
pub const TSC_IOSCR_G5_IO1_Pos: u32 = 16;
pub const TSC_IOSCR_G5_IO1_Msk: u32 = 65536;
pub const TSC_IOSCR_G5_IO1: u32 = 65536;
pub const TSC_IOSCR_G5_IO2_Pos: u32 = 17;
pub const TSC_IOSCR_G5_IO2_Msk: u32 = 131072;
pub const TSC_IOSCR_G5_IO2: u32 = 131072;
pub const TSC_IOSCR_G5_IO3_Pos: u32 = 18;
pub const TSC_IOSCR_G5_IO3_Msk: u32 = 262144;
pub const TSC_IOSCR_G5_IO3: u32 = 262144;
pub const TSC_IOSCR_G5_IO4_Pos: u32 = 19;
pub const TSC_IOSCR_G5_IO4_Msk: u32 = 524288;
pub const TSC_IOSCR_G5_IO4: u32 = 524288;
pub const TSC_IOSCR_G6_IO1_Pos: u32 = 20;
pub const TSC_IOSCR_G6_IO1_Msk: u32 = 1048576;
pub const TSC_IOSCR_G6_IO1: u32 = 1048576;
pub const TSC_IOSCR_G6_IO2_Pos: u32 = 21;
pub const TSC_IOSCR_G6_IO2_Msk: u32 = 2097152;
pub const TSC_IOSCR_G6_IO2: u32 = 2097152;
pub const TSC_IOSCR_G6_IO3_Pos: u32 = 22;
pub const TSC_IOSCR_G6_IO3_Msk: u32 = 4194304;
pub const TSC_IOSCR_G6_IO3: u32 = 4194304;
pub const TSC_IOSCR_G6_IO4_Pos: u32 = 23;
pub const TSC_IOSCR_G6_IO4_Msk: u32 = 8388608;
pub const TSC_IOSCR_G6_IO4: u32 = 8388608;
pub const TSC_IOSCR_G7_IO1_Pos: u32 = 24;
pub const TSC_IOSCR_G7_IO1_Msk: u32 = 16777216;
pub const TSC_IOSCR_G7_IO1: u32 = 16777216;
pub const TSC_IOSCR_G7_IO2_Pos: u32 = 25;
pub const TSC_IOSCR_G7_IO2_Msk: u32 = 33554432;
pub const TSC_IOSCR_G7_IO2: u32 = 33554432;
pub const TSC_IOSCR_G7_IO3_Pos: u32 = 26;
pub const TSC_IOSCR_G7_IO3_Msk: u32 = 67108864;
pub const TSC_IOSCR_G7_IO3: u32 = 67108864;
pub const TSC_IOSCR_G7_IO4_Pos: u32 = 27;
pub const TSC_IOSCR_G7_IO4_Msk: u32 = 134217728;
pub const TSC_IOSCR_G7_IO4: u32 = 134217728;
pub const TSC_IOSCR_G8_IO1_Pos: u32 = 28;
pub const TSC_IOSCR_G8_IO1_Msk: u32 = 268435456;
pub const TSC_IOSCR_G8_IO1: u32 = 268435456;
pub const TSC_IOSCR_G8_IO2_Pos: u32 = 29;
pub const TSC_IOSCR_G8_IO2_Msk: u32 = 536870912;
pub const TSC_IOSCR_G8_IO2: u32 = 536870912;
pub const TSC_IOSCR_G8_IO3_Pos: u32 = 30;
pub const TSC_IOSCR_G8_IO3_Msk: u32 = 1073741824;
pub const TSC_IOSCR_G8_IO3: u32 = 1073741824;
pub const TSC_IOSCR_G8_IO4_Pos: u32 = 31;
pub const TSC_IOSCR_G8_IO4_Msk: u32 = 2147483648;
pub const TSC_IOSCR_G8_IO4: u32 = 2147483648;
pub const TSC_IOCCR_G1_IO1_Pos: u32 = 0;
pub const TSC_IOCCR_G1_IO1_Msk: u32 = 1;
pub const TSC_IOCCR_G1_IO1: u32 = 1;
pub const TSC_IOCCR_G1_IO2_Pos: u32 = 1;
pub const TSC_IOCCR_G1_IO2_Msk: u32 = 2;
pub const TSC_IOCCR_G1_IO2: u32 = 2;
pub const TSC_IOCCR_G1_IO3_Pos: u32 = 2;
pub const TSC_IOCCR_G1_IO3_Msk: u32 = 4;
pub const TSC_IOCCR_G1_IO3: u32 = 4;
pub const TSC_IOCCR_G1_IO4_Pos: u32 = 3;
pub const TSC_IOCCR_G1_IO4_Msk: u32 = 8;
pub const TSC_IOCCR_G1_IO4: u32 = 8;
pub const TSC_IOCCR_G2_IO1_Pos: u32 = 4;
pub const TSC_IOCCR_G2_IO1_Msk: u32 = 16;
pub const TSC_IOCCR_G2_IO1: u32 = 16;
pub const TSC_IOCCR_G2_IO2_Pos: u32 = 5;
pub const TSC_IOCCR_G2_IO2_Msk: u32 = 32;
pub const TSC_IOCCR_G2_IO2: u32 = 32;
pub const TSC_IOCCR_G2_IO3_Pos: u32 = 6;
pub const TSC_IOCCR_G2_IO3_Msk: u32 = 64;
pub const TSC_IOCCR_G2_IO3: u32 = 64;
pub const TSC_IOCCR_G2_IO4_Pos: u32 = 7;
pub const TSC_IOCCR_G2_IO4_Msk: u32 = 128;
pub const TSC_IOCCR_G2_IO4: u32 = 128;
pub const TSC_IOCCR_G3_IO1_Pos: u32 = 8;
pub const TSC_IOCCR_G3_IO1_Msk: u32 = 256;
pub const TSC_IOCCR_G3_IO1: u32 = 256;
pub const TSC_IOCCR_G3_IO2_Pos: u32 = 9;
pub const TSC_IOCCR_G3_IO2_Msk: u32 = 512;
pub const TSC_IOCCR_G3_IO2: u32 = 512;
pub const TSC_IOCCR_G3_IO3_Pos: u32 = 10;
pub const TSC_IOCCR_G3_IO3_Msk: u32 = 1024;
pub const TSC_IOCCR_G3_IO3: u32 = 1024;
pub const TSC_IOCCR_G3_IO4_Pos: u32 = 11;
pub const TSC_IOCCR_G3_IO4_Msk: u32 = 2048;
pub const TSC_IOCCR_G3_IO4: u32 = 2048;
pub const TSC_IOCCR_G4_IO1_Pos: u32 = 12;
pub const TSC_IOCCR_G4_IO1_Msk: u32 = 4096;
pub const TSC_IOCCR_G4_IO1: u32 = 4096;
pub const TSC_IOCCR_G4_IO2_Pos: u32 = 13;
pub const TSC_IOCCR_G4_IO2_Msk: u32 = 8192;
pub const TSC_IOCCR_G4_IO2: u32 = 8192;
pub const TSC_IOCCR_G4_IO3_Pos: u32 = 14;
pub const TSC_IOCCR_G4_IO3_Msk: u32 = 16384;
pub const TSC_IOCCR_G4_IO3: u32 = 16384;
pub const TSC_IOCCR_G4_IO4_Pos: u32 = 15;
pub const TSC_IOCCR_G4_IO4_Msk: u32 = 32768;
pub const TSC_IOCCR_G4_IO4: u32 = 32768;
pub const TSC_IOCCR_G5_IO1_Pos: u32 = 16;
pub const TSC_IOCCR_G5_IO1_Msk: u32 = 65536;
pub const TSC_IOCCR_G5_IO1: u32 = 65536;
pub const TSC_IOCCR_G5_IO2_Pos: u32 = 17;
pub const TSC_IOCCR_G5_IO2_Msk: u32 = 131072;
pub const TSC_IOCCR_G5_IO2: u32 = 131072;
pub const TSC_IOCCR_G5_IO3_Pos: u32 = 18;
pub const TSC_IOCCR_G5_IO3_Msk: u32 = 262144;
pub const TSC_IOCCR_G5_IO3: u32 = 262144;
pub const TSC_IOCCR_G5_IO4_Pos: u32 = 19;
pub const TSC_IOCCR_G5_IO4_Msk: u32 = 524288;
pub const TSC_IOCCR_G5_IO4: u32 = 524288;
pub const TSC_IOCCR_G6_IO1_Pos: u32 = 20;
pub const TSC_IOCCR_G6_IO1_Msk: u32 = 1048576;
pub const TSC_IOCCR_G6_IO1: u32 = 1048576;
pub const TSC_IOCCR_G6_IO2_Pos: u32 = 21;
pub const TSC_IOCCR_G6_IO2_Msk: u32 = 2097152;
pub const TSC_IOCCR_G6_IO2: u32 = 2097152;
pub const TSC_IOCCR_G6_IO3_Pos: u32 = 22;
pub const TSC_IOCCR_G6_IO3_Msk: u32 = 4194304;
pub const TSC_IOCCR_G6_IO3: u32 = 4194304;
pub const TSC_IOCCR_G6_IO4_Pos: u32 = 23;
pub const TSC_IOCCR_G6_IO4_Msk: u32 = 8388608;
pub const TSC_IOCCR_G6_IO4: u32 = 8388608;
pub const TSC_IOCCR_G7_IO1_Pos: u32 = 24;
pub const TSC_IOCCR_G7_IO1_Msk: u32 = 16777216;
pub const TSC_IOCCR_G7_IO1: u32 = 16777216;
pub const TSC_IOCCR_G7_IO2_Pos: u32 = 25;
pub const TSC_IOCCR_G7_IO2_Msk: u32 = 33554432;
pub const TSC_IOCCR_G7_IO2: u32 = 33554432;
pub const TSC_IOCCR_G7_IO3_Pos: u32 = 26;
pub const TSC_IOCCR_G7_IO3_Msk: u32 = 67108864;
pub const TSC_IOCCR_G7_IO3: u32 = 67108864;
pub const TSC_IOCCR_G7_IO4_Pos: u32 = 27;
pub const TSC_IOCCR_G7_IO4_Msk: u32 = 134217728;
pub const TSC_IOCCR_G7_IO4: u32 = 134217728;
pub const TSC_IOCCR_G8_IO1_Pos: u32 = 28;
pub const TSC_IOCCR_G8_IO1_Msk: u32 = 268435456;
pub const TSC_IOCCR_G8_IO1: u32 = 268435456;
pub const TSC_IOCCR_G8_IO2_Pos: u32 = 29;
pub const TSC_IOCCR_G8_IO2_Msk: u32 = 536870912;
pub const TSC_IOCCR_G8_IO2: u32 = 536870912;
pub const TSC_IOCCR_G8_IO3_Pos: u32 = 30;
pub const TSC_IOCCR_G8_IO3_Msk: u32 = 1073741824;
pub const TSC_IOCCR_G8_IO3: u32 = 1073741824;
pub const TSC_IOCCR_G8_IO4_Pos: u32 = 31;
pub const TSC_IOCCR_G8_IO4_Msk: u32 = 2147483648;
pub const TSC_IOCCR_G8_IO4: u32 = 2147483648;
pub const TSC_IOGCSR_G1E_Pos: u32 = 0;
pub const TSC_IOGCSR_G1E_Msk: u32 = 1;
pub const TSC_IOGCSR_G1E: u32 = 1;
pub const TSC_IOGCSR_G2E_Pos: u32 = 1;
pub const TSC_IOGCSR_G2E_Msk: u32 = 2;
pub const TSC_IOGCSR_G2E: u32 = 2;
pub const TSC_IOGCSR_G3E_Pos: u32 = 2;
pub const TSC_IOGCSR_G3E_Msk: u32 = 4;
pub const TSC_IOGCSR_G3E: u32 = 4;
pub const TSC_IOGCSR_G4E_Pos: u32 = 3;
pub const TSC_IOGCSR_G4E_Msk: u32 = 8;
pub const TSC_IOGCSR_G4E: u32 = 8;
pub const TSC_IOGCSR_G5E_Pos: u32 = 4;
pub const TSC_IOGCSR_G5E_Msk: u32 = 16;
pub const TSC_IOGCSR_G5E: u32 = 16;
pub const TSC_IOGCSR_G6E_Pos: u32 = 5;
pub const TSC_IOGCSR_G6E_Msk: u32 = 32;
pub const TSC_IOGCSR_G6E: u32 = 32;
pub const TSC_IOGCSR_G7E_Pos: u32 = 6;
pub const TSC_IOGCSR_G7E_Msk: u32 = 64;
pub const TSC_IOGCSR_G7E: u32 = 64;
pub const TSC_IOGCSR_G8E_Pos: u32 = 7;
pub const TSC_IOGCSR_G8E_Msk: u32 = 128;
pub const TSC_IOGCSR_G8E: u32 = 128;
pub const TSC_IOGCSR_G1S_Pos: u32 = 16;
pub const TSC_IOGCSR_G1S_Msk: u32 = 65536;
pub const TSC_IOGCSR_G1S: u32 = 65536;
pub const TSC_IOGCSR_G2S_Pos: u32 = 17;
pub const TSC_IOGCSR_G2S_Msk: u32 = 131072;
pub const TSC_IOGCSR_G2S: u32 = 131072;
pub const TSC_IOGCSR_G3S_Pos: u32 = 18;
pub const TSC_IOGCSR_G3S_Msk: u32 = 262144;
pub const TSC_IOGCSR_G3S: u32 = 262144;
pub const TSC_IOGCSR_G4S_Pos: u32 = 19;
pub const TSC_IOGCSR_G4S_Msk: u32 = 524288;
pub const TSC_IOGCSR_G4S: u32 = 524288;
pub const TSC_IOGCSR_G5S_Pos: u32 = 20;
pub const TSC_IOGCSR_G5S_Msk: u32 = 1048576;
pub const TSC_IOGCSR_G5S: u32 = 1048576;
pub const TSC_IOGCSR_G6S_Pos: u32 = 21;
pub const TSC_IOGCSR_G6S_Msk: u32 = 2097152;
pub const TSC_IOGCSR_G6S: u32 = 2097152;
pub const TSC_IOGCSR_G7S_Pos: u32 = 22;
pub const TSC_IOGCSR_G7S_Msk: u32 = 4194304;
pub const TSC_IOGCSR_G7S: u32 = 4194304;
pub const TSC_IOGCSR_G8S_Pos: u32 = 23;
pub const TSC_IOGCSR_G8S_Msk: u32 = 8388608;
pub const TSC_IOGCSR_G8S: u32 = 8388608;
pub const TSC_IOGXCR_CNT_Pos: u32 = 0;
pub const TSC_IOGXCR_CNT_Msk: u32 = 16383;
pub const TSC_IOGXCR_CNT: u32 = 16383;
pub const USART_CR1_UE_Pos: u32 = 0;
pub const USART_CR1_UE_Msk: u32 = 1;
pub const USART_CR1_UE: u32 = 1;
pub const USART_CR1_UESM_Pos: u32 = 1;
pub const USART_CR1_UESM_Msk: u32 = 2;
pub const USART_CR1_UESM: u32 = 2;
pub const USART_CR1_RE_Pos: u32 = 2;
pub const USART_CR1_RE_Msk: u32 = 4;
pub const USART_CR1_RE: u32 = 4;
pub const USART_CR1_TE_Pos: u32 = 3;
pub const USART_CR1_TE_Msk: u32 = 8;
pub const USART_CR1_TE: u32 = 8;
pub const USART_CR1_IDLEIE_Pos: u32 = 4;
pub const USART_CR1_IDLEIE_Msk: u32 = 16;
pub const USART_CR1_IDLEIE: u32 = 16;
pub const USART_CR1_RXNEIE_Pos: u32 = 5;
pub const USART_CR1_RXNEIE_Msk: u32 = 32;
pub const USART_CR1_RXNEIE: u32 = 32;
pub const USART_CR1_TCIE_Pos: u32 = 6;
pub const USART_CR1_TCIE_Msk: u32 = 64;
pub const USART_CR1_TCIE: u32 = 64;
pub const USART_CR1_TXEIE_Pos: u32 = 7;
pub const USART_CR1_TXEIE_Msk: u32 = 128;
pub const USART_CR1_TXEIE: u32 = 128;
pub const USART_CR1_PEIE_Pos: u32 = 8;
pub const USART_CR1_PEIE_Msk: u32 = 256;
pub const USART_CR1_PEIE: u32 = 256;
pub const USART_CR1_PS_Pos: u32 = 9;
pub const USART_CR1_PS_Msk: u32 = 512;
pub const USART_CR1_PS: u32 = 512;
pub const USART_CR1_PCE_Pos: u32 = 10;
pub const USART_CR1_PCE_Msk: u32 = 1024;
pub const USART_CR1_PCE: u32 = 1024;
pub const USART_CR1_WAKE_Pos: u32 = 11;
pub const USART_CR1_WAKE_Msk: u32 = 2048;
pub const USART_CR1_WAKE: u32 = 2048;
pub const USART_CR1_M_Pos: u32 = 12;
pub const USART_CR1_M_Msk: u32 = 268439552;
pub const USART_CR1_M: u32 = 268439552;
pub const USART_CR1_M0_Pos: u32 = 12;
pub const USART_CR1_M0_Msk: u32 = 4096;
pub const USART_CR1_M0: u32 = 4096;
pub const USART_CR1_MME_Pos: u32 = 13;
pub const USART_CR1_MME_Msk: u32 = 8192;
pub const USART_CR1_MME: u32 = 8192;
pub const USART_CR1_CMIE_Pos: u32 = 14;
pub const USART_CR1_CMIE_Msk: u32 = 16384;
pub const USART_CR1_CMIE: u32 = 16384;
pub const USART_CR1_OVER8_Pos: u32 = 15;
pub const USART_CR1_OVER8_Msk: u32 = 32768;
pub const USART_CR1_OVER8: u32 = 32768;
pub const USART_CR1_DEDT_Pos: u32 = 16;
pub const USART_CR1_DEDT_Msk: u32 = 2031616;
pub const USART_CR1_DEDT: u32 = 2031616;
pub const USART_CR1_DEDT_0: u32 = 65536;
pub const USART_CR1_DEDT_1: u32 = 131072;
pub const USART_CR1_DEDT_2: u32 = 262144;
pub const USART_CR1_DEDT_3: u32 = 524288;
pub const USART_CR1_DEDT_4: u32 = 1048576;
pub const USART_CR1_DEAT_Pos: u32 = 21;
pub const USART_CR1_DEAT_Msk: u32 = 65011712;
pub const USART_CR1_DEAT: u32 = 65011712;
pub const USART_CR1_DEAT_0: u32 = 2097152;
pub const USART_CR1_DEAT_1: u32 = 4194304;
pub const USART_CR1_DEAT_2: u32 = 8388608;
pub const USART_CR1_DEAT_3: u32 = 16777216;
pub const USART_CR1_DEAT_4: u32 = 33554432;
pub const USART_CR1_RTOIE_Pos: u32 = 26;
pub const USART_CR1_RTOIE_Msk: u32 = 67108864;
pub const USART_CR1_RTOIE: u32 = 67108864;
pub const USART_CR1_EOBIE_Pos: u32 = 27;
pub const USART_CR1_EOBIE_Msk: u32 = 134217728;
pub const USART_CR1_EOBIE: u32 = 134217728;
pub const USART_CR1_M1_Pos: u32 = 28;
pub const USART_CR1_M1_Msk: u32 = 268435456;
pub const USART_CR1_M1: u32 = 268435456;
pub const USART_CR2_ADDM7_Pos: u32 = 4;
pub const USART_CR2_ADDM7_Msk: u32 = 16;
pub const USART_CR2_ADDM7: u32 = 16;
pub const USART_CR2_LBDL_Pos: u32 = 5;
pub const USART_CR2_LBDL_Msk: u32 = 32;
pub const USART_CR2_LBDL: u32 = 32;
pub const USART_CR2_LBDIE_Pos: u32 = 6;
pub const USART_CR2_LBDIE_Msk: u32 = 64;
pub const USART_CR2_LBDIE: u32 = 64;
pub const USART_CR2_LBCL_Pos: u32 = 8;
pub const USART_CR2_LBCL_Msk: u32 = 256;
pub const USART_CR2_LBCL: u32 = 256;
pub const USART_CR2_CPHA_Pos: u32 = 9;
pub const USART_CR2_CPHA_Msk: u32 = 512;
pub const USART_CR2_CPHA: u32 = 512;
pub const USART_CR2_CPOL_Pos: u32 = 10;
pub const USART_CR2_CPOL_Msk: u32 = 1024;
pub const USART_CR2_CPOL: u32 = 1024;
pub const USART_CR2_CLKEN_Pos: u32 = 11;
pub const USART_CR2_CLKEN_Msk: u32 = 2048;
pub const USART_CR2_CLKEN: u32 = 2048;
pub const USART_CR2_STOP_Pos: u32 = 12;
pub const USART_CR2_STOP_Msk: u32 = 12288;
pub const USART_CR2_STOP: u32 = 12288;
pub const USART_CR2_STOP_0: u32 = 4096;
pub const USART_CR2_STOP_1: u32 = 8192;
pub const USART_CR2_LINEN_Pos: u32 = 14;
pub const USART_CR2_LINEN_Msk: u32 = 16384;
pub const USART_CR2_LINEN: u32 = 16384;
pub const USART_CR2_SWAP_Pos: u32 = 15;
pub const USART_CR2_SWAP_Msk: u32 = 32768;
pub const USART_CR2_SWAP: u32 = 32768;
pub const USART_CR2_RXINV_Pos: u32 = 16;
pub const USART_CR2_RXINV_Msk: u32 = 65536;
pub const USART_CR2_RXINV: u32 = 65536;
pub const USART_CR2_TXINV_Pos: u32 = 17;
pub const USART_CR2_TXINV_Msk: u32 = 131072;
pub const USART_CR2_TXINV: u32 = 131072;
pub const USART_CR2_DATAINV_Pos: u32 = 18;
pub const USART_CR2_DATAINV_Msk: u32 = 262144;
pub const USART_CR2_DATAINV: u32 = 262144;
pub const USART_CR2_MSBFIRST_Pos: u32 = 19;
pub const USART_CR2_MSBFIRST_Msk: u32 = 524288;
pub const USART_CR2_MSBFIRST: u32 = 524288;
pub const USART_CR2_ABREN_Pos: u32 = 20;
pub const USART_CR2_ABREN_Msk: u32 = 1048576;
pub const USART_CR2_ABREN: u32 = 1048576;
pub const USART_CR2_ABRMODE_Pos: u32 = 21;
pub const USART_CR2_ABRMODE_Msk: u32 = 6291456;
pub const USART_CR2_ABRMODE: u32 = 6291456;
pub const USART_CR2_ABRMODE_0: u32 = 2097152;
pub const USART_CR2_ABRMODE_1: u32 = 4194304;
pub const USART_CR2_RTOEN_Pos: u32 = 23;
pub const USART_CR2_RTOEN_Msk: u32 = 8388608;
pub const USART_CR2_RTOEN: u32 = 8388608;
pub const USART_CR2_ADD_Pos: u32 = 24;
pub const USART_CR2_ADD_Msk: u32 = 4278190080;
pub const USART_CR2_ADD: u32 = 4278190080;
pub const USART_CR3_EIE_Pos: u32 = 0;
pub const USART_CR3_EIE_Msk: u32 = 1;
pub const USART_CR3_EIE: u32 = 1;
pub const USART_CR3_IREN_Pos: u32 = 1;
pub const USART_CR3_IREN_Msk: u32 = 2;
pub const USART_CR3_IREN: u32 = 2;
pub const USART_CR3_IRLP_Pos: u32 = 2;
pub const USART_CR3_IRLP_Msk: u32 = 4;
pub const USART_CR3_IRLP: u32 = 4;
pub const USART_CR3_HDSEL_Pos: u32 = 3;
pub const USART_CR3_HDSEL_Msk: u32 = 8;
pub const USART_CR3_HDSEL: u32 = 8;
pub const USART_CR3_NACK_Pos: u32 = 4;
pub const USART_CR3_NACK_Msk: u32 = 16;
pub const USART_CR3_NACK: u32 = 16;
pub const USART_CR3_SCEN_Pos: u32 = 5;
pub const USART_CR3_SCEN_Msk: u32 = 32;
pub const USART_CR3_SCEN: u32 = 32;
pub const USART_CR3_DMAR_Pos: u32 = 6;
pub const USART_CR3_DMAR_Msk: u32 = 64;
pub const USART_CR3_DMAR: u32 = 64;
pub const USART_CR3_DMAT_Pos: u32 = 7;
pub const USART_CR3_DMAT_Msk: u32 = 128;
pub const USART_CR3_DMAT: u32 = 128;
pub const USART_CR3_RTSE_Pos: u32 = 8;
pub const USART_CR3_RTSE_Msk: u32 = 256;
pub const USART_CR3_RTSE: u32 = 256;
pub const USART_CR3_CTSE_Pos: u32 = 9;
pub const USART_CR3_CTSE_Msk: u32 = 512;
pub const USART_CR3_CTSE: u32 = 512;
pub const USART_CR3_CTSIE_Pos: u32 = 10;
pub const USART_CR3_CTSIE_Msk: u32 = 1024;
pub const USART_CR3_CTSIE: u32 = 1024;
pub const USART_CR3_ONEBIT_Pos: u32 = 11;
pub const USART_CR3_ONEBIT_Msk: u32 = 2048;
pub const USART_CR3_ONEBIT: u32 = 2048;
pub const USART_CR3_OVRDIS_Pos: u32 = 12;
pub const USART_CR3_OVRDIS_Msk: u32 = 4096;
pub const USART_CR3_OVRDIS: u32 = 4096;
pub const USART_CR3_DDRE_Pos: u32 = 13;
pub const USART_CR3_DDRE_Msk: u32 = 8192;
pub const USART_CR3_DDRE: u32 = 8192;
pub const USART_CR3_DEM_Pos: u32 = 14;
pub const USART_CR3_DEM_Msk: u32 = 16384;
pub const USART_CR3_DEM: u32 = 16384;
pub const USART_CR3_DEP_Pos: u32 = 15;
pub const USART_CR3_DEP_Msk: u32 = 32768;
pub const USART_CR3_DEP: u32 = 32768;
pub const USART_CR3_SCARCNT_Pos: u32 = 17;
pub const USART_CR3_SCARCNT_Msk: u32 = 917504;
pub const USART_CR3_SCARCNT: u32 = 917504;
pub const USART_CR3_SCARCNT_0: u32 = 131072;
pub const USART_CR3_SCARCNT_1: u32 = 262144;
pub const USART_CR3_SCARCNT_2: u32 = 524288;
pub const USART_CR3_WUS_Pos: u32 = 20;
pub const USART_CR3_WUS_Msk: u32 = 3145728;
pub const USART_CR3_WUS: u32 = 3145728;
pub const USART_CR3_WUS_0: u32 = 1048576;
pub const USART_CR3_WUS_1: u32 = 2097152;
pub const USART_CR3_WUFIE_Pos: u32 = 22;
pub const USART_CR3_WUFIE_Msk: u32 = 4194304;
pub const USART_CR3_WUFIE: u32 = 4194304;
pub const USART_CR3_UCESM_Pos: u32 = 23;
pub const USART_CR3_UCESM_Msk: u32 = 8388608;
pub const USART_CR3_UCESM: u32 = 8388608;
pub const USART_BRR_DIV_FRACTION_Pos: u32 = 0;
pub const USART_BRR_DIV_FRACTION_Msk: u32 = 15;
pub const USART_BRR_DIV_FRACTION: u32 = 15;
pub const USART_BRR_DIV_MANTISSA_Pos: u32 = 4;
pub const USART_BRR_DIV_MANTISSA_Msk: u32 = 65520;
pub const USART_BRR_DIV_MANTISSA: u32 = 65520;
pub const USART_GTPR_PSC_Pos: u32 = 0;
pub const USART_GTPR_PSC_Msk: u32 = 255;
pub const USART_GTPR_PSC: u32 = 255;
pub const USART_GTPR_GT_Pos: u32 = 8;
pub const USART_GTPR_GT_Msk: u32 = 65280;
pub const USART_GTPR_GT: u32 = 65280;
pub const USART_RTOR_RTO_Pos: u32 = 0;
pub const USART_RTOR_RTO_Msk: u32 = 16777215;
pub const USART_RTOR_RTO: u32 = 16777215;
pub const USART_RTOR_BLEN_Pos: u32 = 24;
pub const USART_RTOR_BLEN_Msk: u32 = 4278190080;
pub const USART_RTOR_BLEN: u32 = 4278190080;
pub const USART_RQR_ABRRQ_Pos: u32 = 0;
pub const USART_RQR_ABRRQ_Msk: u32 = 1;
pub const USART_RQR_ABRRQ: u32 = 1;
pub const USART_RQR_SBKRQ_Pos: u32 = 1;
pub const USART_RQR_SBKRQ_Msk: u32 = 2;
pub const USART_RQR_SBKRQ: u32 = 2;
pub const USART_RQR_MMRQ_Pos: u32 = 2;
pub const USART_RQR_MMRQ_Msk: u32 = 4;
pub const USART_RQR_MMRQ: u32 = 4;
pub const USART_RQR_RXFRQ_Pos: u32 = 3;
pub const USART_RQR_RXFRQ_Msk: u32 = 8;
pub const USART_RQR_RXFRQ: u32 = 8;
pub const USART_RQR_TXFRQ_Pos: u32 = 4;
pub const USART_RQR_TXFRQ_Msk: u32 = 16;
pub const USART_RQR_TXFRQ: u32 = 16;
pub const USART_ISR_PE_Pos: u32 = 0;
pub const USART_ISR_PE_Msk: u32 = 1;
pub const USART_ISR_PE: u32 = 1;
pub const USART_ISR_FE_Pos: u32 = 1;
pub const USART_ISR_FE_Msk: u32 = 2;
pub const USART_ISR_FE: u32 = 2;
pub const USART_ISR_NE_Pos: u32 = 2;
pub const USART_ISR_NE_Msk: u32 = 4;
pub const USART_ISR_NE: u32 = 4;
pub const USART_ISR_ORE_Pos: u32 = 3;
pub const USART_ISR_ORE_Msk: u32 = 8;
pub const USART_ISR_ORE: u32 = 8;
pub const USART_ISR_IDLE_Pos: u32 = 4;
pub const USART_ISR_IDLE_Msk: u32 = 16;
pub const USART_ISR_IDLE: u32 = 16;
pub const USART_ISR_RXNE_Pos: u32 = 5;
pub const USART_ISR_RXNE_Msk: u32 = 32;
pub const USART_ISR_RXNE: u32 = 32;
pub const USART_ISR_TC_Pos: u32 = 6;
pub const USART_ISR_TC_Msk: u32 = 64;
pub const USART_ISR_TC: u32 = 64;
pub const USART_ISR_TXE_Pos: u32 = 7;
pub const USART_ISR_TXE_Msk: u32 = 128;
pub const USART_ISR_TXE: u32 = 128;
pub const USART_ISR_LBDF_Pos: u32 = 8;
pub const USART_ISR_LBDF_Msk: u32 = 256;
pub const USART_ISR_LBDF: u32 = 256;
pub const USART_ISR_CTSIF_Pos: u32 = 9;
pub const USART_ISR_CTSIF_Msk: u32 = 512;
pub const USART_ISR_CTSIF: u32 = 512;
pub const USART_ISR_CTS_Pos: u32 = 10;
pub const USART_ISR_CTS_Msk: u32 = 1024;
pub const USART_ISR_CTS: u32 = 1024;
pub const USART_ISR_RTOF_Pos: u32 = 11;
pub const USART_ISR_RTOF_Msk: u32 = 2048;
pub const USART_ISR_RTOF: u32 = 2048;
pub const USART_ISR_EOBF_Pos: u32 = 12;
pub const USART_ISR_EOBF_Msk: u32 = 4096;
pub const USART_ISR_EOBF: u32 = 4096;
pub const USART_ISR_ABRE_Pos: u32 = 14;
pub const USART_ISR_ABRE_Msk: u32 = 16384;
pub const USART_ISR_ABRE: u32 = 16384;
pub const USART_ISR_ABRF_Pos: u32 = 15;
pub const USART_ISR_ABRF_Msk: u32 = 32768;
pub const USART_ISR_ABRF: u32 = 32768;
pub const USART_ISR_BUSY_Pos: u32 = 16;
pub const USART_ISR_BUSY_Msk: u32 = 65536;
pub const USART_ISR_BUSY: u32 = 65536;
pub const USART_ISR_CMF_Pos: u32 = 17;
pub const USART_ISR_CMF_Msk: u32 = 131072;
pub const USART_ISR_CMF: u32 = 131072;
pub const USART_ISR_SBKF_Pos: u32 = 18;
pub const USART_ISR_SBKF_Msk: u32 = 262144;
pub const USART_ISR_SBKF: u32 = 262144;
pub const USART_ISR_RWU_Pos: u32 = 19;
pub const USART_ISR_RWU_Msk: u32 = 524288;
pub const USART_ISR_RWU: u32 = 524288;
pub const USART_ISR_WUF_Pos: u32 = 20;
pub const USART_ISR_WUF_Msk: u32 = 1048576;
pub const USART_ISR_WUF: u32 = 1048576;
pub const USART_ISR_TEACK_Pos: u32 = 21;
pub const USART_ISR_TEACK_Msk: u32 = 2097152;
pub const USART_ISR_TEACK: u32 = 2097152;
pub const USART_ISR_REACK_Pos: u32 = 22;
pub const USART_ISR_REACK_Msk: u32 = 4194304;
pub const USART_ISR_REACK: u32 = 4194304;
pub const USART_ICR_PECF_Pos: u32 = 0;
pub const USART_ICR_PECF_Msk: u32 = 1;
pub const USART_ICR_PECF: u32 = 1;
pub const USART_ICR_FECF_Pos: u32 = 1;
pub const USART_ICR_FECF_Msk: u32 = 2;
pub const USART_ICR_FECF: u32 = 2;
pub const USART_ICR_NCF_Pos: u32 = 2;
pub const USART_ICR_NCF_Msk: u32 = 4;
pub const USART_ICR_NCF: u32 = 4;
pub const USART_ICR_ORECF_Pos: u32 = 3;
pub const USART_ICR_ORECF_Msk: u32 = 8;
pub const USART_ICR_ORECF: u32 = 8;
pub const USART_ICR_IDLECF_Pos: u32 = 4;
pub const USART_ICR_IDLECF_Msk: u32 = 16;
pub const USART_ICR_IDLECF: u32 = 16;
pub const USART_ICR_TCCF_Pos: u32 = 6;
pub const USART_ICR_TCCF_Msk: u32 = 64;
pub const USART_ICR_TCCF: u32 = 64;
pub const USART_ICR_LBDCF_Pos: u32 = 8;
pub const USART_ICR_LBDCF_Msk: u32 = 256;
pub const USART_ICR_LBDCF: u32 = 256;
pub const USART_ICR_CTSCF_Pos: u32 = 9;
pub const USART_ICR_CTSCF_Msk: u32 = 512;
pub const USART_ICR_CTSCF: u32 = 512;
pub const USART_ICR_RTOCF_Pos: u32 = 11;
pub const USART_ICR_RTOCF_Msk: u32 = 2048;
pub const USART_ICR_RTOCF: u32 = 2048;
pub const USART_ICR_EOBCF_Pos: u32 = 12;
pub const USART_ICR_EOBCF_Msk: u32 = 4096;
pub const USART_ICR_EOBCF: u32 = 4096;
pub const USART_ICR_CMCF_Pos: u32 = 17;
pub const USART_ICR_CMCF_Msk: u32 = 131072;
pub const USART_ICR_CMCF: u32 = 131072;
pub const USART_ICR_WUCF_Pos: u32 = 20;
pub const USART_ICR_WUCF_Msk: u32 = 1048576;
pub const USART_ICR_WUCF: u32 = 1048576;
pub const USART_ICR_NECF: u32 = 4;
pub const USART_RDR_RDR_Pos: u32 = 0;
pub const USART_RDR_RDR_Msk: u32 = 511;
pub const USART_RDR_RDR: u32 = 511;
pub const USART_TDR_TDR_Pos: u32 = 0;
pub const USART_TDR_TDR_Msk: u32 = 511;
pub const USART_TDR_TDR: u32 = 511;
pub const USB_BASE: u32 = 1073765376;
pub const USB_PMAADDR_Pos: u32 = 13;
pub const USB_PMAADDR_Msk: u32 = 1073766400;
pub const USB_PMAADDR: u32 = 1073766400;
pub const USB_CNTR: u32 = 1073765440;
pub const USB_ISTR: u32 = 1073765444;
pub const USB_FNR: u32 = 1073765448;
pub const USB_DADDR: u32 = 1073765452;
pub const USB_BTABLE: u32 = 1073765456;
pub const USB_LPMCSR: u32 = 1073765460;
pub const USB_BCDR: u32 = 1073765464;
pub const USB_ISTR_CTR: u32 = 32768;
pub const USB_ISTR_PMAOVR: u32 = 16384;
pub const USB_ISTR_ERR: u32 = 8192;
pub const USB_ISTR_WKUP: u32 = 4096;
pub const USB_ISTR_SUSP: u32 = 2048;
pub const USB_ISTR_RESET: u32 = 1024;
pub const USB_ISTR_SOF: u32 = 512;
pub const USB_ISTR_ESOF: u32 = 256;
pub const USB_ISTR_L1REQ: u32 = 128;
pub const USB_ISTR_DIR: u32 = 16;
pub const USB_ISTR_EP_ID: u32 = 15;
pub const USB_CLR_CTR: i32 = -32769;
pub const USB_CLR_PMAOVR: i32 = -16385;
pub const USB_CLR_ERR: i32 = -8193;
pub const USB_CLR_WKUP: i32 = -4097;
pub const USB_CLR_SUSP: i32 = -2049;
pub const USB_CLR_RESET: i32 = -1025;
pub const USB_CLR_SOF: i32 = -513;
pub const USB_CLR_ESOF: i32 = -257;
pub const USB_CLR_L1REQ: i32 = -129;
pub const USB_CNTR_CTRM: u32 = 32768;
pub const USB_CNTR_PMAOVRM: u32 = 16384;
pub const USB_CNTR_ERRM: u32 = 8192;
pub const USB_CNTR_WKUPM: u32 = 4096;
pub const USB_CNTR_SUSPM: u32 = 2048;
pub const USB_CNTR_RESETM: u32 = 1024;
pub const USB_CNTR_SOFM: u32 = 512;
pub const USB_CNTR_ESOFM: u32 = 256;
pub const USB_CNTR_L1REQM: u32 = 128;
pub const USB_CNTR_L1RESUME: u32 = 32;
pub const USB_CNTR_RESUME: u32 = 16;
pub const USB_CNTR_FSUSP: u32 = 8;
pub const USB_CNTR_LPMODE: u32 = 4;
pub const USB_CNTR_PDWN: u32 = 2;
pub const USB_CNTR_FRES: u32 = 1;
pub const USB_BCDR_DPPU: u32 = 32768;
pub const USB_BCDR_PS2DET: u32 = 128;
pub const USB_BCDR_SDET: u32 = 64;
pub const USB_BCDR_PDET: u32 = 32;
pub const USB_BCDR_DCDET: u32 = 16;
pub const USB_BCDR_SDEN: u32 = 8;
pub const USB_BCDR_PDEN: u32 = 4;
pub const USB_BCDR_DCDEN: u32 = 2;
pub const USB_BCDR_BCDEN: u32 = 1;
pub const USB_LPMCSR_BESL: u32 = 240;
pub const USB_LPMCSR_REMWAKE: u32 = 8;
pub const USB_LPMCSR_LPMACK: u32 = 2;
pub const USB_LPMCSR_LMPEN: u32 = 1;
pub const USB_FNR_RXDP: u32 = 32768;
pub const USB_FNR_RXDM: u32 = 16384;
pub const USB_FNR_LCK: u32 = 8192;
pub const USB_FNR_LSOF: u32 = 6144;
pub const USB_FNR_FN: u32 = 2047;
pub const USB_DADDR_EF: u32 = 128;
pub const USB_DADDR_ADD: u32 = 127;
pub const USB_EP0R: u32 = 1073765376;
pub const USB_EP1R: u32 = 1073765380;
pub const USB_EP2R: u32 = 1073765384;
pub const USB_EP3R: u32 = 1073765388;
pub const USB_EP4R: u32 = 1073765392;
pub const USB_EP5R: u32 = 1073765396;
pub const USB_EP6R: u32 = 1073765400;
pub const USB_EP7R: u32 = 1073765404;
pub const USB_EP_CTR_RX: u32 = 32768;
pub const USB_EP_DTOG_RX: u32 = 16384;
pub const USB_EPRX_STAT: u32 = 12288;
pub const USB_EP_SETUP: u32 = 2048;
pub const USB_EP_T_FIELD: u32 = 1536;
pub const USB_EP_KIND: u32 = 256;
pub const USB_EP_CTR_TX: u32 = 128;
pub const USB_EP_DTOG_TX: u32 = 64;
pub const USB_EPTX_STAT: u32 = 48;
pub const USB_EPADDR_FIELD: u32 = 15;
pub const USB_EPREG_MASK: u32 = 36751;
pub const USB_EP_TYPE_MASK: u32 = 1536;
pub const USB_EP_BULK: u32 = 0;
pub const USB_EP_CONTROL: u32 = 512;
pub const USB_EP_ISOCHRONOUS: u32 = 1024;
pub const USB_EP_INTERRUPT: u32 = 1536;
pub const USB_EP_T_MASK: u32 = 35215;
pub const USB_EPKIND_MASK: u32 = 36495;
pub const USB_EP_TX_DIS: u32 = 0;
pub const USB_EP_TX_STALL: u32 = 16;
pub const USB_EP_TX_NAK: u32 = 32;
pub const USB_EP_TX_VALID: u32 = 48;
pub const USB_EPTX_DTOG1: u32 = 16;
pub const USB_EPTX_DTOG2: u32 = 32;
pub const USB_EPTX_DTOGMASK: u32 = 36799;
pub const USB_EP_RX_DIS: u32 = 0;
pub const USB_EP_RX_STALL: u32 = 4096;
pub const USB_EP_RX_NAK: u32 = 8192;
pub const USB_EP_RX_VALID: u32 = 12288;
pub const USB_EPRX_DTOG1: u32 = 4096;
pub const USB_EPRX_DTOG2: u32 = 8192;
pub const USB_EPRX_DTOGMASK: u32 = 49039;
pub const WWDG_CR_T_Pos: u32 = 0;
pub const WWDG_CR_T_Msk: u32 = 127;
pub const WWDG_CR_T: u32 = 127;
pub const WWDG_CR_T_0: u32 = 1;
pub const WWDG_CR_T_1: u32 = 2;
pub const WWDG_CR_T_2: u32 = 4;
pub const WWDG_CR_T_3: u32 = 8;
pub const WWDG_CR_T_4: u32 = 16;
pub const WWDG_CR_T_5: u32 = 32;
pub const WWDG_CR_T_6: u32 = 64;
pub const WWDG_CR_T0: u32 = 1;
pub const WWDG_CR_T1: u32 = 2;
pub const WWDG_CR_T2: u32 = 4;
pub const WWDG_CR_T3: u32 = 8;
pub const WWDG_CR_T4: u32 = 16;
pub const WWDG_CR_T5: u32 = 32;
pub const WWDG_CR_T6: u32 = 64;
pub const WWDG_CR_WDGA_Pos: u32 = 7;
pub const WWDG_CR_WDGA_Msk: u32 = 128;
pub const WWDG_CR_WDGA: u32 = 128;
pub const WWDG_CFR_W_Pos: u32 = 0;
pub const WWDG_CFR_W_Msk: u32 = 127;
pub const WWDG_CFR_W: u32 = 127;
pub const WWDG_CFR_W_0: u32 = 1;
pub const WWDG_CFR_W_1: u32 = 2;
pub const WWDG_CFR_W_2: u32 = 4;
pub const WWDG_CFR_W_3: u32 = 8;
pub const WWDG_CFR_W_4: u32 = 16;
pub const WWDG_CFR_W_5: u32 = 32;
pub const WWDG_CFR_W_6: u32 = 64;
pub const WWDG_CFR_W0: u32 = 1;
pub const WWDG_CFR_W1: u32 = 2;
pub const WWDG_CFR_W2: u32 = 4;
pub const WWDG_CFR_W3: u32 = 8;
pub const WWDG_CFR_W4: u32 = 16;
pub const WWDG_CFR_W5: u32 = 32;
pub const WWDG_CFR_W6: u32 = 64;
pub const WWDG_CFR_WDGTB_Pos: u32 = 7;
pub const WWDG_CFR_WDGTB_Msk: u32 = 384;
pub const WWDG_CFR_WDGTB: u32 = 384;
pub const WWDG_CFR_WDGTB_0: u32 = 128;
pub const WWDG_CFR_WDGTB_1: u32 = 256;
pub const WWDG_CFR_WDGTB0: u32 = 128;
pub const WWDG_CFR_WDGTB1: u32 = 256;
pub const WWDG_CFR_EWI_Pos: u32 = 9;
pub const WWDG_CFR_EWI_Msk: u32 = 512;
pub const WWDG_CFR_EWI: u32 = 512;
pub const WWDG_SR_EWIF_Pos: u32 = 0;
pub const WWDG_SR_EWIF_Msk: u32 = 1;
pub const WWDG_SR_EWIF: u32 = 1;
pub const LPUART1_IRQn: u32 = 29;
pub const AES_LPUART1_IRQn: u32 = 29;
pub const AES_RNG_LPUART1_IRQn: u32 = 29;
pub const TIM6_IRQn: u32 = 17;
pub const RCC_IRQn: u32 = 4;
pub const DMA1_Channel4_5_IRQn: u32 = 11;
pub const ADC1_IRQn: u32 = 12;
pub const SVC_IRQn: i32 = -5;
#[doc = "< 2 Non Maskable Interrupt"]
pub const IRQn_Type_NonMaskableInt_IRQn: IRQn_Type = -14;
#[doc = "< 3 Cortex-M0+ Hard Fault Interrupt"]
pub const IRQn_Type_HardFault_IRQn: IRQn_Type = -13;
#[doc = "< 11 Cortex-M0+ SV Call Interrupt"]
pub const IRQn_Type_SVCall_IRQn: IRQn_Type = -5;
#[doc = "< 14 Cortex-M0+ Pend SV Interrupt"]
pub const IRQn_Type_PendSV_IRQn: IRQn_Type = -2;
#[doc = "< 15 Cortex-M0+ System Tick Interrupt"]
pub const IRQn_Type_SysTick_IRQn: IRQn_Type = -1;
#[doc = "< Window WatchDog Interrupt"]
pub const IRQn_Type_WWDG_IRQn: IRQn_Type = 0;
#[doc = "< PVD through EXTI Line detect Interrupt"]
pub const IRQn_Type_PVD_IRQn: IRQn_Type = 1;
#[doc = "< RTC through EXTI Line Interrupt"]
pub const IRQn_Type_RTC_IRQn: IRQn_Type = 2;
#[doc = "< FLASH Interrupt"]
pub const IRQn_Type_FLASH_IRQn: IRQn_Type = 3;
#[doc = "< RCC and CRS Interrupts"]
pub const IRQn_Type_RCC_CRS_IRQn: IRQn_Type = 4;
#[doc = "< EXTI Line 0 and 1 Interrupts"]
pub const IRQn_Type_EXTI0_1_IRQn: IRQn_Type = 5;
#[doc = "< EXTI Line 2 and 3 Interrupts"]
pub const IRQn_Type_EXTI2_3_IRQn: IRQn_Type = 6;
#[doc = "< EXTI Line 4 to 15 Interrupts"]
pub const IRQn_Type_EXTI4_15_IRQn: IRQn_Type = 7;
#[doc = "< TSC Interrupt"]
pub const IRQn_Type_TSC_IRQn: IRQn_Type = 8;
#[doc = "< DMA1 Channel 1 Interrupt"]
pub const IRQn_Type_DMA1_Channel1_IRQn: IRQn_Type = 9;
#[doc = "< DMA1 Channel 2 and Channel 3 Interrupts"]
pub const IRQn_Type_DMA1_Channel2_3_IRQn: IRQn_Type = 10;
#[doc = "< DMA1 Channel 4, Channel 5, Channel 6 and Channel 7 Interrupts"]
pub const IRQn_Type_DMA1_Channel4_5_6_7_IRQn: IRQn_Type = 11;
#[doc = "< ADC1, COMP1 and COMP2 Interrupts"]
pub const IRQn_Type_ADC1_COMP_IRQn: IRQn_Type = 12;
#[doc = "< LPTIM1 Interrupt"]
pub const IRQn_Type_LPTIM1_IRQn: IRQn_Type = 13;
#[doc = "< USART4 and USART5 Interrupt"]
pub const IRQn_Type_USART4_5_IRQn: IRQn_Type = 14;
#[doc = "< TIM2 Interrupt"]
pub const IRQn_Type_TIM2_IRQn: IRQn_Type = 15;
#[doc = "< TIM3 Interrupt"]
pub const IRQn_Type_TIM3_IRQn: IRQn_Type = 16;
#[doc = "< TIM6 and DAC Interrupts"]
pub const IRQn_Type_TIM6_DAC_IRQn: IRQn_Type = 17;
#[doc = "< TIM7 Interrupt"]
pub const IRQn_Type_TIM7_IRQn: IRQn_Type = 18;
#[doc = "< TIM21 Interrupt"]
pub const IRQn_Type_TIM21_IRQn: IRQn_Type = 20;
#[doc = "< I2C3 Interrupt"]
pub const IRQn_Type_I2C3_IRQn: IRQn_Type = 21;
#[doc = "< TIM22 Interrupt"]
pub const IRQn_Type_TIM22_IRQn: IRQn_Type = 22;
#[doc = "< I2C1 Interrupt"]
pub const IRQn_Type_I2C1_IRQn: IRQn_Type = 23;
#[doc = "< I2C2 Interrupt"]
pub const IRQn_Type_I2C2_IRQn: IRQn_Type = 24;
#[doc = "< SPI1 Interrupt"]
pub const IRQn_Type_SPI1_IRQn: IRQn_Type = 25;
#[doc = "< SPI2 Interrupt"]
pub const IRQn_Type_SPI2_IRQn: IRQn_Type = 26;
#[doc = "< USART1 Interrupt"]
pub const IRQn_Type_USART1_IRQn: IRQn_Type = 27;
#[doc = "< USART2 Interrupt"]
pub const IRQn_Type_USART2_IRQn: IRQn_Type = 28;
#[doc = "< RNG and LPUART1 Interrupts"]
pub const IRQn_Type_RNG_LPUART1_IRQn: IRQn_Type = 29;
#[doc = "< USB global Interrupt"]
pub const IRQn_Type_USB_IRQn: IRQn_Type = 31;
pub type IRQn_Type = ::core::ffi::c_int;
pub type __u_char = ::core::ffi::c_uchar;
pub type __u_short = ::core::ffi::c_ushort;
pub type __u_int = ::core::ffi::c_uint;
pub type __u_long = ::core::ffi::c_ulong;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_long;
pub type __uint64_t = ::core::ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::core::ffi::c_long;
pub type __u_quad_t = ::core::ffi::c_ulong;
pub type __intmax_t = ::core::ffi::c_long;
pub type __uintmax_t = ::core::ffi::c_ulong;
pub type __dev_t = ::core::ffi::c_ulong;
pub type __uid_t = ::core::ffi::c_uint;
pub type __gid_t = ::core::ffi::c_uint;
pub type __ino_t = ::core::ffi::c_ulong;
pub type __ino64_t = ::core::ffi::c_ulong;
pub type __mode_t = ::core::ffi::c_uint;
pub type __nlink_t = ::core::ffi::c_ulong;
pub type __off_t = ::core::ffi::c_long;
pub type __off64_t = ::core::ffi::c_long;
pub type __pid_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::core::ffi::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::core::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::core::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::core::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::core::ffi::c_long;
pub type __rlim_t = ::core::ffi::c_ulong;
pub type __rlim64_t = ::core::ffi::c_ulong;
pub type __id_t = ::core::ffi::c_uint;
pub type __time_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_uint;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __suseconds64_t = ::core::ffi::c_long;
pub type __daddr_t = ::core::ffi::c_int;
pub type __key_t = ::core::ffi::c_int;
pub type __clockid_t = ::core::ffi::c_int;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type __blksize_t = ::core::ffi::c_long;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blkcnt64_t = ::core::ffi::c_long;
pub type __fsblkcnt_t = ::core::ffi::c_ulong;
pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
pub type __fsfilcnt_t = ::core::ffi::c_ulong;
pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
pub type __fsword_t = ::core::ffi::c_long;
pub type __ssize_t = ::core::ffi::c_long;
pub type __syscall_slong_t = ::core::ffi::c_long;
pub type __syscall_ulong_t = ::core::ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::core::ffi::c_char;
pub type __intptr_t = ::core::ffi::c_long;
pub type __socklen_t = ::core::ffi::c_uint;
pub type __sig_atomic_t = ::core::ffi::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type int_fast16_t = ::core::ffi::c_long;
pub type int_fast32_t = ::core::ffi::c_long;
pub type int_fast64_t = ::core::ffi::c_long;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type uint_fast16_t = ::core::ffi::c_ulong;
pub type uint_fast32_t = ::core::ffi::c_ulong;
pub type uint_fast64_t = ::core::ffi::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct T_UINT32 {
    pub v: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T_UINT32"][::core::mem::size_of::<T_UINT32>() - 4usize];
    ["Alignment of T_UINT32"][::core::mem::align_of::<T_UINT32>() - 1usize];
    ["Offset of field: T_UINT32::v"][::core::mem::offset_of!(T_UINT32, v) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct T_UINT16_WRITE {
    pub v: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T_UINT16_WRITE"][::core::mem::size_of::<T_UINT16_WRITE>() - 2usize];
    ["Alignment of T_UINT16_WRITE"][::core::mem::align_of::<T_UINT16_WRITE>() - 1usize];
    ["Offset of field: T_UINT16_WRITE::v"][::core::mem::offset_of!(T_UINT16_WRITE, v) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct T_UINT16_READ {
    pub v: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T_UINT16_READ"][::core::mem::size_of::<T_UINT16_READ>() - 2usize];
    ["Alignment of T_UINT16_READ"][::core::mem::align_of::<T_UINT16_READ>() - 1usize];
    ["Offset of field: T_UINT16_READ::v"][::core::mem::offset_of!(T_UINT16_READ, v) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct T_UINT32_WRITE {
    pub v: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T_UINT32_WRITE"][::core::mem::size_of::<T_UINT32_WRITE>() - 4usize];
    ["Alignment of T_UINT32_WRITE"][::core::mem::align_of::<T_UINT32_WRITE>() - 1usize];
    ["Offset of field: T_UINT32_WRITE::v"][::core::mem::offset_of!(T_UINT32_WRITE, v) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct T_UINT32_READ {
    pub v: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T_UINT32_READ"][::core::mem::size_of::<T_UINT32_READ>() - 4usize];
    ["Alignment of T_UINT32_READ"][::core::mem::align_of::<T_UINT32_READ>() - 1usize];
    ["Offset of field: T_UINT32_READ::v"][::core::mem::offset_of!(T_UINT32_READ, v) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union APSR_Type {
    pub b: APSR_Type__bindgen_ty_1,
    pub w: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct APSR_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of APSR_Type__bindgen_ty_1"][::core::mem::size_of::<APSR_Type__bindgen_ty_1>() - 4usize];
    ["Alignment of APSR_Type__bindgen_ty_1"]
        [::core::mem::align_of::<APSR_Type__bindgen_ty_1>() - 4usize];
};
impl APSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _reserved0_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                28u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__reserved0_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                28u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn V(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_V(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn V_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_V_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn C(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_C(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn C_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                29usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_C_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                29usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Z(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Z(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Z_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                30usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Z_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                30usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn N(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_N(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn N_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                31usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_N_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                31usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        _reserved0: u32,
        V: u32,
        C: u32,
        Z: u32,
        N: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 28u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let V: u32 = unsafe { ::core::mem::transmute(V) };
            V as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let C: u32 = unsafe { ::core::mem::transmute(C) };
            C as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let Z: u32 = unsafe { ::core::mem::transmute(Z) };
            Z as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let N: u32 = unsafe { ::core::mem::transmute(N) };
            N as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of APSR_Type"][::core::mem::size_of::<APSR_Type>() - 4usize];
    ["Alignment of APSR_Type"][::core::mem::align_of::<APSR_Type>() - 4usize];
    ["Offset of field: APSR_Type::b"][::core::mem::offset_of!(APSR_Type, b) - 0usize];
    ["Offset of field: APSR_Type::w"][::core::mem::offset_of!(APSR_Type, w) - 0usize];
};
impl Default for APSR_Type {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IPSR_Type {
    pub b: IPSR_Type__bindgen_ty_1,
    pub w: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IPSR_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IPSR_Type__bindgen_ty_1"][::core::mem::size_of::<IPSR_Type__bindgen_ty_1>() - 4usize];
    ["Alignment of IPSR_Type__bindgen_ty_1"]
        [::core::mem::align_of::<IPSR_Type__bindgen_ty_1>() - 4usize];
};
impl IPSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn ISR(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_ISR(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ISR_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                9u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ISR_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                9u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _reserved0_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                23u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__reserved0_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                23u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(ISR: u32, _reserved0: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let ISR: u32 = unsafe { ::core::mem::transmute(ISR) };
            ISR as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IPSR_Type"][::core::mem::size_of::<IPSR_Type>() - 4usize];
    ["Alignment of IPSR_Type"][::core::mem::align_of::<IPSR_Type>() - 4usize];
    ["Offset of field: IPSR_Type::b"][::core::mem::offset_of!(IPSR_Type, b) - 0usize];
    ["Offset of field: IPSR_Type::w"][::core::mem::offset_of!(IPSR_Type, w) - 0usize];
};
impl Default for IPSR_Type {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xPSR_Type {
    pub b: xPSR_Type__bindgen_ty_1,
    pub w: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct xPSR_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xPSR_Type__bindgen_ty_1"][::core::mem::size_of::<xPSR_Type__bindgen_ty_1>() - 4usize];
    ["Alignment of xPSR_Type__bindgen_ty_1"]
        [::core::mem::align_of::<xPSR_Type__bindgen_ty_1>() - 4usize];
};
impl xPSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn ISR(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_ISR(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ISR_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                9u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ISR_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                9u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _reserved0_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                15u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__reserved0_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                15u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn T(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_T(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn T_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_T_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn _reserved1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set__reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _reserved1_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                25usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__reserved1_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                25usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn V(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_V(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn V_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_V_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn C(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_C(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn C_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                29usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_C_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                29usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Z(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Z(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Z_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                30usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Z_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                30usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn N(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_N(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn N_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                31usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_N_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                31usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ISR: u32,
        _reserved0: u32,
        T: u32,
        _reserved1: u32,
        V: u32,
        C: u32,
        Z: u32,
        N: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let ISR: u32 = unsafe { ::core::mem::transmute(ISR) };
            ISR as u64
        });
        __bindgen_bitfield_unit.set(9usize, 15u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let T: u32 = unsafe { ::core::mem::transmute(T) };
            T as u64
        });
        __bindgen_bitfield_unit.set(25usize, 3u8, {
            let _reserved1: u32 = unsafe { ::core::mem::transmute(_reserved1) };
            _reserved1 as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let V: u32 = unsafe { ::core::mem::transmute(V) };
            V as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let C: u32 = unsafe { ::core::mem::transmute(C) };
            C as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let Z: u32 = unsafe { ::core::mem::transmute(Z) };
            Z as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let N: u32 = unsafe { ::core::mem::transmute(N) };
            N as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xPSR_Type"][::core::mem::size_of::<xPSR_Type>() - 4usize];
    ["Alignment of xPSR_Type"][::core::mem::align_of::<xPSR_Type>() - 4usize];
    ["Offset of field: xPSR_Type::b"][::core::mem::offset_of!(xPSR_Type, b) - 0usize];
    ["Offset of field: xPSR_Type::w"][::core::mem::offset_of!(xPSR_Type, w) - 0usize];
};
impl Default for xPSR_Type {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CONTROL_Type {
    pub b: CONTROL_Type__bindgen_ty_1,
    pub w: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CONTROL_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CONTROL_Type__bindgen_ty_1"]
        [::core::mem::size_of::<CONTROL_Type__bindgen_ty_1>() - 4usize];
    ["Alignment of CONTROL_Type__bindgen_ty_1"]
        [::core::mem::align_of::<CONTROL_Type__bindgen_ty_1>() - 4usize];
};
impl CONTROL_Type__bindgen_ty_1 {
    #[inline]
    pub fn nPRIV(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nPRIV(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn nPRIV_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_nPRIV_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SPSEL(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_SPSEL(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SPSEL_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SPSEL_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn _reserved1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set__reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _reserved1_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__reserved1_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        nPRIV: u32,
        SPSEL: u32,
        _reserved1: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let nPRIV: u32 = unsafe { ::core::mem::transmute(nPRIV) };
            nPRIV as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let SPSEL: u32 = unsafe { ::core::mem::transmute(SPSEL) };
            SPSEL as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let _reserved1: u32 = unsafe { ::core::mem::transmute(_reserved1) };
            _reserved1 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CONTROL_Type"][::core::mem::size_of::<CONTROL_Type>() - 4usize];
    ["Alignment of CONTROL_Type"][::core::mem::align_of::<CONTROL_Type>() - 4usize];
    ["Offset of field: CONTROL_Type::b"][::core::mem::offset_of!(CONTROL_Type, b) - 0usize];
    ["Offset of field: CONTROL_Type::w"][::core::mem::offset_of!(CONTROL_Type, w) - 0usize];
};
impl Default for CONTROL_Type {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVIC_Type {
    pub ISER: [u32; 1usize],
    pub RESERVED0: [u32; 31usize],
    pub ICER: [u32; 1usize],
    pub RSERVED1: [u32; 31usize],
    pub ISPR: [u32; 1usize],
    pub RESERVED2: [u32; 31usize],
    pub ICPR: [u32; 1usize],
    pub RESERVED3: [u32; 31usize],
    pub RESERVED4: [u32; 64usize],
    pub IP: [u32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NVIC_Type"][::core::mem::size_of::<NVIC_Type>() - 800usize];
    ["Alignment of NVIC_Type"][::core::mem::align_of::<NVIC_Type>() - 4usize];
    ["Offset of field: NVIC_Type::ISER"][::core::mem::offset_of!(NVIC_Type, ISER) - 0usize];
    ["Offset of field: NVIC_Type::RESERVED0"]
        [::core::mem::offset_of!(NVIC_Type, RESERVED0) - 4usize];
    ["Offset of field: NVIC_Type::ICER"][::core::mem::offset_of!(NVIC_Type, ICER) - 128usize];
    ["Offset of field: NVIC_Type::RSERVED1"]
        [::core::mem::offset_of!(NVIC_Type, RSERVED1) - 132usize];
    ["Offset of field: NVIC_Type::ISPR"][::core::mem::offset_of!(NVIC_Type, ISPR) - 256usize];
    ["Offset of field: NVIC_Type::RESERVED2"]
        [::core::mem::offset_of!(NVIC_Type, RESERVED2) - 260usize];
    ["Offset of field: NVIC_Type::ICPR"][::core::mem::offset_of!(NVIC_Type, ICPR) - 384usize];
    ["Offset of field: NVIC_Type::RESERVED3"]
        [::core::mem::offset_of!(NVIC_Type, RESERVED3) - 388usize];
    ["Offset of field: NVIC_Type::RESERVED4"]
        [::core::mem::offset_of!(NVIC_Type, RESERVED4) - 512usize];
    ["Offset of field: NVIC_Type::IP"][::core::mem::offset_of!(NVIC_Type, IP) - 768usize];
};
impl Default for NVIC_Type {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SCB_Type {
    pub CPUID: u32,
    pub ICSR: u32,
    pub VTOR: u32,
    pub AIRCR: u32,
    pub SCR: u32,
    pub CCR: u32,
    pub RESERVED1: u32,
    pub SHP: [u32; 2usize],
    pub SHCSR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SCB_Type"][::core::mem::size_of::<SCB_Type>() - 40usize];
    ["Alignment of SCB_Type"][::core::mem::align_of::<SCB_Type>() - 4usize];
    ["Offset of field: SCB_Type::CPUID"][::core::mem::offset_of!(SCB_Type, CPUID) - 0usize];
    ["Offset of field: SCB_Type::ICSR"][::core::mem::offset_of!(SCB_Type, ICSR) - 4usize];
    ["Offset of field: SCB_Type::VTOR"][::core::mem::offset_of!(SCB_Type, VTOR) - 8usize];
    ["Offset of field: SCB_Type::AIRCR"][::core::mem::offset_of!(SCB_Type, AIRCR) - 12usize];
    ["Offset of field: SCB_Type::SCR"][::core::mem::offset_of!(SCB_Type, SCR) - 16usize];
    ["Offset of field: SCB_Type::CCR"][::core::mem::offset_of!(SCB_Type, CCR) - 20usize];
    ["Offset of field: SCB_Type::RESERVED1"]
        [::core::mem::offset_of!(SCB_Type, RESERVED1) - 24usize];
    ["Offset of field: SCB_Type::SHP"][::core::mem::offset_of!(SCB_Type, SHP) - 28usize];
    ["Offset of field: SCB_Type::SHCSR"][::core::mem::offset_of!(SCB_Type, SHCSR) - 36usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SysTick_Type {
    pub CTRL: u32,
    pub LOAD: u32,
    pub VAL: u32,
    pub CALIB: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SysTick_Type"][::core::mem::size_of::<SysTick_Type>() - 16usize];
    ["Alignment of SysTick_Type"][::core::mem::align_of::<SysTick_Type>() - 4usize];
    ["Offset of field: SysTick_Type::CTRL"][::core::mem::offset_of!(SysTick_Type, CTRL) - 0usize];
    ["Offset of field: SysTick_Type::LOAD"][::core::mem::offset_of!(SysTick_Type, LOAD) - 4usize];
    ["Offset of field: SysTick_Type::VAL"][::core::mem::offset_of!(SysTick_Type, VAL) - 8usize];
    ["Offset of field: SysTick_Type::CALIB"]
        [::core::mem::offset_of!(SysTick_Type, CALIB) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MPU_Type {
    pub TYPE: u32,
    pub CTRL: u32,
    pub RNR: u32,
    pub RBAR: u32,
    pub RASR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MPU_Type"][::core::mem::size_of::<MPU_Type>() - 20usize];
    ["Alignment of MPU_Type"][::core::mem::align_of::<MPU_Type>() - 4usize];
    ["Offset of field: MPU_Type::TYPE"][::core::mem::offset_of!(MPU_Type, TYPE) - 0usize];
    ["Offset of field: MPU_Type::CTRL"][::core::mem::offset_of!(MPU_Type, CTRL) - 4usize];
    ["Offset of field: MPU_Type::RNR"][::core::mem::offset_of!(MPU_Type, RNR) - 8usize];
    ["Offset of field: MPU_Type::RBAR"][::core::mem::offset_of!(MPU_Type, RBAR) - 12usize];
    ["Offset of field: MPU_Type::RASR"][::core::mem::offset_of!(MPU_Type, RASR) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ARM_MPU_Region_t {
    pub RBAR: u32,
    pub RASR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ARM_MPU_Region_t"][::core::mem::size_of::<ARM_MPU_Region_t>() - 8usize];
    ["Alignment of ARM_MPU_Region_t"][::core::mem::align_of::<ARM_MPU_Region_t>() - 4usize];
    ["Offset of field: ARM_MPU_Region_t::RBAR"]
        [::core::mem::offset_of!(ARM_MPU_Region_t, RBAR) - 0usize];
    ["Offset of field: ARM_MPU_Region_t::RASR"]
        [::core::mem::offset_of!(ARM_MPU_Region_t, RASR) - 4usize];
};
unsafe extern "C" {
    #[doc = "< System Clock Frequency (Core Clock)"]
    pub static mut SystemCoreClock: u32;
}
unsafe extern "C" {
    #[doc = "< AHB prescalers table values"]
    pub static AHBPrescTable: [u8; 16usize];
}
unsafe extern "C" {
    #[doc = "< APB prescalers table values"]
    pub static APBPrescTable: [u8; 8usize];
}
unsafe extern "C" {
    #[doc = "< PLL multipiers table values"]
    pub static PLLMulTable: [u8; 9usize];
}
unsafe extern "C" {
    #[doc = " @addtogroup STM32L0xx_System_Exported_Functions\n @{"]
    pub fn SystemInit();
}
unsafe extern "C" {
    pub fn SystemCoreClockUpdate();
}
#[doc = " @brief Analog to Digital Converter"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ADC_TypeDef {
    #[doc = "< ADC Interrupt and Status register,                          Address offset:0x00"]
    pub ISR: u32,
    #[doc = "< ADC Interrupt Enable register,                              Address offset:0x04"]
    pub IER: u32,
    #[doc = "< ADC Control register,                                       Address offset:0x08"]
    pub CR: u32,
    #[doc = "< ADC Configuration register 1,                               Address offset:0x0C"]
    pub CFGR1: u32,
    #[doc = "< ADC Configuration register 2,                               Address offset:0x10"]
    pub CFGR2: u32,
    #[doc = "< ADC Sampling time register,                                 Address offset:0x14"]
    pub SMPR: u32,
    #[doc = "< Reserved,                                                                  0x18"]
    pub RESERVED1: u32,
    #[doc = "< Reserved,                                                                  0x1C"]
    pub RESERVED2: u32,
    #[doc = "< ADC watchdog threshold register,                            Address offset:0x20"]
    pub TR: u32,
    #[doc = "< Reserved,                                                                  0x24"]
    pub RESERVED3: u32,
    #[doc = "< ADC channel selection register,                             Address offset:0x28"]
    pub CHSELR: u32,
    #[doc = "< Reserved,                                                                  0x2C"]
    pub RESERVED4: [u32; 5usize],
    #[doc = "< ADC data register,                                          Address offset:0x40"]
    pub DR: u32,
    #[doc = "< Reserved,                                                           0x44 - 0xB0"]
    pub RESERVED5: [u32; 28usize],
    #[doc = "< ADC data register,                                          Address offset:0xB4"]
    pub CALFACT: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ADC_TypeDef"][::core::mem::size_of::<ADC_TypeDef>() - 184usize];
    ["Alignment of ADC_TypeDef"][::core::mem::align_of::<ADC_TypeDef>() - 4usize];
    ["Offset of field: ADC_TypeDef::ISR"][::core::mem::offset_of!(ADC_TypeDef, ISR) - 0usize];
    ["Offset of field: ADC_TypeDef::IER"][::core::mem::offset_of!(ADC_TypeDef, IER) - 4usize];
    ["Offset of field: ADC_TypeDef::CR"][::core::mem::offset_of!(ADC_TypeDef, CR) - 8usize];
    ["Offset of field: ADC_TypeDef::CFGR1"][::core::mem::offset_of!(ADC_TypeDef, CFGR1) - 12usize];
    ["Offset of field: ADC_TypeDef::CFGR2"][::core::mem::offset_of!(ADC_TypeDef, CFGR2) - 16usize];
    ["Offset of field: ADC_TypeDef::SMPR"][::core::mem::offset_of!(ADC_TypeDef, SMPR) - 20usize];
    ["Offset of field: ADC_TypeDef::RESERVED1"]
        [::core::mem::offset_of!(ADC_TypeDef, RESERVED1) - 24usize];
    ["Offset of field: ADC_TypeDef::RESERVED2"]
        [::core::mem::offset_of!(ADC_TypeDef, RESERVED2) - 28usize];
    ["Offset of field: ADC_TypeDef::TR"][::core::mem::offset_of!(ADC_TypeDef, TR) - 32usize];
    ["Offset of field: ADC_TypeDef::RESERVED3"]
        [::core::mem::offset_of!(ADC_TypeDef, RESERVED3) - 36usize];
    ["Offset of field: ADC_TypeDef::CHSELR"]
        [::core::mem::offset_of!(ADC_TypeDef, CHSELR) - 40usize];
    ["Offset of field: ADC_TypeDef::RESERVED4"]
        [::core::mem::offset_of!(ADC_TypeDef, RESERVED4) - 44usize];
    ["Offset of field: ADC_TypeDef::DR"][::core::mem::offset_of!(ADC_TypeDef, DR) - 64usize];
    ["Offset of field: ADC_TypeDef::RESERVED5"]
        [::core::mem::offset_of!(ADC_TypeDef, RESERVED5) - 68usize];
    ["Offset of field: ADC_TypeDef::CALFACT"]
        [::core::mem::offset_of!(ADC_TypeDef, CALFACT) - 180usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ADC_Common_TypeDef {
    pub CCR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ADC_Common_TypeDef"][::core::mem::size_of::<ADC_Common_TypeDef>() - 4usize];
    ["Alignment of ADC_Common_TypeDef"][::core::mem::align_of::<ADC_Common_TypeDef>() - 4usize];
    ["Offset of field: ADC_Common_TypeDef::CCR"]
        [::core::mem::offset_of!(ADC_Common_TypeDef, CCR) - 0usize];
};
#[doc = " @brief Comparator"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct COMP_TypeDef {
    #[doc = "< COMP comparator control and status register, Address offset: 0x18"]
    pub CSR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of COMP_TypeDef"][::core::mem::size_of::<COMP_TypeDef>() - 4usize];
    ["Alignment of COMP_TypeDef"][::core::mem::align_of::<COMP_TypeDef>() - 4usize];
    ["Offset of field: COMP_TypeDef::CSR"][::core::mem::offset_of!(COMP_TypeDef, CSR) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct COMP_Common_TypeDef {
    #[doc = "< COMP control and status register, used for bits common to several COMP instances, Address offset: 0x00"]
    pub CSR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of COMP_Common_TypeDef"][::core::mem::size_of::<COMP_Common_TypeDef>() - 4usize];
    ["Alignment of COMP_Common_TypeDef"][::core::mem::align_of::<COMP_Common_TypeDef>() - 4usize];
    ["Offset of field: COMP_Common_TypeDef::CSR"]
        [::core::mem::offset_of!(COMP_Common_TypeDef, CSR) - 0usize];
};
#[doc = " @brief CRC calculation unit"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CRC_TypeDef {
    #[doc = "< CRC Data register,                            Address offset: 0x00"]
    pub DR: u32,
    #[doc = "< CRC Independent data register,                Address offset: 0x04"]
    pub IDR: u8,
    #[doc = "< Reserved,                                                     0x05"]
    pub RESERVED0: u8,
    #[doc = "< Reserved,                                                     0x06"]
    pub RESERVED1: u16,
    #[doc = "< CRC Control register,                         Address offset: 0x08"]
    pub CR: u32,
    #[doc = "< Reserved,                                                     0x0C"]
    pub RESERVED2: u32,
    #[doc = "< Initial CRC value register,                   Address offset: 0x10"]
    pub INIT: u32,
    #[doc = "< CRC polynomial register,                      Address offset: 0x14"]
    pub POL: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CRC_TypeDef"][::core::mem::size_of::<CRC_TypeDef>() - 24usize];
    ["Alignment of CRC_TypeDef"][::core::mem::align_of::<CRC_TypeDef>() - 4usize];
    ["Offset of field: CRC_TypeDef::DR"][::core::mem::offset_of!(CRC_TypeDef, DR) - 0usize];
    ["Offset of field: CRC_TypeDef::IDR"][::core::mem::offset_of!(CRC_TypeDef, IDR) - 4usize];
    ["Offset of field: CRC_TypeDef::RESERVED0"]
        [::core::mem::offset_of!(CRC_TypeDef, RESERVED0) - 5usize];
    ["Offset of field: CRC_TypeDef::RESERVED1"]
        [::core::mem::offset_of!(CRC_TypeDef, RESERVED1) - 6usize];
    ["Offset of field: CRC_TypeDef::CR"][::core::mem::offset_of!(CRC_TypeDef, CR) - 8usize];
    ["Offset of field: CRC_TypeDef::RESERVED2"]
        [::core::mem::offset_of!(CRC_TypeDef, RESERVED2) - 12usize];
    ["Offset of field: CRC_TypeDef::INIT"][::core::mem::offset_of!(CRC_TypeDef, INIT) - 16usize];
    ["Offset of field: CRC_TypeDef::POL"][::core::mem::offset_of!(CRC_TypeDef, POL) - 20usize];
};
#[doc = " @brief Clock Recovery System"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CRS_TypeDef {
    #[doc = "< CRS ccontrol register,              Address offset: 0x00"]
    pub CR: u32,
    #[doc = "< CRS configuration register,         Address offset: 0x04"]
    pub CFGR: u32,
    #[doc = "< CRS interrupt and status register,  Address offset: 0x08"]
    pub ISR: u32,
    #[doc = "< CRS interrupt flag clear register,  Address offset: 0x0C"]
    pub ICR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CRS_TypeDef"][::core::mem::size_of::<CRS_TypeDef>() - 16usize];
    ["Alignment of CRS_TypeDef"][::core::mem::align_of::<CRS_TypeDef>() - 4usize];
    ["Offset of field: CRS_TypeDef::CR"][::core::mem::offset_of!(CRS_TypeDef, CR) - 0usize];
    ["Offset of field: CRS_TypeDef::CFGR"][::core::mem::offset_of!(CRS_TypeDef, CFGR) - 4usize];
    ["Offset of field: CRS_TypeDef::ISR"][::core::mem::offset_of!(CRS_TypeDef, ISR) - 8usize];
    ["Offset of field: CRS_TypeDef::ICR"][::core::mem::offset_of!(CRS_TypeDef, ICR) - 12usize];
};
#[doc = " @brief Digital to Analog Converter"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct DAC_TypeDef {
    #[doc = "< DAC control register,                                    Address offset: 0x00"]
    pub CR: u32,
    #[doc = "< DAC software trigger register,                           Address offset: 0x04"]
    pub SWTRIGR: u32,
    #[doc = "< DAC channel1 12-bit right-aligned data holding register, Address offset: 0x08"]
    pub DHR12R1: u32,
    #[doc = "< DAC channel1 12-bit left aligned data holding register,  Address offset: 0x0C"]
    pub DHR12L1: u32,
    #[doc = "< DAC channel1 8-bit right aligned data holding register,  Address offset: 0x10"]
    pub DHR8R1: u32,
    #[doc = "< DAC channel2 12-bit right aligned data holding register, Address offset: 0x14"]
    pub DHR12R2: u32,
    #[doc = "< DAC channel2 12-bit left aligned data holding register,  Address offset: 0x18"]
    pub DHR12L2: u32,
    #[doc = "< DAC channel2 8-bit right-aligned data holding register,  Address offset: 0x1C"]
    pub DHR8R2: u32,
    #[doc = "< Dual DAC 12-bit right-aligned data holding register,     Address offset: 0x20"]
    pub DHR12RD: u32,
    #[doc = "< DUAL DAC 12-bit left aligned data holding register,      Address offset: 0x24"]
    pub DHR12LD: u32,
    #[doc = "< DUAL DAC 8-bit right aligned data holding register,      Address offset: 0x28"]
    pub DHR8RD: u32,
    #[doc = "< DAC channel1 data output register,                       Address offset: 0x2C"]
    pub DOR1: u32,
    #[doc = "< DAC channel2 data output register,                       Address offset: 0x30"]
    pub DOR2: u32,
    #[doc = "< DAC status register,                                     Address offset: 0x34"]
    pub SR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DAC_TypeDef"][::core::mem::size_of::<DAC_TypeDef>() - 56usize];
    ["Alignment of DAC_TypeDef"][::core::mem::align_of::<DAC_TypeDef>() - 4usize];
    ["Offset of field: DAC_TypeDef::CR"][::core::mem::offset_of!(DAC_TypeDef, CR) - 0usize];
    ["Offset of field: DAC_TypeDef::SWTRIGR"]
        [::core::mem::offset_of!(DAC_TypeDef, SWTRIGR) - 4usize];
    ["Offset of field: DAC_TypeDef::DHR12R1"]
        [::core::mem::offset_of!(DAC_TypeDef, DHR12R1) - 8usize];
    ["Offset of field: DAC_TypeDef::DHR12L1"]
        [::core::mem::offset_of!(DAC_TypeDef, DHR12L1) - 12usize];
    ["Offset of field: DAC_TypeDef::DHR8R1"]
        [::core::mem::offset_of!(DAC_TypeDef, DHR8R1) - 16usize];
    ["Offset of field: DAC_TypeDef::DHR12R2"]
        [::core::mem::offset_of!(DAC_TypeDef, DHR12R2) - 20usize];
    ["Offset of field: DAC_TypeDef::DHR12L2"]
        [::core::mem::offset_of!(DAC_TypeDef, DHR12L2) - 24usize];
    ["Offset of field: DAC_TypeDef::DHR8R2"]
        [::core::mem::offset_of!(DAC_TypeDef, DHR8R2) - 28usize];
    ["Offset of field: DAC_TypeDef::DHR12RD"]
        [::core::mem::offset_of!(DAC_TypeDef, DHR12RD) - 32usize];
    ["Offset of field: DAC_TypeDef::DHR12LD"]
        [::core::mem::offset_of!(DAC_TypeDef, DHR12LD) - 36usize];
    ["Offset of field: DAC_TypeDef::DHR8RD"]
        [::core::mem::offset_of!(DAC_TypeDef, DHR8RD) - 40usize];
    ["Offset of field: DAC_TypeDef::DOR1"][::core::mem::offset_of!(DAC_TypeDef, DOR1) - 44usize];
    ["Offset of field: DAC_TypeDef::DOR2"][::core::mem::offset_of!(DAC_TypeDef, DOR2) - 48usize];
    ["Offset of field: DAC_TypeDef::SR"][::core::mem::offset_of!(DAC_TypeDef, SR) - 52usize];
};
#[doc = " @brief Debug MCU"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct DBGMCU_TypeDef {
    #[doc = "< MCU device ID code,                          Address offset: 0x00"]
    pub IDCODE: u32,
    #[doc = "< Debug MCU configuration register,            Address offset: 0x04"]
    pub CR: u32,
    #[doc = "< Debug MCU APB1 freeze register,              Address offset: 0x08"]
    pub APB1FZ: u32,
    #[doc = "< Debug MCU APB2 freeze register,              Address offset: 0x0C"]
    pub APB2FZ: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DBGMCU_TypeDef"][::core::mem::size_of::<DBGMCU_TypeDef>() - 16usize];
    ["Alignment of DBGMCU_TypeDef"][::core::mem::align_of::<DBGMCU_TypeDef>() - 4usize];
    ["Offset of field: DBGMCU_TypeDef::IDCODE"]
        [::core::mem::offset_of!(DBGMCU_TypeDef, IDCODE) - 0usize];
    ["Offset of field: DBGMCU_TypeDef::CR"][::core::mem::offset_of!(DBGMCU_TypeDef, CR) - 4usize];
    ["Offset of field: DBGMCU_TypeDef::APB1FZ"]
        [::core::mem::offset_of!(DBGMCU_TypeDef, APB1FZ) - 8usize];
    ["Offset of field: DBGMCU_TypeDef::APB2FZ"]
        [::core::mem::offset_of!(DBGMCU_TypeDef, APB2FZ) - 12usize];
};
#[doc = " @brief DMA Controller"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct DMA_Channel_TypeDef {
    #[doc = "< DMA channel x configuration register"]
    pub CCR: u32,
    #[doc = "< DMA channel x number of data register"]
    pub CNDTR: u32,
    #[doc = "< DMA channel x peripheral address register"]
    pub CPAR: u32,
    #[doc = "< DMA channel x memory address register"]
    pub CMAR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DMA_Channel_TypeDef"][::core::mem::size_of::<DMA_Channel_TypeDef>() - 16usize];
    ["Alignment of DMA_Channel_TypeDef"][::core::mem::align_of::<DMA_Channel_TypeDef>() - 4usize];
    ["Offset of field: DMA_Channel_TypeDef::CCR"]
        [::core::mem::offset_of!(DMA_Channel_TypeDef, CCR) - 0usize];
    ["Offset of field: DMA_Channel_TypeDef::CNDTR"]
        [::core::mem::offset_of!(DMA_Channel_TypeDef, CNDTR) - 4usize];
    ["Offset of field: DMA_Channel_TypeDef::CPAR"]
        [::core::mem::offset_of!(DMA_Channel_TypeDef, CPAR) - 8usize];
    ["Offset of field: DMA_Channel_TypeDef::CMAR"]
        [::core::mem::offset_of!(DMA_Channel_TypeDef, CMAR) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct DMA_TypeDef {
    #[doc = "< DMA interrupt status register,               Address offset: 0x00"]
    pub ISR: u32,
    #[doc = "< DMA interrupt flag clear register,           Address offset: 0x04"]
    pub IFCR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DMA_TypeDef"][::core::mem::size_of::<DMA_TypeDef>() - 8usize];
    ["Alignment of DMA_TypeDef"][::core::mem::align_of::<DMA_TypeDef>() - 4usize];
    ["Offset of field: DMA_TypeDef::ISR"][::core::mem::offset_of!(DMA_TypeDef, ISR) - 0usize];
    ["Offset of field: DMA_TypeDef::IFCR"][::core::mem::offset_of!(DMA_TypeDef, IFCR) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct DMA_Request_TypeDef {
    #[doc = "< DMA channel selection register,              Address offset: 0xA8"]
    pub CSELR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DMA_Request_TypeDef"][::core::mem::size_of::<DMA_Request_TypeDef>() - 4usize];
    ["Alignment of DMA_Request_TypeDef"][::core::mem::align_of::<DMA_Request_TypeDef>() - 4usize];
    ["Offset of field: DMA_Request_TypeDef::CSELR"]
        [::core::mem::offset_of!(DMA_Request_TypeDef, CSELR) - 0usize];
};
#[doc = " @brief External Interrupt/Event Controller"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct EXTI_TypeDef {
    #[doc = "<EXTI Interrupt mask register,                 Address offset: 0x00"]
    pub IMR: u32,
    #[doc = "<EXTI Event mask register,                     Address offset: 0x04"]
    pub EMR: u32,
    #[doc = "<EXTI Rising trigger selection register ,      Address offset: 0x08"]
    pub RTSR: u32,
    #[doc = "<EXTI Falling trigger selection register,      Address offset: 0x0C"]
    pub FTSR: u32,
    #[doc = "<EXTI Software interrupt event register,       Address offset: 0x10"]
    pub SWIER: u32,
    #[doc = "<EXTI Pending register,                        Address offset: 0x14"]
    pub PR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EXTI_TypeDef"][::core::mem::size_of::<EXTI_TypeDef>() - 24usize];
    ["Alignment of EXTI_TypeDef"][::core::mem::align_of::<EXTI_TypeDef>() - 4usize];
    ["Offset of field: EXTI_TypeDef::IMR"][::core::mem::offset_of!(EXTI_TypeDef, IMR) - 0usize];
    ["Offset of field: EXTI_TypeDef::EMR"][::core::mem::offset_of!(EXTI_TypeDef, EMR) - 4usize];
    ["Offset of field: EXTI_TypeDef::RTSR"][::core::mem::offset_of!(EXTI_TypeDef, RTSR) - 8usize];
    ["Offset of field: EXTI_TypeDef::FTSR"][::core::mem::offset_of!(EXTI_TypeDef, FTSR) - 12usize];
    ["Offset of field: EXTI_TypeDef::SWIER"]
        [::core::mem::offset_of!(EXTI_TypeDef, SWIER) - 16usize];
    ["Offset of field: EXTI_TypeDef::PR"][::core::mem::offset_of!(EXTI_TypeDef, PR) - 20usize];
};
#[doc = " @brief FLASH Registers"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FLASH_TypeDef {
    #[doc = "< Access control register,                     Address offset: 0x00"]
    pub ACR: u32,
    #[doc = "< Program/erase control register,              Address offset: 0x04"]
    pub PECR: u32,
    #[doc = "< Power down key register,                     Address offset: 0x08"]
    pub PDKEYR: u32,
    #[doc = "< Program/erase key register,                  Address offset: 0x0c"]
    pub PEKEYR: u32,
    #[doc = "< Program memory key register,                 Address offset: 0x10"]
    pub PRGKEYR: u32,
    #[doc = "< Option byte key register,                    Address offset: 0x14"]
    pub OPTKEYR: u32,
    #[doc = "< Status register,                             Address offset: 0x18"]
    pub SR: u32,
    #[doc = "< Option byte register,                        Address offset: 0x1c"]
    pub OPTR: u32,
    #[doc = "< Write protection register,                   Address offset: 0x20"]
    pub WRPR: u32,
    #[doc = "< Reserved1,                                   Address offset: 0x24"]
    pub RESERVED1: [u32; 23usize],
    #[doc = "< Write protection register 2,                 Address offset: 0x80"]
    pub WRPR2: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FLASH_TypeDef"][::core::mem::size_of::<FLASH_TypeDef>() - 132usize];
    ["Alignment of FLASH_TypeDef"][::core::mem::align_of::<FLASH_TypeDef>() - 4usize];
    ["Offset of field: FLASH_TypeDef::ACR"][::core::mem::offset_of!(FLASH_TypeDef, ACR) - 0usize];
    ["Offset of field: FLASH_TypeDef::PECR"][::core::mem::offset_of!(FLASH_TypeDef, PECR) - 4usize];
    ["Offset of field: FLASH_TypeDef::PDKEYR"]
        [::core::mem::offset_of!(FLASH_TypeDef, PDKEYR) - 8usize];
    ["Offset of field: FLASH_TypeDef::PEKEYR"]
        [::core::mem::offset_of!(FLASH_TypeDef, PEKEYR) - 12usize];
    ["Offset of field: FLASH_TypeDef::PRGKEYR"]
        [::core::mem::offset_of!(FLASH_TypeDef, PRGKEYR) - 16usize];
    ["Offset of field: FLASH_TypeDef::OPTKEYR"]
        [::core::mem::offset_of!(FLASH_TypeDef, OPTKEYR) - 20usize];
    ["Offset of field: FLASH_TypeDef::SR"][::core::mem::offset_of!(FLASH_TypeDef, SR) - 24usize];
    ["Offset of field: FLASH_TypeDef::OPTR"]
        [::core::mem::offset_of!(FLASH_TypeDef, OPTR) - 28usize];
    ["Offset of field: FLASH_TypeDef::WRPR"]
        [::core::mem::offset_of!(FLASH_TypeDef, WRPR) - 32usize];
    ["Offset of field: FLASH_TypeDef::RESERVED1"]
        [::core::mem::offset_of!(FLASH_TypeDef, RESERVED1) - 36usize];
    ["Offset of field: FLASH_TypeDef::WRPR2"]
        [::core::mem::offset_of!(FLASH_TypeDef, WRPR2) - 128usize];
};
#[doc = " @brief Option Bytes Registers"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct OB_TypeDef {
    #[doc = "< Read protection register,               Address offset: 0x00"]
    pub RDP: u32,
    #[doc = "< user register,                          Address offset: 0x04"]
    pub USER: u32,
    #[doc = "< write protection Bytes 0 and 1          Address offset: 0x08"]
    pub WRP01: u32,
    #[doc = "< write protection Bytes 2 and 3          Address offset: 0x0C"]
    pub WRP23: u32,
    #[doc = "< write protection Bytes 4 and 5          Address offset: 0x10"]
    pub WRP45: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OB_TypeDef"][::core::mem::size_of::<OB_TypeDef>() - 20usize];
    ["Alignment of OB_TypeDef"][::core::mem::align_of::<OB_TypeDef>() - 4usize];
    ["Offset of field: OB_TypeDef::RDP"][::core::mem::offset_of!(OB_TypeDef, RDP) - 0usize];
    ["Offset of field: OB_TypeDef::USER"][::core::mem::offset_of!(OB_TypeDef, USER) - 4usize];
    ["Offset of field: OB_TypeDef::WRP01"][::core::mem::offset_of!(OB_TypeDef, WRP01) - 8usize];
    ["Offset of field: OB_TypeDef::WRP23"][::core::mem::offset_of!(OB_TypeDef, WRP23) - 12usize];
    ["Offset of field: OB_TypeDef::WRP45"][::core::mem::offset_of!(OB_TypeDef, WRP45) - 16usize];
};
#[doc = " @brief General Purpose IO"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GPIO_TypeDef {
    #[doc = "< GPIO port mode register,                     Address offset: 0x00"]
    pub MODER: u32,
    #[doc = "< GPIO port output type register,              Address offset: 0x04"]
    pub OTYPER: u32,
    #[doc = "< GPIO port output speed register,             Address offset: 0x08"]
    pub OSPEEDR: u32,
    #[doc = "< GPIO port pull-up/pull-down register,        Address offset: 0x0C"]
    pub PUPDR: u32,
    #[doc = "< GPIO port input data register,               Address offset: 0x10"]
    pub IDR: u32,
    #[doc = "< GPIO port output data register,              Address offset: 0x14"]
    pub ODR: u32,
    #[doc = "< GPIO port bit set/reset registerBSRR,        Address offset: 0x18"]
    pub BSRR: u32,
    #[doc = "< GPIO port configuration lock register,       Address offset: 0x1C"]
    pub LCKR: u32,
    #[doc = "< GPIO alternate function register,            Address offset: 0x20-0x24"]
    pub AFR: [u32; 2usize],
    #[doc = "< GPIO bit reset register,                     Address offset: 0x28"]
    pub BRR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GPIO_TypeDef"][::core::mem::size_of::<GPIO_TypeDef>() - 44usize];
    ["Alignment of GPIO_TypeDef"][::core::mem::align_of::<GPIO_TypeDef>() - 4usize];
    ["Offset of field: GPIO_TypeDef::MODER"][::core::mem::offset_of!(GPIO_TypeDef, MODER) - 0usize];
    ["Offset of field: GPIO_TypeDef::OTYPER"]
        [::core::mem::offset_of!(GPIO_TypeDef, OTYPER) - 4usize];
    ["Offset of field: GPIO_TypeDef::OSPEEDR"]
        [::core::mem::offset_of!(GPIO_TypeDef, OSPEEDR) - 8usize];
    ["Offset of field: GPIO_TypeDef::PUPDR"]
        [::core::mem::offset_of!(GPIO_TypeDef, PUPDR) - 12usize];
    ["Offset of field: GPIO_TypeDef::IDR"][::core::mem::offset_of!(GPIO_TypeDef, IDR) - 16usize];
    ["Offset of field: GPIO_TypeDef::ODR"][::core::mem::offset_of!(GPIO_TypeDef, ODR) - 20usize];
    ["Offset of field: GPIO_TypeDef::BSRR"][::core::mem::offset_of!(GPIO_TypeDef, BSRR) - 24usize];
    ["Offset of field: GPIO_TypeDef::LCKR"][::core::mem::offset_of!(GPIO_TypeDef, LCKR) - 28usize];
    ["Offset of field: GPIO_TypeDef::AFR"][::core::mem::offset_of!(GPIO_TypeDef, AFR) - 32usize];
    ["Offset of field: GPIO_TypeDef::BRR"][::core::mem::offset_of!(GPIO_TypeDef, BRR) - 40usize];
};
#[doc = " @brief LPTIMIMER"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct LPTIM_TypeDef {
    #[doc = "< LPTIM Interrupt and Status register,             Address offset: 0x00"]
    pub ISR: u32,
    #[doc = "< LPTIM Interrupt Clear register,                  Address offset: 0x04"]
    pub ICR: u32,
    #[doc = "< LPTIM Interrupt Enable register,                 Address offset: 0x08"]
    pub IER: u32,
    #[doc = "< LPTIM Configuration register,                    Address offset: 0x0C"]
    pub CFGR: u32,
    #[doc = "< LPTIM Control register,                          Address offset: 0x10"]
    pub CR: u32,
    #[doc = "< LPTIM Compare register,                          Address offset: 0x14"]
    pub CMP: u32,
    #[doc = "< LPTIM Autoreload register,                       Address offset: 0x18"]
    pub ARR: u32,
    #[doc = "< LPTIM Counter register,                          Address offset: 0x1C"]
    pub CNT: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LPTIM_TypeDef"][::core::mem::size_of::<LPTIM_TypeDef>() - 32usize];
    ["Alignment of LPTIM_TypeDef"][::core::mem::align_of::<LPTIM_TypeDef>() - 4usize];
    ["Offset of field: LPTIM_TypeDef::ISR"][::core::mem::offset_of!(LPTIM_TypeDef, ISR) - 0usize];
    ["Offset of field: LPTIM_TypeDef::ICR"][::core::mem::offset_of!(LPTIM_TypeDef, ICR) - 4usize];
    ["Offset of field: LPTIM_TypeDef::IER"][::core::mem::offset_of!(LPTIM_TypeDef, IER) - 8usize];
    ["Offset of field: LPTIM_TypeDef::CFGR"]
        [::core::mem::offset_of!(LPTIM_TypeDef, CFGR) - 12usize];
    ["Offset of field: LPTIM_TypeDef::CR"][::core::mem::offset_of!(LPTIM_TypeDef, CR) - 16usize];
    ["Offset of field: LPTIM_TypeDef::CMP"][::core::mem::offset_of!(LPTIM_TypeDef, CMP) - 20usize];
    ["Offset of field: LPTIM_TypeDef::ARR"][::core::mem::offset_of!(LPTIM_TypeDef, ARR) - 24usize];
    ["Offset of field: LPTIM_TypeDef::CNT"][::core::mem::offset_of!(LPTIM_TypeDef, CNT) - 28usize];
};
#[doc = " @brief SysTem Configuration"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SYSCFG_TypeDef {
    #[doc = "< SYSCFG configuration register 1,                    Address offset: 0x00"]
    pub CFGR1: u32,
    #[doc = "< SYSCFG configuration register 2,                    Address offset: 0x04"]
    pub CFGR2: u32,
    #[doc = "< SYSCFG external interrupt configuration register,   Address offset: 0x14-0x08"]
    pub EXTICR: [u32; 4usize],
    #[doc = "< Reserved,                                           0x18-0x1C"]
    pub RESERVED: [u32; 2usize],
    #[doc = "< SYSCFG configuration register 3,                    Address offset: 0x20"]
    pub CFGR3: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SYSCFG_TypeDef"][::core::mem::size_of::<SYSCFG_TypeDef>() - 36usize];
    ["Alignment of SYSCFG_TypeDef"][::core::mem::align_of::<SYSCFG_TypeDef>() - 4usize];
    ["Offset of field: SYSCFG_TypeDef::CFGR1"]
        [::core::mem::offset_of!(SYSCFG_TypeDef, CFGR1) - 0usize];
    ["Offset of field: SYSCFG_TypeDef::CFGR2"]
        [::core::mem::offset_of!(SYSCFG_TypeDef, CFGR2) - 4usize];
    ["Offset of field: SYSCFG_TypeDef::EXTICR"]
        [::core::mem::offset_of!(SYSCFG_TypeDef, EXTICR) - 8usize];
    ["Offset of field: SYSCFG_TypeDef::RESERVED"]
        [::core::mem::offset_of!(SYSCFG_TypeDef, RESERVED) - 24usize];
    ["Offset of field: SYSCFG_TypeDef::CFGR3"]
        [::core::mem::offset_of!(SYSCFG_TypeDef, CFGR3) - 32usize];
};
#[doc = " @brief Inter-integrated Circuit Interface"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct I2C_TypeDef {
    #[doc = "< I2C Control register 1,            Address offset: 0x00"]
    pub CR1: u32,
    #[doc = "< I2C Control register 2,            Address offset: 0x04"]
    pub CR2: u32,
    #[doc = "< I2C Own address 1 register,        Address offset: 0x08"]
    pub OAR1: u32,
    #[doc = "< I2C Own address 2 register,        Address offset: 0x0C"]
    pub OAR2: u32,
    #[doc = "< I2C Timing register,               Address offset: 0x10"]
    pub TIMINGR: u32,
    #[doc = "< I2C Timeout register,              Address offset: 0x14"]
    pub TIMEOUTR: u32,
    #[doc = "< I2C Interrupt and status register, Address offset: 0x18"]
    pub ISR: u32,
    #[doc = "< I2C Interrupt clear register,      Address offset: 0x1C"]
    pub ICR: u32,
    #[doc = "< I2C PEC register,                  Address offset: 0x20"]
    pub PECR: u32,
    #[doc = "< I2C Receive data register,         Address offset: 0x24"]
    pub RXDR: u32,
    #[doc = "< I2C Transmit data register,        Address offset: 0x28"]
    pub TXDR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of I2C_TypeDef"][::core::mem::size_of::<I2C_TypeDef>() - 44usize];
    ["Alignment of I2C_TypeDef"][::core::mem::align_of::<I2C_TypeDef>() - 4usize];
    ["Offset of field: I2C_TypeDef::CR1"][::core::mem::offset_of!(I2C_TypeDef, CR1) - 0usize];
    ["Offset of field: I2C_TypeDef::CR2"][::core::mem::offset_of!(I2C_TypeDef, CR2) - 4usize];
    ["Offset of field: I2C_TypeDef::OAR1"][::core::mem::offset_of!(I2C_TypeDef, OAR1) - 8usize];
    ["Offset of field: I2C_TypeDef::OAR2"][::core::mem::offset_of!(I2C_TypeDef, OAR2) - 12usize];
    ["Offset of field: I2C_TypeDef::TIMINGR"]
        [::core::mem::offset_of!(I2C_TypeDef, TIMINGR) - 16usize];
    ["Offset of field: I2C_TypeDef::TIMEOUTR"]
        [::core::mem::offset_of!(I2C_TypeDef, TIMEOUTR) - 20usize];
    ["Offset of field: I2C_TypeDef::ISR"][::core::mem::offset_of!(I2C_TypeDef, ISR) - 24usize];
    ["Offset of field: I2C_TypeDef::ICR"][::core::mem::offset_of!(I2C_TypeDef, ICR) - 28usize];
    ["Offset of field: I2C_TypeDef::PECR"][::core::mem::offset_of!(I2C_TypeDef, PECR) - 32usize];
    ["Offset of field: I2C_TypeDef::RXDR"][::core::mem::offset_of!(I2C_TypeDef, RXDR) - 36usize];
    ["Offset of field: I2C_TypeDef::TXDR"][::core::mem::offset_of!(I2C_TypeDef, TXDR) - 40usize];
};
#[doc = " @brief Independent WATCHDOG"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IWDG_TypeDef {
    #[doc = "< IWDG Key register,       Address offset: 0x00"]
    pub KR: u32,
    #[doc = "< IWDG Prescaler register, Address offset: 0x04"]
    pub PR: u32,
    #[doc = "< IWDG Reload register,    Address offset: 0x08"]
    pub RLR: u32,
    #[doc = "< IWDG Status register,    Address offset: 0x0C"]
    pub SR: u32,
    #[doc = "< IWDG Window register,    Address offset: 0x10"]
    pub WINR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IWDG_TypeDef"][::core::mem::size_of::<IWDG_TypeDef>() - 20usize];
    ["Alignment of IWDG_TypeDef"][::core::mem::align_of::<IWDG_TypeDef>() - 4usize];
    ["Offset of field: IWDG_TypeDef::KR"][::core::mem::offset_of!(IWDG_TypeDef, KR) - 0usize];
    ["Offset of field: IWDG_TypeDef::PR"][::core::mem::offset_of!(IWDG_TypeDef, PR) - 4usize];
    ["Offset of field: IWDG_TypeDef::RLR"][::core::mem::offset_of!(IWDG_TypeDef, RLR) - 8usize];
    ["Offset of field: IWDG_TypeDef::SR"][::core::mem::offset_of!(IWDG_TypeDef, SR) - 12usize];
    ["Offset of field: IWDG_TypeDef::WINR"][::core::mem::offset_of!(IWDG_TypeDef, WINR) - 16usize];
};
#[doc = " @brief MIFARE Firewall"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FIREWALL_TypeDef {
    #[doc = "< Code Segment Start Address register,               Address offset: 0x00"]
    pub CSSA: u32,
    #[doc = "< Code Segment Length register,                      Address offset: 0x04"]
    pub CSL: u32,
    #[doc = "< NON volatile data Segment Start Address register,  Address offset: 0x08"]
    pub NVDSSA: u32,
    #[doc = "< NON volatile data Segment Length register,         Address offset: 0x0C"]
    pub NVDSL: u32,
    #[doc = "< Volatile data Segment Start Address register,      Address offset: 0x10"]
    pub VDSSA: u32,
    #[doc = "< Volatile data Segment Length register,             Address offset: 0x14"]
    pub VDSL: u32,
    #[doc = "< Library Segment Start Address register,            Address offset: 0x18"]
    pub LSSA: u32,
    #[doc = "< Library Segment Length register,                   Address offset: 0x1C"]
    pub LSL: u32,
    #[doc = "< Configuration  register,                           Address offset: 0x20"]
    pub CR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FIREWALL_TypeDef"][::core::mem::size_of::<FIREWALL_TypeDef>() - 36usize];
    ["Alignment of FIREWALL_TypeDef"][::core::mem::align_of::<FIREWALL_TypeDef>() - 4usize];
    ["Offset of field: FIREWALL_TypeDef::CSSA"]
        [::core::mem::offset_of!(FIREWALL_TypeDef, CSSA) - 0usize];
    ["Offset of field: FIREWALL_TypeDef::CSL"]
        [::core::mem::offset_of!(FIREWALL_TypeDef, CSL) - 4usize];
    ["Offset of field: FIREWALL_TypeDef::NVDSSA"]
        [::core::mem::offset_of!(FIREWALL_TypeDef, NVDSSA) - 8usize];
    ["Offset of field: FIREWALL_TypeDef::NVDSL"]
        [::core::mem::offset_of!(FIREWALL_TypeDef, NVDSL) - 12usize];
    ["Offset of field: FIREWALL_TypeDef::VDSSA"]
        [::core::mem::offset_of!(FIREWALL_TypeDef, VDSSA) - 16usize];
    ["Offset of field: FIREWALL_TypeDef::VDSL"]
        [::core::mem::offset_of!(FIREWALL_TypeDef, VDSL) - 20usize];
    ["Offset of field: FIREWALL_TypeDef::LSSA"]
        [::core::mem::offset_of!(FIREWALL_TypeDef, LSSA) - 24usize];
    ["Offset of field: FIREWALL_TypeDef::LSL"]
        [::core::mem::offset_of!(FIREWALL_TypeDef, LSL) - 28usize];
    ["Offset of field: FIREWALL_TypeDef::CR"]
        [::core::mem::offset_of!(FIREWALL_TypeDef, CR) - 32usize];
};
#[doc = " @brief Power Control"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PWR_TypeDef {
    #[doc = "< PWR power control register,        Address offset: 0x00"]
    pub CR: u32,
    #[doc = "< PWR power control/status register, Address offset: 0x04"]
    pub CSR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PWR_TypeDef"][::core::mem::size_of::<PWR_TypeDef>() - 8usize];
    ["Alignment of PWR_TypeDef"][::core::mem::align_of::<PWR_TypeDef>() - 4usize];
    ["Offset of field: PWR_TypeDef::CR"][::core::mem::offset_of!(PWR_TypeDef, CR) - 0usize];
    ["Offset of field: PWR_TypeDef::CSR"][::core::mem::offset_of!(PWR_TypeDef, CSR) - 4usize];
};
#[doc = " @brief Reset and Clock Control"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct RCC_TypeDef {
    #[doc = "< RCC clock control register,                                   Address offset: 0x00"]
    pub CR: u32,
    #[doc = "< RCC Internal clock sources calibration register,              Address offset: 0x04"]
    pub ICSCR: u32,
    #[doc = "< RCC Clock recovery RC register,                               Address offset: 0x08"]
    pub CRRCR: u32,
    #[doc = "< RCC Clock configuration register,                             Address offset: 0x0C"]
    pub CFGR: u32,
    #[doc = "< RCC Clock interrupt enable register,                          Address offset: 0x10"]
    pub CIER: u32,
    #[doc = "< RCC Clock interrupt flag register,                            Address offset: 0x14"]
    pub CIFR: u32,
    #[doc = "< RCC Clock interrupt clear register,                           Address offset: 0x18"]
    pub CICR: u32,
    #[doc = "< RCC IO port reset register,                                   Address offset: 0x1C"]
    pub IOPRSTR: u32,
    #[doc = "< RCC AHB peripheral reset register,                            Address offset: 0x20"]
    pub AHBRSTR: u32,
    #[doc = "< RCC APB2 peripheral reset register,                           Address offset: 0x24"]
    pub APB2RSTR: u32,
    #[doc = "< RCC APB1 peripheral reset register,                           Address offset: 0x28"]
    pub APB1RSTR: u32,
    #[doc = "< RCC Clock IO port enable register,                            Address offset: 0x2C"]
    pub IOPENR: u32,
    #[doc = "< RCC AHB peripheral clock enable register,                     Address offset: 0x30"]
    pub AHBENR: u32,
    #[doc = "< RCC APB2 peripheral enable register,                          Address offset: 0x34"]
    pub APB2ENR: u32,
    #[doc = "< RCC APB1 peripheral enable register,                          Address offset: 0x38"]
    pub APB1ENR: u32,
    #[doc = "< RCC IO port clock enable in sleep mode register,              Address offset: 0x3C"]
    pub IOPSMENR: u32,
    #[doc = "< RCC AHB peripheral clock enable in sleep mode register,       Address offset: 0x40"]
    pub AHBSMENR: u32,
    #[doc = "< RCC APB2 peripheral clock enable in sleep mode register,      Address offset: 0x44"]
    pub APB2SMENR: u32,
    #[doc = "< RCC APB1 peripheral clock enable in sleep mode register,      Address offset: 0x48"]
    pub APB1SMENR: u32,
    #[doc = "< RCC clock configuration register,                             Address offset: 0x4C"]
    pub CCIPR: u32,
    #[doc = "< RCC Control/status register,                                  Address offset: 0x50"]
    pub CSR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RCC_TypeDef"][::core::mem::size_of::<RCC_TypeDef>() - 84usize];
    ["Alignment of RCC_TypeDef"][::core::mem::align_of::<RCC_TypeDef>() - 4usize];
    ["Offset of field: RCC_TypeDef::CR"][::core::mem::offset_of!(RCC_TypeDef, CR) - 0usize];
    ["Offset of field: RCC_TypeDef::ICSCR"][::core::mem::offset_of!(RCC_TypeDef, ICSCR) - 4usize];
    ["Offset of field: RCC_TypeDef::CRRCR"][::core::mem::offset_of!(RCC_TypeDef, CRRCR) - 8usize];
    ["Offset of field: RCC_TypeDef::CFGR"][::core::mem::offset_of!(RCC_TypeDef, CFGR) - 12usize];
    ["Offset of field: RCC_TypeDef::CIER"][::core::mem::offset_of!(RCC_TypeDef, CIER) - 16usize];
    ["Offset of field: RCC_TypeDef::CIFR"][::core::mem::offset_of!(RCC_TypeDef, CIFR) - 20usize];
    ["Offset of field: RCC_TypeDef::CICR"][::core::mem::offset_of!(RCC_TypeDef, CICR) - 24usize];
    ["Offset of field: RCC_TypeDef::IOPRSTR"]
        [::core::mem::offset_of!(RCC_TypeDef, IOPRSTR) - 28usize];
    ["Offset of field: RCC_TypeDef::AHBRSTR"]
        [::core::mem::offset_of!(RCC_TypeDef, AHBRSTR) - 32usize];
    ["Offset of field: RCC_TypeDef::APB2RSTR"]
        [::core::mem::offset_of!(RCC_TypeDef, APB2RSTR) - 36usize];
    ["Offset of field: RCC_TypeDef::APB1RSTR"]
        [::core::mem::offset_of!(RCC_TypeDef, APB1RSTR) - 40usize];
    ["Offset of field: RCC_TypeDef::IOPENR"]
        [::core::mem::offset_of!(RCC_TypeDef, IOPENR) - 44usize];
    ["Offset of field: RCC_TypeDef::AHBENR"]
        [::core::mem::offset_of!(RCC_TypeDef, AHBENR) - 48usize];
    ["Offset of field: RCC_TypeDef::APB2ENR"]
        [::core::mem::offset_of!(RCC_TypeDef, APB2ENR) - 52usize];
    ["Offset of field: RCC_TypeDef::APB1ENR"]
        [::core::mem::offset_of!(RCC_TypeDef, APB1ENR) - 56usize];
    ["Offset of field: RCC_TypeDef::IOPSMENR"]
        [::core::mem::offset_of!(RCC_TypeDef, IOPSMENR) - 60usize];
    ["Offset of field: RCC_TypeDef::AHBSMENR"]
        [::core::mem::offset_of!(RCC_TypeDef, AHBSMENR) - 64usize];
    ["Offset of field: RCC_TypeDef::APB2SMENR"]
        [::core::mem::offset_of!(RCC_TypeDef, APB2SMENR) - 68usize];
    ["Offset of field: RCC_TypeDef::APB1SMENR"]
        [::core::mem::offset_of!(RCC_TypeDef, APB1SMENR) - 72usize];
    ["Offset of field: RCC_TypeDef::CCIPR"][::core::mem::offset_of!(RCC_TypeDef, CCIPR) - 76usize];
    ["Offset of field: RCC_TypeDef::CSR"][::core::mem::offset_of!(RCC_TypeDef, CSR) - 80usize];
};
#[doc = " @brief Random numbers generator"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct RNG_TypeDef {
    #[doc = "< RNG control register, Address offset: 0x00"]
    pub CR: u32,
    #[doc = "< RNG status register,  Address offset: 0x04"]
    pub SR: u32,
    #[doc = "< RNG data register,    Address offset: 0x08"]
    pub DR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RNG_TypeDef"][::core::mem::size_of::<RNG_TypeDef>() - 12usize];
    ["Alignment of RNG_TypeDef"][::core::mem::align_of::<RNG_TypeDef>() - 4usize];
    ["Offset of field: RNG_TypeDef::CR"][::core::mem::offset_of!(RNG_TypeDef, CR) - 0usize];
    ["Offset of field: RNG_TypeDef::SR"][::core::mem::offset_of!(RNG_TypeDef, SR) - 4usize];
    ["Offset of field: RNG_TypeDef::DR"][::core::mem::offset_of!(RNG_TypeDef, DR) - 8usize];
};
#[doc = " @brief Real-Time Clock"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct RTC_TypeDef {
    #[doc = "< RTC time register,                                         Address offset: 0x00"]
    pub TR: u32,
    #[doc = "< RTC date register,                                         Address offset: 0x04"]
    pub DR: u32,
    #[doc = "< RTC control register,                                      Address offset: 0x08"]
    pub CR: u32,
    #[doc = "< RTC initialization and status register,                    Address offset: 0x0C"]
    pub ISR: u32,
    #[doc = "< RTC prescaler register,                                    Address offset: 0x10"]
    pub PRER: u32,
    #[doc = "< RTC wakeup timer register,                                 Address offset: 0x14"]
    pub WUTR: u32,
    #[doc = "< Reserved,                                                  Address offset: 0x18"]
    pub RESERVED: u32,
    #[doc = "< RTC alarm A register,                                      Address offset: 0x1C"]
    pub ALRMAR: u32,
    #[doc = "< RTC alarm B register,                                      Address offset: 0x20"]
    pub ALRMBR: u32,
    #[doc = "< RTC write protection register,                             Address offset: 0x24"]
    pub WPR: u32,
    #[doc = "< RTC sub second register,                                   Address offset: 0x28"]
    pub SSR: u32,
    #[doc = "< RTC shift control register,                                Address offset: 0x2C"]
    pub SHIFTR: u32,
    #[doc = "< RTC time stamp time register,                              Address offset: 0x30"]
    pub TSTR: u32,
    #[doc = "< RTC time stamp date register,                              Address offset: 0x34"]
    pub TSDR: u32,
    #[doc = "< RTC time-stamp sub second register,                        Address offset: 0x38"]
    pub TSSSR: u32,
    #[doc = "< RTC calibration register,                                  Address offset: 0x3C"]
    pub CALR: u32,
    #[doc = "< RTC tamper configuration register,                         Address offset: 0x40"]
    pub TAMPCR: u32,
    #[doc = "< RTC alarm A sub second register,                           Address offset: 0x44"]
    pub ALRMASSR: u32,
    #[doc = "< RTC alarm B sub second register,                           Address offset: 0x48"]
    pub ALRMBSSR: u32,
    #[doc = "< RTC option register,                                       Address offset  0x4C"]
    pub OR: u32,
    #[doc = "< RTC backup register 0,                                     Address offset: 0x50"]
    pub BKP0R: u32,
    #[doc = "< RTC backup register 1,                                     Address offset: 0x54"]
    pub BKP1R: u32,
    #[doc = "< RTC backup register 2,                                     Address offset: 0x58"]
    pub BKP2R: u32,
    #[doc = "< RTC backup register 3,                                     Address offset: 0x5C"]
    pub BKP3R: u32,
    #[doc = "< RTC backup register 4,                                     Address offset: 0x60"]
    pub BKP4R: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RTC_TypeDef"][::core::mem::size_of::<RTC_TypeDef>() - 100usize];
    ["Alignment of RTC_TypeDef"][::core::mem::align_of::<RTC_TypeDef>() - 4usize];
    ["Offset of field: RTC_TypeDef::TR"][::core::mem::offset_of!(RTC_TypeDef, TR) - 0usize];
    ["Offset of field: RTC_TypeDef::DR"][::core::mem::offset_of!(RTC_TypeDef, DR) - 4usize];
    ["Offset of field: RTC_TypeDef::CR"][::core::mem::offset_of!(RTC_TypeDef, CR) - 8usize];
    ["Offset of field: RTC_TypeDef::ISR"][::core::mem::offset_of!(RTC_TypeDef, ISR) - 12usize];
    ["Offset of field: RTC_TypeDef::PRER"][::core::mem::offset_of!(RTC_TypeDef, PRER) - 16usize];
    ["Offset of field: RTC_TypeDef::WUTR"][::core::mem::offset_of!(RTC_TypeDef, WUTR) - 20usize];
    ["Offset of field: RTC_TypeDef::RESERVED"]
        [::core::mem::offset_of!(RTC_TypeDef, RESERVED) - 24usize];
    ["Offset of field: RTC_TypeDef::ALRMAR"]
        [::core::mem::offset_of!(RTC_TypeDef, ALRMAR) - 28usize];
    ["Offset of field: RTC_TypeDef::ALRMBR"]
        [::core::mem::offset_of!(RTC_TypeDef, ALRMBR) - 32usize];
    ["Offset of field: RTC_TypeDef::WPR"][::core::mem::offset_of!(RTC_TypeDef, WPR) - 36usize];
    ["Offset of field: RTC_TypeDef::SSR"][::core::mem::offset_of!(RTC_TypeDef, SSR) - 40usize];
    ["Offset of field: RTC_TypeDef::SHIFTR"]
        [::core::mem::offset_of!(RTC_TypeDef, SHIFTR) - 44usize];
    ["Offset of field: RTC_TypeDef::TSTR"][::core::mem::offset_of!(RTC_TypeDef, TSTR) - 48usize];
    ["Offset of field: RTC_TypeDef::TSDR"][::core::mem::offset_of!(RTC_TypeDef, TSDR) - 52usize];
    ["Offset of field: RTC_TypeDef::TSSSR"][::core::mem::offset_of!(RTC_TypeDef, TSSSR) - 56usize];
    ["Offset of field: RTC_TypeDef::CALR"][::core::mem::offset_of!(RTC_TypeDef, CALR) - 60usize];
    ["Offset of field: RTC_TypeDef::TAMPCR"]
        [::core::mem::offset_of!(RTC_TypeDef, TAMPCR) - 64usize];
    ["Offset of field: RTC_TypeDef::ALRMASSR"]
        [::core::mem::offset_of!(RTC_TypeDef, ALRMASSR) - 68usize];
    ["Offset of field: RTC_TypeDef::ALRMBSSR"]
        [::core::mem::offset_of!(RTC_TypeDef, ALRMBSSR) - 72usize];
    ["Offset of field: RTC_TypeDef::OR"][::core::mem::offset_of!(RTC_TypeDef, OR) - 76usize];
    ["Offset of field: RTC_TypeDef::BKP0R"][::core::mem::offset_of!(RTC_TypeDef, BKP0R) - 80usize];
    ["Offset of field: RTC_TypeDef::BKP1R"][::core::mem::offset_of!(RTC_TypeDef, BKP1R) - 84usize];
    ["Offset of field: RTC_TypeDef::BKP2R"][::core::mem::offset_of!(RTC_TypeDef, BKP2R) - 88usize];
    ["Offset of field: RTC_TypeDef::BKP3R"][::core::mem::offset_of!(RTC_TypeDef, BKP3R) - 92usize];
    ["Offset of field: RTC_TypeDef::BKP4R"][::core::mem::offset_of!(RTC_TypeDef, BKP4R) - 96usize];
};
#[doc = " @brief Serial Peripheral Interface"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SPI_TypeDef {
    #[doc = "< SPI Control register 1 (not used in I2S mode),       Address offset: 0x00"]
    pub CR1: u32,
    #[doc = "< SPI Control register 2,                              Address offset: 0x04"]
    pub CR2: u32,
    #[doc = "< SPI Status register,                                 Address offset: 0x08"]
    pub SR: u32,
    #[doc = "< SPI data register,                                   Address offset: 0x0C"]
    pub DR: u32,
    #[doc = "< SPI CRC polynomial register (not used in I2S mode),  Address offset: 0x10"]
    pub CRCPR: u32,
    #[doc = "< SPI Rx CRC register (not used in I2S mode),          Address offset: 0x14"]
    pub RXCRCR: u32,
    #[doc = "< SPI Tx CRC register (not used in I2S mode),          Address offset: 0x18"]
    pub TXCRCR: u32,
    #[doc = "< SPI_I2S configuration register,                      Address offset: 0x1C"]
    pub I2SCFGR: u32,
    #[doc = "< SPI_I2S prescaler register,                          Address offset: 0x20"]
    pub I2SPR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SPI_TypeDef"][::core::mem::size_of::<SPI_TypeDef>() - 36usize];
    ["Alignment of SPI_TypeDef"][::core::mem::align_of::<SPI_TypeDef>() - 4usize];
    ["Offset of field: SPI_TypeDef::CR1"][::core::mem::offset_of!(SPI_TypeDef, CR1) - 0usize];
    ["Offset of field: SPI_TypeDef::CR2"][::core::mem::offset_of!(SPI_TypeDef, CR2) - 4usize];
    ["Offset of field: SPI_TypeDef::SR"][::core::mem::offset_of!(SPI_TypeDef, SR) - 8usize];
    ["Offset of field: SPI_TypeDef::DR"][::core::mem::offset_of!(SPI_TypeDef, DR) - 12usize];
    ["Offset of field: SPI_TypeDef::CRCPR"][::core::mem::offset_of!(SPI_TypeDef, CRCPR) - 16usize];
    ["Offset of field: SPI_TypeDef::RXCRCR"]
        [::core::mem::offset_of!(SPI_TypeDef, RXCRCR) - 20usize];
    ["Offset of field: SPI_TypeDef::TXCRCR"]
        [::core::mem::offset_of!(SPI_TypeDef, TXCRCR) - 24usize];
    ["Offset of field: SPI_TypeDef::I2SCFGR"]
        [::core::mem::offset_of!(SPI_TypeDef, I2SCFGR) - 28usize];
    ["Offset of field: SPI_TypeDef::I2SPR"][::core::mem::offset_of!(SPI_TypeDef, I2SPR) - 32usize];
};
#[doc = " @brief TIM"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TIM_TypeDef {
    #[doc = "< TIM control register 1,                       Address offset: 0x00"]
    pub CR1: u32,
    #[doc = "< TIM control register 2,                       Address offset: 0x04"]
    pub CR2: u32,
    #[doc = "< TIM slave Mode Control register,              Address offset: 0x08"]
    pub SMCR: u32,
    #[doc = "< TIM DMA/interrupt enable register,            Address offset: 0x0C"]
    pub DIER: u32,
    #[doc = "< TIM status register,                          Address offset: 0x10"]
    pub SR: u32,
    #[doc = "< TIM event generation register,                Address offset: 0x14"]
    pub EGR: u32,
    #[doc = "< TIM  capture/compare mode register 1,         Address offset: 0x18"]
    pub CCMR1: u32,
    #[doc = "< TIM  capture/compare mode register 2,         Address offset: 0x1C"]
    pub CCMR2: u32,
    #[doc = "< TIM capture/compare enable register,          Address offset: 0x20"]
    pub CCER: u32,
    #[doc = "< TIM counter register,                         Address offset: 0x24"]
    pub CNT: u32,
    #[doc = "< TIM prescaler register,                       Address offset: 0x28"]
    pub PSC: u32,
    #[doc = "< TIM auto-reload register,                     Address offset: 0x2C"]
    pub ARR: u32,
    #[doc = "< Reserved                                      Address offset: 0x30"]
    pub RESERVED12: u32,
    #[doc = "< TIM capture/compare register 1,               Address offset: 0x34"]
    pub CCR1: u32,
    #[doc = "< TIM capture/compare register 2,               Address offset: 0x38"]
    pub CCR2: u32,
    #[doc = "< TIM capture/compare register 3,               Address offset: 0x3C"]
    pub CCR3: u32,
    #[doc = "< TIM capture/compare register 4,               Address offset: 0x40"]
    pub CCR4: u32,
    #[doc = "< Reserved,                                     Address offset: 0x44"]
    pub RESERVED17: u32,
    #[doc = "< TIM DMA control register,                     Address offset: 0x48"]
    pub DCR: u32,
    #[doc = "< TIM DMA address for full transfer register,   Address offset: 0x4C"]
    pub DMAR: u32,
    #[doc = "< TIM option register,                          Address offset: 0x50"]
    pub OR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TIM_TypeDef"][::core::mem::size_of::<TIM_TypeDef>() - 84usize];
    ["Alignment of TIM_TypeDef"][::core::mem::align_of::<TIM_TypeDef>() - 4usize];
    ["Offset of field: TIM_TypeDef::CR1"][::core::mem::offset_of!(TIM_TypeDef, CR1) - 0usize];
    ["Offset of field: TIM_TypeDef::CR2"][::core::mem::offset_of!(TIM_TypeDef, CR2) - 4usize];
    ["Offset of field: TIM_TypeDef::SMCR"][::core::mem::offset_of!(TIM_TypeDef, SMCR) - 8usize];
    ["Offset of field: TIM_TypeDef::DIER"][::core::mem::offset_of!(TIM_TypeDef, DIER) - 12usize];
    ["Offset of field: TIM_TypeDef::SR"][::core::mem::offset_of!(TIM_TypeDef, SR) - 16usize];
    ["Offset of field: TIM_TypeDef::EGR"][::core::mem::offset_of!(TIM_TypeDef, EGR) - 20usize];
    ["Offset of field: TIM_TypeDef::CCMR1"][::core::mem::offset_of!(TIM_TypeDef, CCMR1) - 24usize];
    ["Offset of field: TIM_TypeDef::CCMR2"][::core::mem::offset_of!(TIM_TypeDef, CCMR2) - 28usize];
    ["Offset of field: TIM_TypeDef::CCER"][::core::mem::offset_of!(TIM_TypeDef, CCER) - 32usize];
    ["Offset of field: TIM_TypeDef::CNT"][::core::mem::offset_of!(TIM_TypeDef, CNT) - 36usize];
    ["Offset of field: TIM_TypeDef::PSC"][::core::mem::offset_of!(TIM_TypeDef, PSC) - 40usize];
    ["Offset of field: TIM_TypeDef::ARR"][::core::mem::offset_of!(TIM_TypeDef, ARR) - 44usize];
    ["Offset of field: TIM_TypeDef::RESERVED12"]
        [::core::mem::offset_of!(TIM_TypeDef, RESERVED12) - 48usize];
    ["Offset of field: TIM_TypeDef::CCR1"][::core::mem::offset_of!(TIM_TypeDef, CCR1) - 52usize];
    ["Offset of field: TIM_TypeDef::CCR2"][::core::mem::offset_of!(TIM_TypeDef, CCR2) - 56usize];
    ["Offset of field: TIM_TypeDef::CCR3"][::core::mem::offset_of!(TIM_TypeDef, CCR3) - 60usize];
    ["Offset of field: TIM_TypeDef::CCR4"][::core::mem::offset_of!(TIM_TypeDef, CCR4) - 64usize];
    ["Offset of field: TIM_TypeDef::RESERVED17"]
        [::core::mem::offset_of!(TIM_TypeDef, RESERVED17) - 68usize];
    ["Offset of field: TIM_TypeDef::DCR"][::core::mem::offset_of!(TIM_TypeDef, DCR) - 72usize];
    ["Offset of field: TIM_TypeDef::DMAR"][::core::mem::offset_of!(TIM_TypeDef, DMAR) - 76usize];
    ["Offset of field: TIM_TypeDef::OR"][::core::mem::offset_of!(TIM_TypeDef, OR) - 80usize];
};
#[doc = " @brief Touch Sensing Controller (TSC)"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TSC_TypeDef {
    #[doc = "< TSC control register,                     Address offset: 0x00"]
    pub CR: u32,
    #[doc = "< TSC interrupt enable register,            Address offset: 0x04"]
    pub IER: u32,
    #[doc = "< TSC interrupt clear register,             Address offset: 0x08"]
    pub ICR: u32,
    #[doc = "< TSC interrupt status register,            Address offset: 0x0C"]
    pub ISR: u32,
    #[doc = "< TSC I/O hysteresis control register,      Address offset: 0x10"]
    pub IOHCR: u32,
    #[doc = "< Reserved,                                 Address offset: 0x14"]
    pub RESERVED1: u32,
    #[doc = "< TSC I/O analog switch control register,   Address offset: 0x18"]
    pub IOASCR: u32,
    #[doc = "< Reserved,                                 Address offset: 0x1C"]
    pub RESERVED2: u32,
    #[doc = "< TSC I/O sampling control register,        Address offset: 0x20"]
    pub IOSCR: u32,
    #[doc = "< Reserved,                                 Address offset: 0x24"]
    pub RESERVED3: u32,
    #[doc = "< TSC I/O channel control register,         Address offset: 0x28"]
    pub IOCCR: u32,
    #[doc = "< Reserved,                                 Address offset: 0x2C"]
    pub RESERVED4: u32,
    #[doc = "< TSC I/O group control status register,    Address offset: 0x30"]
    pub IOGCSR: u32,
    #[doc = "< TSC I/O group x counter register,         Address offset: 0x34-50"]
    pub IOGXCR: [u32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TSC_TypeDef"][::core::mem::size_of::<TSC_TypeDef>() - 84usize];
    ["Alignment of TSC_TypeDef"][::core::mem::align_of::<TSC_TypeDef>() - 4usize];
    ["Offset of field: TSC_TypeDef::CR"][::core::mem::offset_of!(TSC_TypeDef, CR) - 0usize];
    ["Offset of field: TSC_TypeDef::IER"][::core::mem::offset_of!(TSC_TypeDef, IER) - 4usize];
    ["Offset of field: TSC_TypeDef::ICR"][::core::mem::offset_of!(TSC_TypeDef, ICR) - 8usize];
    ["Offset of field: TSC_TypeDef::ISR"][::core::mem::offset_of!(TSC_TypeDef, ISR) - 12usize];
    ["Offset of field: TSC_TypeDef::IOHCR"][::core::mem::offset_of!(TSC_TypeDef, IOHCR) - 16usize];
    ["Offset of field: TSC_TypeDef::RESERVED1"]
        [::core::mem::offset_of!(TSC_TypeDef, RESERVED1) - 20usize];
    ["Offset of field: TSC_TypeDef::IOASCR"]
        [::core::mem::offset_of!(TSC_TypeDef, IOASCR) - 24usize];
    ["Offset of field: TSC_TypeDef::RESERVED2"]
        [::core::mem::offset_of!(TSC_TypeDef, RESERVED2) - 28usize];
    ["Offset of field: TSC_TypeDef::IOSCR"][::core::mem::offset_of!(TSC_TypeDef, IOSCR) - 32usize];
    ["Offset of field: TSC_TypeDef::RESERVED3"]
        [::core::mem::offset_of!(TSC_TypeDef, RESERVED3) - 36usize];
    ["Offset of field: TSC_TypeDef::IOCCR"][::core::mem::offset_of!(TSC_TypeDef, IOCCR) - 40usize];
    ["Offset of field: TSC_TypeDef::RESERVED4"]
        [::core::mem::offset_of!(TSC_TypeDef, RESERVED4) - 44usize];
    ["Offset of field: TSC_TypeDef::IOGCSR"]
        [::core::mem::offset_of!(TSC_TypeDef, IOGCSR) - 48usize];
    ["Offset of field: TSC_TypeDef::IOGXCR"]
        [::core::mem::offset_of!(TSC_TypeDef, IOGXCR) - 52usize];
};
#[doc = " @brief Universal Synchronous Asynchronous Receiver Transmitter"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct USART_TypeDef {
    #[doc = "< USART Control register 1,                 Address offset: 0x00"]
    pub CR1: u32,
    #[doc = "< USART Control register 2,                 Address offset: 0x04"]
    pub CR2: u32,
    #[doc = "< USART Control register 3,                 Address offset: 0x08"]
    pub CR3: u32,
    #[doc = "< USART Baud rate register,                 Address offset: 0x0C"]
    pub BRR: u32,
    #[doc = "< USART Guard time and prescaler register,  Address offset: 0x10"]
    pub GTPR: u32,
    #[doc = "< USART Receiver Time Out register,         Address offset: 0x14"]
    pub RTOR: u32,
    #[doc = "< USART Request register,                   Address offset: 0x18"]
    pub RQR: u32,
    #[doc = "< USART Interrupt and status register,      Address offset: 0x1C"]
    pub ISR: u32,
    #[doc = "< USART Interrupt flag Clear register,      Address offset: 0x20"]
    pub ICR: u32,
    #[doc = "< USART Receive Data register,              Address offset: 0x24"]
    pub RDR: u32,
    #[doc = "< USART Transmit Data register,             Address offset: 0x28"]
    pub TDR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of USART_TypeDef"][::core::mem::size_of::<USART_TypeDef>() - 44usize];
    ["Alignment of USART_TypeDef"][::core::mem::align_of::<USART_TypeDef>() - 4usize];
    ["Offset of field: USART_TypeDef::CR1"][::core::mem::offset_of!(USART_TypeDef, CR1) - 0usize];
    ["Offset of field: USART_TypeDef::CR2"][::core::mem::offset_of!(USART_TypeDef, CR2) - 4usize];
    ["Offset of field: USART_TypeDef::CR3"][::core::mem::offset_of!(USART_TypeDef, CR3) - 8usize];
    ["Offset of field: USART_TypeDef::BRR"][::core::mem::offset_of!(USART_TypeDef, BRR) - 12usize];
    ["Offset of field: USART_TypeDef::GTPR"]
        [::core::mem::offset_of!(USART_TypeDef, GTPR) - 16usize];
    ["Offset of field: USART_TypeDef::RTOR"]
        [::core::mem::offset_of!(USART_TypeDef, RTOR) - 20usize];
    ["Offset of field: USART_TypeDef::RQR"][::core::mem::offset_of!(USART_TypeDef, RQR) - 24usize];
    ["Offset of field: USART_TypeDef::ISR"][::core::mem::offset_of!(USART_TypeDef, ISR) - 28usize];
    ["Offset of field: USART_TypeDef::ICR"][::core::mem::offset_of!(USART_TypeDef, ICR) - 32usize];
    ["Offset of field: USART_TypeDef::RDR"][::core::mem::offset_of!(USART_TypeDef, RDR) - 36usize];
    ["Offset of field: USART_TypeDef::TDR"][::core::mem::offset_of!(USART_TypeDef, TDR) - 40usize];
};
#[doc = " @brief Window WATCHDOG"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct WWDG_TypeDef {
    #[doc = "< WWDG Control register,       Address offset: 0x00"]
    pub CR: u32,
    #[doc = "< WWDG Configuration register, Address offset: 0x04"]
    pub CFR: u32,
    #[doc = "< WWDG Status register,        Address offset: 0x08"]
    pub SR: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WWDG_TypeDef"][::core::mem::size_of::<WWDG_TypeDef>() - 12usize];
    ["Alignment of WWDG_TypeDef"][::core::mem::align_of::<WWDG_TypeDef>() - 4usize];
    ["Offset of field: WWDG_TypeDef::CR"][::core::mem::offset_of!(WWDG_TypeDef, CR) - 0usize];
    ["Offset of field: WWDG_TypeDef::CFR"][::core::mem::offset_of!(WWDG_TypeDef, CFR) - 4usize];
    ["Offset of field: WWDG_TypeDef::SR"][::core::mem::offset_of!(WWDG_TypeDef, SR) - 8usize];
};
#[doc = " @brief Universal Serial Bus Full Speed Device"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct USB_TypeDef {
    #[doc = "< USB Endpoint 0 register,                Address offset: 0x00"]
    pub EP0R: u16,
    #[doc = "< Reserved"]
    pub RESERVED0: u16,
    #[doc = "< USB Endpoint 1 register,                Address offset: 0x04"]
    pub EP1R: u16,
    #[doc = "< Reserved"]
    pub RESERVED1: u16,
    #[doc = "< USB Endpoint 2 register,                Address offset: 0x08"]
    pub EP2R: u16,
    #[doc = "< Reserved"]
    pub RESERVED2: u16,
    #[doc = "< USB Endpoint 3 register,                Address offset: 0x0C"]
    pub EP3R: u16,
    #[doc = "< Reserved"]
    pub RESERVED3: u16,
    #[doc = "< USB Endpoint 4 register,                Address offset: 0x10"]
    pub EP4R: u16,
    #[doc = "< Reserved"]
    pub RESERVED4: u16,
    #[doc = "< USB Endpoint 5 register,                Address offset: 0x14"]
    pub EP5R: u16,
    #[doc = "< Reserved"]
    pub RESERVED5: u16,
    #[doc = "< USB Endpoint 6 register,                Address offset: 0x18"]
    pub EP6R: u16,
    #[doc = "< Reserved"]
    pub RESERVED6: u16,
    #[doc = "< USB Endpoint 7 register,                Address offset: 0x1C"]
    pub EP7R: u16,
    #[doc = "< Reserved"]
    pub RESERVED7: [u16; 17usize],
    #[doc = "< Control register,                       Address offset: 0x40"]
    pub CNTR: u16,
    #[doc = "< Reserved"]
    pub RESERVED8: u16,
    #[doc = "< Interrupt status register,              Address offset: 0x44"]
    pub ISTR: u16,
    #[doc = "< Reserved"]
    pub RESERVED9: u16,
    #[doc = "< Frame number register,                  Address offset: 0x48"]
    pub FNR: u16,
    #[doc = "< Reserved"]
    pub RESERVEDA: u16,
    #[doc = "< Device address register,                Address offset: 0x4C"]
    pub DADDR: u16,
    #[doc = "< Reserved"]
    pub RESERVEDB: u16,
    #[doc = "< Buffer Table address register,          Address offset: 0x50"]
    pub BTABLE: u16,
    #[doc = "< Reserved"]
    pub RESERVEDC: u16,
    #[doc = "< LPM Control and Status register,        Address offset: 0x54"]
    pub LPMCSR: u16,
    #[doc = "< Reserved"]
    pub RESERVEDD: u16,
    #[doc = "< Battery Charging detector register,     Address offset: 0x58"]
    pub BCDR: u16,
    #[doc = "< Reserved"]
    pub RESERVEDE: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of USB_TypeDef"][::core::mem::size_of::<USB_TypeDef>() - 92usize];
    ["Alignment of USB_TypeDef"][::core::mem::align_of::<USB_TypeDef>() - 2usize];
    ["Offset of field: USB_TypeDef::EP0R"][::core::mem::offset_of!(USB_TypeDef, EP0R) - 0usize];
    ["Offset of field: USB_TypeDef::RESERVED0"]
        [::core::mem::offset_of!(USB_TypeDef, RESERVED0) - 2usize];
    ["Offset of field: USB_TypeDef::EP1R"][::core::mem::offset_of!(USB_TypeDef, EP1R) - 4usize];
    ["Offset of field: USB_TypeDef::RESERVED1"]
        [::core::mem::offset_of!(USB_TypeDef, RESERVED1) - 6usize];
    ["Offset of field: USB_TypeDef::EP2R"][::core::mem::offset_of!(USB_TypeDef, EP2R) - 8usize];
    ["Offset of field: USB_TypeDef::RESERVED2"]
        [::core::mem::offset_of!(USB_TypeDef, RESERVED2) - 10usize];
    ["Offset of field: USB_TypeDef::EP3R"][::core::mem::offset_of!(USB_TypeDef, EP3R) - 12usize];
    ["Offset of field: USB_TypeDef::RESERVED3"]
        [::core::mem::offset_of!(USB_TypeDef, RESERVED3) - 14usize];
    ["Offset of field: USB_TypeDef::EP4R"][::core::mem::offset_of!(USB_TypeDef, EP4R) - 16usize];
    ["Offset of field: USB_TypeDef::RESERVED4"]
        [::core::mem::offset_of!(USB_TypeDef, RESERVED4) - 18usize];
    ["Offset of field: USB_TypeDef::EP5R"][::core::mem::offset_of!(USB_TypeDef, EP5R) - 20usize];
    ["Offset of field: USB_TypeDef::RESERVED5"]
        [::core::mem::offset_of!(USB_TypeDef, RESERVED5) - 22usize];
    ["Offset of field: USB_TypeDef::EP6R"][::core::mem::offset_of!(USB_TypeDef, EP6R) - 24usize];
    ["Offset of field: USB_TypeDef::RESERVED6"]
        [::core::mem::offset_of!(USB_TypeDef, RESERVED6) - 26usize];
    ["Offset of field: USB_TypeDef::EP7R"][::core::mem::offset_of!(USB_TypeDef, EP7R) - 28usize];
    ["Offset of field: USB_TypeDef::RESERVED7"]
        [::core::mem::offset_of!(USB_TypeDef, RESERVED7) - 30usize];
    ["Offset of field: USB_TypeDef::CNTR"][::core::mem::offset_of!(USB_TypeDef, CNTR) - 64usize];
    ["Offset of field: USB_TypeDef::RESERVED8"]
        [::core::mem::offset_of!(USB_TypeDef, RESERVED8) - 66usize];
    ["Offset of field: USB_TypeDef::ISTR"][::core::mem::offset_of!(USB_TypeDef, ISTR) - 68usize];
    ["Offset of field: USB_TypeDef::RESERVED9"]
        [::core::mem::offset_of!(USB_TypeDef, RESERVED9) - 70usize];
    ["Offset of field: USB_TypeDef::FNR"][::core::mem::offset_of!(USB_TypeDef, FNR) - 72usize];
    ["Offset of field: USB_TypeDef::RESERVEDA"]
        [::core::mem::offset_of!(USB_TypeDef, RESERVEDA) - 74usize];
    ["Offset of field: USB_TypeDef::DADDR"][::core::mem::offset_of!(USB_TypeDef, DADDR) - 76usize];
    ["Offset of field: USB_TypeDef::RESERVEDB"]
        [::core::mem::offset_of!(USB_TypeDef, RESERVEDB) - 78usize];
    ["Offset of field: USB_TypeDef::BTABLE"]
        [::core::mem::offset_of!(USB_TypeDef, BTABLE) - 80usize];
    ["Offset of field: USB_TypeDef::RESERVEDC"]
        [::core::mem::offset_of!(USB_TypeDef, RESERVEDC) - 82usize];
    ["Offset of field: USB_TypeDef::LPMCSR"]
        [::core::mem::offset_of!(USB_TypeDef, LPMCSR) - 84usize];
    ["Offset of field: USB_TypeDef::RESERVEDD"]
        [::core::mem::offset_of!(USB_TypeDef, RESERVEDD) - 86usize];
    ["Offset of field: USB_TypeDef::BCDR"][::core::mem::offset_of!(USB_TypeDef, BCDR) - 88usize];
    ["Offset of field: USB_TypeDef::RESERVEDE"]
        [::core::mem::offset_of!(USB_TypeDef, RESERVEDE) - 90usize];
};
